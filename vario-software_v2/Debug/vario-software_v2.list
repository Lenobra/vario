
vario-software_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005174  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080052fc  080052fc  000062fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005344  08005344  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005344  08005344  00006344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800534c  0800534c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800534c  0800534c  0000634c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005350  08005350  00006350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005354  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  2000000c  08005360  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08005360  000071d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119e1  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000225d  00000000  00000000  00018a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  0001ac80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c40  00000000  00000000  0001bc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027eb2  00000000  00000000  0001c870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012674  00000000  00000000  00044722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdbe9  00000000  00000000  00056d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015497f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004404  00000000  00000000  001549c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00158dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080052e4 	.word	0x080052e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080052e4 	.word	0x080052e4

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295
 80007e8:	f000 b988 	b.w	8000afc <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	468e      	mov	lr, r1
 800080c:	4604      	mov	r4, r0
 800080e:	4688      	mov	r8, r1
 8000810:	2b00      	cmp	r3, #0
 8000812:	d14a      	bne.n	80008aa <__udivmoddi4+0xa6>
 8000814:	428a      	cmp	r2, r1
 8000816:	4617      	mov	r7, r2
 8000818:	d962      	bls.n	80008e0 <__udivmoddi4+0xdc>
 800081a:	fab2 f682 	clz	r6, r2
 800081e:	b14e      	cbz	r6, 8000834 <__udivmoddi4+0x30>
 8000820:	f1c6 0320 	rsb	r3, r6, #32
 8000824:	fa01 f806 	lsl.w	r8, r1, r6
 8000828:	fa20 f303 	lsr.w	r3, r0, r3
 800082c:	40b7      	lsls	r7, r6
 800082e:	ea43 0808 	orr.w	r8, r3, r8
 8000832:	40b4      	lsls	r4, r6
 8000834:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000838:	fa1f fc87 	uxth.w	ip, r7
 800083c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000840:	0c23      	lsrs	r3, r4, #16
 8000842:	fb0e 8811 	mls	r8, lr, r1, r8
 8000846:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800084a:	fb01 f20c 	mul.w	r2, r1, ip
 800084e:	429a      	cmp	r2, r3
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x62>
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	f101 30ff 	add.w	r0, r1, #4294967295
 8000858:	f080 80ea 	bcs.w	8000a30 <__udivmoddi4+0x22c>
 800085c:	429a      	cmp	r2, r3
 800085e:	f240 80e7 	bls.w	8000a30 <__udivmoddi4+0x22c>
 8000862:	3902      	subs	r1, #2
 8000864:	443b      	add	r3, r7
 8000866:	1a9a      	subs	r2, r3, r2
 8000868:	b2a3      	uxth	r3, r4
 800086a:	fbb2 f0fe 	udiv	r0, r2, lr
 800086e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000876:	fb00 fc0c 	mul.w	ip, r0, ip
 800087a:	459c      	cmp	ip, r3
 800087c:	d909      	bls.n	8000892 <__udivmoddi4+0x8e>
 800087e:	18fb      	adds	r3, r7, r3
 8000880:	f100 32ff 	add.w	r2, r0, #4294967295
 8000884:	f080 80d6 	bcs.w	8000a34 <__udivmoddi4+0x230>
 8000888:	459c      	cmp	ip, r3
 800088a:	f240 80d3 	bls.w	8000a34 <__udivmoddi4+0x230>
 800088e:	443b      	add	r3, r7
 8000890:	3802      	subs	r0, #2
 8000892:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000896:	eba3 030c 	sub.w	r3, r3, ip
 800089a:	2100      	movs	r1, #0
 800089c:	b11d      	cbz	r5, 80008a6 <__udivmoddi4+0xa2>
 800089e:	40f3      	lsrs	r3, r6
 80008a0:	2200      	movs	r2, #0
 80008a2:	e9c5 3200 	strd	r3, r2, [r5]
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d905      	bls.n	80008ba <__udivmoddi4+0xb6>
 80008ae:	b10d      	cbz	r5, 80008b4 <__udivmoddi4+0xb0>
 80008b0:	e9c5 0100 	strd	r0, r1, [r5]
 80008b4:	2100      	movs	r1, #0
 80008b6:	4608      	mov	r0, r1
 80008b8:	e7f5      	b.n	80008a6 <__udivmoddi4+0xa2>
 80008ba:	fab3 f183 	clz	r1, r3
 80008be:	2900      	cmp	r1, #0
 80008c0:	d146      	bne.n	8000950 <__udivmoddi4+0x14c>
 80008c2:	4573      	cmp	r3, lr
 80008c4:	d302      	bcc.n	80008cc <__udivmoddi4+0xc8>
 80008c6:	4282      	cmp	r2, r0
 80008c8:	f200 8105 	bhi.w	8000ad6 <__udivmoddi4+0x2d2>
 80008cc:	1a84      	subs	r4, r0, r2
 80008ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80008d2:	2001      	movs	r0, #1
 80008d4:	4690      	mov	r8, r2
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d0e5      	beq.n	80008a6 <__udivmoddi4+0xa2>
 80008da:	e9c5 4800 	strd	r4, r8, [r5]
 80008de:	e7e2      	b.n	80008a6 <__udivmoddi4+0xa2>
 80008e0:	2a00      	cmp	r2, #0
 80008e2:	f000 8090 	beq.w	8000a06 <__udivmoddi4+0x202>
 80008e6:	fab2 f682 	clz	r6, r2
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	f040 80a4 	bne.w	8000a38 <__udivmoddi4+0x234>
 80008f0:	1a8a      	subs	r2, r1, r2
 80008f2:	0c03      	lsrs	r3, r0, #16
 80008f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008f8:	b280      	uxth	r0, r0
 80008fa:	b2bc      	uxth	r4, r7
 80008fc:	2101      	movs	r1, #1
 80008fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000902:	fb0e 221c 	mls	r2, lr, ip, r2
 8000906:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800090a:	fb04 f20c 	mul.w	r2, r4, ip
 800090e:	429a      	cmp	r2, r3
 8000910:	d907      	bls.n	8000922 <__udivmoddi4+0x11e>
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000918:	d202      	bcs.n	8000920 <__udivmoddi4+0x11c>
 800091a:	429a      	cmp	r2, r3
 800091c:	f200 80e0 	bhi.w	8000ae0 <__udivmoddi4+0x2dc>
 8000920:	46c4      	mov	ip, r8
 8000922:	1a9b      	subs	r3, r3, r2
 8000924:	fbb3 f2fe 	udiv	r2, r3, lr
 8000928:	fb0e 3312 	mls	r3, lr, r2, r3
 800092c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000930:	fb02 f404 	mul.w	r4, r2, r4
 8000934:	429c      	cmp	r4, r3
 8000936:	d907      	bls.n	8000948 <__udivmoddi4+0x144>
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	f102 30ff 	add.w	r0, r2, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x142>
 8000940:	429c      	cmp	r4, r3
 8000942:	f200 80ca 	bhi.w	8000ada <__udivmoddi4+0x2d6>
 8000946:	4602      	mov	r2, r0
 8000948:	1b1b      	subs	r3, r3, r4
 800094a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800094e:	e7a5      	b.n	800089c <__udivmoddi4+0x98>
 8000950:	f1c1 0620 	rsb	r6, r1, #32
 8000954:	408b      	lsls	r3, r1
 8000956:	fa22 f706 	lsr.w	r7, r2, r6
 800095a:	431f      	orrs	r7, r3
 800095c:	fa0e f401 	lsl.w	r4, lr, r1
 8000960:	fa20 f306 	lsr.w	r3, r0, r6
 8000964:	fa2e fe06 	lsr.w	lr, lr, r6
 8000968:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800096c:	4323      	orrs	r3, r4
 800096e:	fa00 f801 	lsl.w	r8, r0, r1
 8000972:	fa1f fc87 	uxth.w	ip, r7
 8000976:	fbbe f0f9 	udiv	r0, lr, r9
 800097a:	0c1c      	lsrs	r4, r3, #16
 800097c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000980:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000984:	fb00 fe0c 	mul.w	lr, r0, ip
 8000988:	45a6      	cmp	lr, r4
 800098a:	fa02 f201 	lsl.w	r2, r2, r1
 800098e:	d909      	bls.n	80009a4 <__udivmoddi4+0x1a0>
 8000990:	193c      	adds	r4, r7, r4
 8000992:	f100 3aff 	add.w	sl, r0, #4294967295
 8000996:	f080 809c 	bcs.w	8000ad2 <__udivmoddi4+0x2ce>
 800099a:	45a6      	cmp	lr, r4
 800099c:	f240 8099 	bls.w	8000ad2 <__udivmoddi4+0x2ce>
 80009a0:	3802      	subs	r0, #2
 80009a2:	443c      	add	r4, r7
 80009a4:	eba4 040e 	sub.w	r4, r4, lr
 80009a8:	fa1f fe83 	uxth.w	lr, r3
 80009ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80009b0:	fb09 4413 	mls	r4, r9, r3, r4
 80009b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80009b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80009bc:	45a4      	cmp	ip, r4
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x1ce>
 80009c0:	193c      	adds	r4, r7, r4
 80009c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80009c6:	f080 8082 	bcs.w	8000ace <__udivmoddi4+0x2ca>
 80009ca:	45a4      	cmp	ip, r4
 80009cc:	d97f      	bls.n	8000ace <__udivmoddi4+0x2ca>
 80009ce:	3b02      	subs	r3, #2
 80009d0:	443c      	add	r4, r7
 80009d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009d6:	eba4 040c 	sub.w	r4, r4, ip
 80009da:	fba0 ec02 	umull	lr, ip, r0, r2
 80009de:	4564      	cmp	r4, ip
 80009e0:	4673      	mov	r3, lr
 80009e2:	46e1      	mov	r9, ip
 80009e4:	d362      	bcc.n	8000aac <__udivmoddi4+0x2a8>
 80009e6:	d05f      	beq.n	8000aa8 <__udivmoddi4+0x2a4>
 80009e8:	b15d      	cbz	r5, 8000a02 <__udivmoddi4+0x1fe>
 80009ea:	ebb8 0203 	subs.w	r2, r8, r3
 80009ee:	eb64 0409 	sbc.w	r4, r4, r9
 80009f2:	fa04 f606 	lsl.w	r6, r4, r6
 80009f6:	fa22 f301 	lsr.w	r3, r2, r1
 80009fa:	431e      	orrs	r6, r3
 80009fc:	40cc      	lsrs	r4, r1
 80009fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000a02:	2100      	movs	r1, #0
 8000a04:	e74f      	b.n	80008a6 <__udivmoddi4+0xa2>
 8000a06:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a0a:	0c01      	lsrs	r1, r0, #16
 8000a0c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a10:	b280      	uxth	r0, r0
 8000a12:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a16:	463b      	mov	r3, r7
 8000a18:	4638      	mov	r0, r7
 8000a1a:	463c      	mov	r4, r7
 8000a1c:	46b8      	mov	r8, r7
 8000a1e:	46be      	mov	lr, r7
 8000a20:	2620      	movs	r6, #32
 8000a22:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a26:	eba2 0208 	sub.w	r2, r2, r8
 8000a2a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a2e:	e766      	b.n	80008fe <__udivmoddi4+0xfa>
 8000a30:	4601      	mov	r1, r0
 8000a32:	e718      	b.n	8000866 <__udivmoddi4+0x62>
 8000a34:	4610      	mov	r0, r2
 8000a36:	e72c      	b.n	8000892 <__udivmoddi4+0x8e>
 8000a38:	f1c6 0220 	rsb	r2, r6, #32
 8000a3c:	fa2e f302 	lsr.w	r3, lr, r2
 8000a40:	40b7      	lsls	r7, r6
 8000a42:	40b1      	lsls	r1, r6
 8000a44:	fa20 f202 	lsr.w	r2, r0, r2
 8000a48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a52:	b2bc      	uxth	r4, r7
 8000a54:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a58:	0c11      	lsrs	r1, r2, #16
 8000a5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a5e:	fb08 f904 	mul.w	r9, r8, r4
 8000a62:	40b0      	lsls	r0, r6
 8000a64:	4589      	cmp	r9, r1
 8000a66:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a6a:	b280      	uxth	r0, r0
 8000a6c:	d93e      	bls.n	8000aec <__udivmoddi4+0x2e8>
 8000a6e:	1879      	adds	r1, r7, r1
 8000a70:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a74:	d201      	bcs.n	8000a7a <__udivmoddi4+0x276>
 8000a76:	4589      	cmp	r9, r1
 8000a78:	d81f      	bhi.n	8000aba <__udivmoddi4+0x2b6>
 8000a7a:	eba1 0109 	sub.w	r1, r1, r9
 8000a7e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a82:	fb09 f804 	mul.w	r8, r9, r4
 8000a86:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a8a:	b292      	uxth	r2, r2
 8000a8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a90:	4542      	cmp	r2, r8
 8000a92:	d229      	bcs.n	8000ae8 <__udivmoddi4+0x2e4>
 8000a94:	18ba      	adds	r2, r7, r2
 8000a96:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a9a:	d2c4      	bcs.n	8000a26 <__udivmoddi4+0x222>
 8000a9c:	4542      	cmp	r2, r8
 8000a9e:	d2c2      	bcs.n	8000a26 <__udivmoddi4+0x222>
 8000aa0:	f1a9 0102 	sub.w	r1, r9, #2
 8000aa4:	443a      	add	r2, r7
 8000aa6:	e7be      	b.n	8000a26 <__udivmoddi4+0x222>
 8000aa8:	45f0      	cmp	r8, lr
 8000aaa:	d29d      	bcs.n	80009e8 <__udivmoddi4+0x1e4>
 8000aac:	ebbe 0302 	subs.w	r3, lr, r2
 8000ab0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ab4:	3801      	subs	r0, #1
 8000ab6:	46e1      	mov	r9, ip
 8000ab8:	e796      	b.n	80009e8 <__udivmoddi4+0x1e4>
 8000aba:	eba7 0909 	sub.w	r9, r7, r9
 8000abe:	4449      	add	r1, r9
 8000ac0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ac4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ac8:	fb09 f804 	mul.w	r8, r9, r4
 8000acc:	e7db      	b.n	8000a86 <__udivmoddi4+0x282>
 8000ace:	4673      	mov	r3, lr
 8000ad0:	e77f      	b.n	80009d2 <__udivmoddi4+0x1ce>
 8000ad2:	4650      	mov	r0, sl
 8000ad4:	e766      	b.n	80009a4 <__udivmoddi4+0x1a0>
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	e6fd      	b.n	80008d6 <__udivmoddi4+0xd2>
 8000ada:	443b      	add	r3, r7
 8000adc:	3a02      	subs	r2, #2
 8000ade:	e733      	b.n	8000948 <__udivmoddi4+0x144>
 8000ae0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ae4:	443b      	add	r3, r7
 8000ae6:	e71c      	b.n	8000922 <__udivmoddi4+0x11e>
 8000ae8:	4649      	mov	r1, r9
 8000aea:	e79c      	b.n	8000a26 <__udivmoddi4+0x222>
 8000aec:	eba1 0109 	sub.w	r1, r1, r9
 8000af0:	46c4      	mov	ip, r8
 8000af2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000af6:	fb09 f804 	mul.w	r8, r9, r4
 8000afa:	e7c4      	b.n	8000a86 <__udivmoddi4+0x282>

08000afc <__aeabi_idiv0>:
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	LoadSettings();
 8000b04:	f000 f9e8 	bl	8000ed8 <LoadSettings>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b08:	f000 fd06 	bl	8001518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0c:	f000 f846 	bl	8000b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b10:	f000 f97c 	bl	8000e0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b14:	f000 f94a 	bl	8000dac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b18:	f000 f892 	bl	8000c40 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000b1c:	f000 f906 	bl	8000d2c <MX_I2C1_Init>
    /* USER CODE BEGIN 3 */

	  // Let green LED BLINK
	  static uint32_t lastBlink;
	  static uint8_t toggle;
	  if(HAL_GetTick() - lastBlink >= 500){	// once every Second
 8000b20:	f000 fd6a 	bl	80015f8 <HAL_GetTick>
 8000b24:	4602      	mov	r2, r0
 8000b26:	4b19      	ldr	r3, [pc, #100]	@ (8000b8c <main+0x8c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000b30:	d316      	bcc.n	8000b60 <main+0x60>
		  lastBlink = HAL_GetTick();
 8000b32:	f000 fd61 	bl	80015f8 <HAL_GetTick>
 8000b36:	4603      	mov	r3, r0
 8000b38:	4a14      	ldr	r2, [pc, #80]	@ (8000b8c <main+0x8c>)
 8000b3a:	6013      	str	r3, [r2, #0]
		  toggle = !toggle;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <main+0x90>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	bf0c      	ite	eq
 8000b44:	2301      	moveq	r3, #1
 8000b46:	2300      	movne	r3, #0
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <main+0x90>)
 8000b4e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, toggle);
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <main+0x90>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	461a      	mov	r2, r3
 8000b56:	2120      	movs	r1, #32
 8000b58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b5c:	f002 fa0a 	bl	8002f74 <HAL_GPIO_WritePin>
	  }

	  // Read analog voltage at A0
	  static uint32_t lastAdcRead;
	  if(HAL_GetTick() - lastAdcRead >= BATTERY_UPDATE_TIME){		// once every Second
 8000b60:	f000 fd4a 	bl	80015f8 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <main+0x94>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b70:	d3d6      	bcc.n	8000b20 <main+0x20>
		  lastAdcRead = HAL_GetTick();
 8000b72:	f000 fd41 	bl	80015f8 <HAL_GetTick>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4a06      	ldr	r2, [pc, #24]	@ (8000b94 <main+0x94>)
 8000b7a:	6013      	str	r3, [r2, #0]
		  ReadVoltage(&Battery);
 8000b7c:	4806      	ldr	r0, [pc, #24]	@ (8000b98 <main+0x98>)
 8000b7e:	f000 fa03 	bl	8000f88 <ReadVoltage>
		  CalcBatteryPercent(&Battery);
 8000b82:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <main+0x98>)
 8000b84:	f000 fa3c 	bl	8001000 <CalcBatteryPercent>
  {
 8000b88:	e7ca      	b.n	8000b20 <main+0x20>
 8000b8a:	bf00      	nop
 8000b8c:	200001c4 	.word	0x200001c4
 8000b90:	200001c8 	.word	0x200001c8
 8000b94:	200001cc 	.word	0x200001cc
 8000b98:	200001a8 	.word	0x200001a8

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b096      	sub	sp, #88	@ 0x58
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	2244      	movs	r2, #68	@ 0x44
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f004 fb6d 	bl	800528a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bbe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bc2:	f002 fb2f 	bl	8003224 <HAL_PWREx_ControlVoltageScaling>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bcc:	f000 faec 	bl	80011a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bd8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bda:	2310      	movs	r3, #16
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bde:	2302      	movs	r3, #2
 8000be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000be2:	2302      	movs	r3, #2
 8000be4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000bea:	230a      	movs	r3, #10
 8000bec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f002 fb66 	bl	80032d0 <HAL_RCC_OscConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c0a:	f000 facd 	bl	80011a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0e:	230f      	movs	r3, #15
 8000c10:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c12:	2303      	movs	r3, #3
 8000c14:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c22:	463b      	mov	r3, r7
 8000c24:	2104      	movs	r1, #4
 8000c26:	4618      	mov	r0, r3
 8000c28:	f002 ff2e 	bl	8003a88 <HAL_RCC_ClockConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c32:	f000 fab9 	bl	80011a8 <Error_Handler>
  }
}
 8000c36:	bf00      	nop
 8000c38:	3758      	adds	r7, #88	@ 0x58
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c62:	4b2f      	ldr	r3, [pc, #188]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000c64:	4a2f      	ldr	r2, [pc, #188]	@ (8000d24 <MX_ADC1_Init+0xe4>)
 8000c66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c68:	4b2d      	ldr	r3, [pc, #180]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c74:	4b2a      	ldr	r3, [pc, #168]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c7a:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c80:	4b27      	ldr	r3, [pc, #156]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000c82:	2204      	movs	r2, #4
 8000c84:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c86:	4b26      	ldr	r3, [pc, #152]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c8c:	4b24      	ldr	r3, [pc, #144]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c92:	4b23      	ldr	r3, [pc, #140]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c98:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc2:	4817      	ldr	r0, [pc, #92]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000cc4:	f000 fe88 	bl	80019d8 <HAL_ADC_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000cce:	f000 fa6b 	bl	80011a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4810      	ldr	r0, [pc, #64]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000cde:	f001 fe09 	bl	80028f4 <HAL_ADCEx_MultiModeConfigChannel>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ce8:	f000 fa5e 	bl	80011a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cec:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <MX_ADC1_Init+0xe8>)
 8000cee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cf0:	2306      	movs	r3, #6
 8000cf2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cf8:	237f      	movs	r3, #127	@ 0x7f
 8000cfa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <MX_ADC1_Init+0xe0>)
 8000d0a:	f001 f955 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000d14:	f000 fa48 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	@ 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000028 	.word	0x20000028
 8000d24:	50040000 	.word	0x50040000
 8000d28:	14f00020 	.word	0x14f00020

08000d2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d30:	4b1b      	ldr	r3, [pc, #108]	@ (8000da0 <MX_I2C1_Init+0x74>)
 8000d32:	4a1c      	ldr	r2, [pc, #112]	@ (8000da4 <MX_I2C1_Init+0x78>)
 8000d34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <MX_I2C1_Init+0x74>)
 8000d38:	4a1b      	ldr	r2, [pc, #108]	@ (8000da8 <MX_I2C1_Init+0x7c>)
 8000d3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <MX_I2C1_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d42:	4b17      	ldr	r3, [pc, #92]	@ (8000da0 <MX_I2C1_Init+0x74>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d48:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <MX_I2C1_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <MX_I2C1_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d54:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <MX_I2C1_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <MX_I2C1_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <MX_I2C1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d66:	480e      	ldr	r0, [pc, #56]	@ (8000da0 <MX_I2C1_Init+0x74>)
 8000d68:	f002 f91c 	bl	8002fa4 <HAL_I2C_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d72:	f000 fa19 	bl	80011a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d76:	2100      	movs	r1, #0
 8000d78:	4809      	ldr	r0, [pc, #36]	@ (8000da0 <MX_I2C1_Init+0x74>)
 8000d7a:	f002 f9ae 	bl	80030da <HAL_I2CEx_ConfigAnalogFilter>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d84:	f000 fa10 	bl	80011a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_I2C1_Init+0x74>)
 8000d8c:	f002 f9f0 	bl	8003170 <HAL_I2CEx_ConfigDigitalFilter>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d96:	f000 fa07 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000008c 	.word	0x2000008c
 8000da4:	40005400 	.word	0x40005400
 8000da8:	10d19ce4 	.word	0x10d19ce4

08000dac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db0:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <MX_USART2_UART_Init+0x58>)
 8000db2:	4a15      	ldr	r2, [pc, #84]	@ (8000e08 <MX_USART2_UART_Init+0x5c>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000db6:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <MX_USART2_UART_Init+0x58>)
 8000db8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <MX_USART2_UART_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	@ (8000e04 <MX_USART2_UART_Init+0x58>)
 8000df0:	f003 fd2a 	bl	8004848 <HAL_UART_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dfa:	f000 f9d5 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200000e0 	.word	0x200000e0
 8000e08:	40004400 	.word	0x40004400

08000e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	@ 0x28
 8000e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed0 <MX_GPIO_Init+0xc4>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	4a2a      	ldr	r2, [pc, #168]	@ (8000ed0 <MX_GPIO_Init+0xc4>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e2e:	4b28      	ldr	r3, [pc, #160]	@ (8000ed0 <MX_GPIO_Init+0xc4>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3a:	4b25      	ldr	r3, [pc, #148]	@ (8000ed0 <MX_GPIO_Init+0xc4>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3e:	4a24      	ldr	r2, [pc, #144]	@ (8000ed0 <MX_GPIO_Init+0xc4>)
 8000e40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e46:	4b22      	ldr	r3, [pc, #136]	@ (8000ed0 <MX_GPIO_Init+0xc4>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed0 <MX_GPIO_Init+0xc4>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	4a1e      	ldr	r2, [pc, #120]	@ (8000ed0 <MX_GPIO_Init+0xc4>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <MX_GPIO_Init+0xc4>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ed0 <MX_GPIO_Init+0xc4>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6e:	4a18      	ldr	r2, [pc, #96]	@ (8000ed0 <MX_GPIO_Init+0xc4>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e76:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <MX_GPIO_Init+0xc4>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2120      	movs	r1, #32
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e8a:	f002 f873 	bl	8002f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e94:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480b      	ldr	r0, [pc, #44]	@ (8000ed4 <MX_GPIO_Init+0xc8>)
 8000ea6:	f001 febb 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000eaa:	2320      	movs	r3, #32
 8000eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec4:	f001 feac 	bl	8002c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ec8:	bf00      	nop
 8000eca:	3728      	adds	r7, #40	@ 0x28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	48000800 	.word	0x48000800

08000ed8 <LoadSettings>:

/* USER CODE BEGIN 4 */

void LoadSettings(void){
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
	// Fill all the values from Settings.h to all structs
	Beeper.climb_threshold = 		CLIMB_THRESHOLD;
 8000edc:	4b20      	ldr	r3, [pc, #128]	@ (8000f60 <LoadSettings+0x88>)
 8000ede:	4a21      	ldr	r2, [pc, #132]	@ (8000f64 <LoadSettings+0x8c>)
 8000ee0:	601a      	str	r2, [r3, #0]
	Beeper.near_climb_threshold = 	NEAR_CLIMB_THRESHOLD;
 8000ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f60 <LoadSettings+0x88>)
 8000ee4:	4a20      	ldr	r2, [pc, #128]	@ (8000f68 <LoadSettings+0x90>)
 8000ee6:	605a      	str	r2, [r3, #4]
	Beeper.sink_threshold = 		SINK_THRESHOLD;
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f60 <LoadSettings+0x88>)
 8000eea:	4a20      	ldr	r2, [pc, #128]	@ (8000f6c <LoadSettings+0x94>)
 8000eec:	609a      	str	r2, [r3, #8]
	Beeper.climb_beeps_start = 		CLIMB_BEEPS_AT_THRESHOLD;
 8000eee:	4b1c      	ldr	r3, [pc, #112]	@ (8000f60 <LoadSettings+0x88>)
 8000ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8000f70 <LoadSettings+0x98>)
 8000ef2:	60da      	str	r2, [r3, #12]
	Beeper.climb_beeps_stop = 		CLIMB_BEEPS_AT_MAX_VARIO;
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <LoadSettings+0x88>)
 8000ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f74 <LoadSettings+0x9c>)
 8000ef8:	611a      	str	r2, [r3, #16]
	Beeper.start_f_climb = 			CLIMB_FREQUENCY_AT_THERSHOLD;
 8000efa:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <LoadSettings+0x88>)
 8000efc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000f00:	615a      	str	r2, [r3, #20]
	Beeper.stop_f_climb = 			CLIMB_FREQUENCY_AT_MAX_VARIO;
 8000f02:	4b17      	ldr	r3, [pc, #92]	@ (8000f60 <LoadSettings+0x88>)
 8000f04:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8000f08:	619a      	str	r2, [r3, #24]
	Beeper.start_f_sink = 			SINK_FREQUENCY_AT_THERSHOLD;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <LoadSettings+0x88>)
 8000f0c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f10:	61da      	str	r2, [r3, #28]
	Beeper.stop_f_sink = 			SINK_FREQUENCY_AT_MIN_VARIO;
 8000f12:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <LoadSettings+0x88>)
 8000f14:	22c8      	movs	r2, #200	@ 0xc8
 8000f16:	621a      	str	r2, [r3, #32]
	Beeper.min_peep_time_start = 	MIN_PEEP_TIME_AT_THRESHOLD;
 8000f18:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <LoadSettings+0x88>)
 8000f1a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000f1e:	625a      	str	r2, [r3, #36]	@ 0x24
	Beeper.min_peep_time_stop = 	MIN_PEEP_TIME_AT_MAX_VARIO;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <LoadSettings+0x88>)
 8000f22:	2296      	movs	r2, #150	@ 0x96
 8000f24:	629a      	str	r2, [r3, #40]	@ 0x28

	Battery.voltAt0Percent = 		BAT_0;
 8000f26:	4b14      	ldr	r3, [pc, #80]	@ (8000f78 <LoadSettings+0xa0>)
 8000f28:	f640 4208 	movw	r2, #3080	@ 0xc08
 8000f2c:	609a      	str	r2, [r3, #8]
	Battery.voltAt5Percent = 		BAT_5;
 8000f2e:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <LoadSettings+0xa0>)
 8000f30:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8000f34:	60da      	str	r2, [r3, #12]
	Battery.voltAt20Percent = 		BAT_20;
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <LoadSettings+0xa0>)
 8000f38:	f640 629c 	movw	r2, #3740	@ 0xe9c
 8000f3c:	611a      	str	r2, [r3, #16]
	Battery.voltAt75Percent = 		BAT_75;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <LoadSettings+0xa0>)
 8000f40:	f640 7296 	movw	r2, #3990	@ 0xf96
 8000f44:	615a      	str	r2, [r3, #20]
	Battery.voltAt100Percent = 		BAT_100;
 8000f46:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <LoadSettings+0xa0>)
 8000f48:	f241 0204 	movw	r2, #4100	@ 0x1004
 8000f4c:	619a      	str	r2, [r3, #24]

	Baro.preassureSealevel = 		PRASSURE_AT_SEALEVEL;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <LoadSettings+0xa4>)
 8000f50:	4a0b      	ldr	r2, [pc, #44]	@ (8000f80 <LoadSettings+0xa8>)
 8000f52:	60da      	str	r2, [r3, #12]

}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000168 	.word	0x20000168
 8000f64:	3e99999a 	.word	0x3e99999a
 8000f68:	3dcccccd 	.word	0x3dcccccd
 8000f6c:	c0400000 	.word	0xc0400000
 8000f70:	3fd9999a 	.word	0x3fd9999a
 8000f74:	40d66666 	.word	0x40d66666
 8000f78:	200001a8 	.word	0x200001a8
 8000f7c:	20000198 	.word	0x20000198
 8000f80:	447fc000 	.word	0x447fc000
 8000f84:	00000000 	.word	0x00000000

08000f88 <ReadVoltage>:

void ReadVoltage(Battery_t *tmpBat){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8000f90:	4819      	ldr	r0, [pc, #100]	@ (8000ff8 <ReadVoltage+0x70>)
 8000f92:	f000 fe71 	bl	8001c78 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);						// 1 ms Timeout
 8000f96:	2101      	movs	r1, #1
 8000f98:	4817      	ldr	r0, [pc, #92]	@ (8000ff8 <ReadVoltage+0x70>)
 8000f9a:	f000 ff27 	bl	8001dec <HAL_ADC_PollForConversion>
	uint32_t ADC_value = HAL_ADC_GetValue(&hadc1) * ADC_MULTI;
 8000f9e:	4816      	ldr	r0, [pc, #88]	@ (8000ff8 <ReadVoltage+0x70>)
 8000fa0:	f000 fffc 	bl	8001f9c <HAL_ADC_GetValue>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fb7a 	bl	80006a0 <__aeabi_ui2d>
 8000fac:	a310      	add	r3, pc, #64	@ (adr r3, 8000ff0 <ReadVoltage+0x68>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	f7ff f909 	bl	80001c8 <__aeabi_dmul>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fbe9 	bl	8000794 <__aeabi_d2uiz>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	60fb      	str	r3, [r7, #12]
	uint32_t voltage = ((float)ADC_value*(float)RES_RATIO);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fd0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000ffc <ReadVoltage+0x74>
 8000fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fdc:	ee17 3a90 	vmov	r3, s15
 8000fe0:	60bb      	str	r3, [r7, #8]

	//printf("ADC value: %li\n",ADC_value);
	//printf("voltage: %li\n",voltage);

	tmpBat->voltage = voltage;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68ba      	ldr	r2, [r7, #8]
 8000fe6:	601a      	str	r2, [r3, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	205bc01a 	.word	0x205bc01a
 8000ff4:	3fedf141 	.word	0x3fedf141
 8000ff8:	20000028 	.word	0x20000028
 8000ffc:	40bb1757 	.word	0x40bb1757

08001000 <CalcBatteryPercent>:

void CalcBatteryPercent(Battery_t *tmpBat){
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	@ 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	float x0, y0, x1, y1, yp;
	//Handle Error
	if(tmpBat->voltage < tmpBat->voltAt0Percent){
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	429a      	cmp	r2, r3
 8001012:	d203      	bcs.n	800101c <CalcBatteryPercent+0x1c>
		tmpBat->percent = 0;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	711a      	strb	r2, [r3, #4]
		return;
 800101a:	e0b7      	b.n	800118c <CalcBatteryPercent+0x18c>
	}
	if(tmpBat->voltage > tmpBat->voltAt100Percent){
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	429a      	cmp	r2, r3
 8001026:	d903      	bls.n	8001030 <CalcBatteryPercent+0x30>
		tmpBat->percent = 100;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2264      	movs	r2, #100	@ 0x64
 800102c:	711a      	strb	r2, [r3, #4]
		return;
 800102e:	e0ad      	b.n	800118c <CalcBatteryPercent+0x18c>
	}

	if(tmpBat->voltage >= tmpBat->voltAt0Percent && tmpBat->voltage < tmpBat->voltAt5Percent){
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	429a      	cmp	r2, r3
 800103a:	d31b      	bcc.n	8001074 <CalcBatteryPercent+0x74>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d215      	bcs.n	8001074 <CalcBatteryPercent+0x74>
		x0=tmpBat->voltAt0Percent;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001054:	edc7 7a07 	vstr	s15, [r7, #28]
		y0=0;
 8001058:	f04f 0300 	mov.w	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
		x1=tmpBat->voltAt5Percent;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800106a:	edc7 7a05 	vstr	s15, [r7, #20]
		y1=5;
 800106e:	4b4a      	ldr	r3, [pc, #296]	@ (8001198 <CalcBatteryPercent+0x198>)
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	e061      	b.n	8001138 <CalcBatteryPercent+0x138>
	}else if(tmpBat->voltage >= tmpBat->voltAt5Percent && tmpBat->voltage < tmpBat->voltAt20Percent){
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	429a      	cmp	r2, r3
 800107e:	d31a      	bcc.n	80010b6 <CalcBatteryPercent+0xb6>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	429a      	cmp	r2, r3
 800108a:	d214      	bcs.n	80010b6 <CalcBatteryPercent+0xb6>
		x0=tmpBat->voltAt5Percent;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001098:	edc7 7a07 	vstr	s15, [r7, #28]
		y0=5;
 800109c:	4b3e      	ldr	r3, [pc, #248]	@ (8001198 <CalcBatteryPercent+0x198>)
 800109e:	61bb      	str	r3, [r7, #24]
		x1=tmpBat->voltAt20Percent;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	ee07 3a90 	vmov	s15, r3
 80010a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ac:	edc7 7a05 	vstr	s15, [r7, #20]
		y1=20;
 80010b0:	4b3a      	ldr	r3, [pc, #232]	@ (800119c <CalcBatteryPercent+0x19c>)
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	e040      	b.n	8001138 <CalcBatteryPercent+0x138>
	}else if(tmpBat->voltage >= tmpBat->voltAt20Percent && tmpBat->voltage < tmpBat->voltAt75Percent){
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d31a      	bcc.n	80010f8 <CalcBatteryPercent+0xf8>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d214      	bcs.n	80010f8 <CalcBatteryPercent+0xf8>
		x0=tmpBat->voltAt20Percent;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010da:	edc7 7a07 	vstr	s15, [r7, #28]
		y0=20;
 80010de:	4b2f      	ldr	r3, [pc, #188]	@ (800119c <CalcBatteryPercent+0x19c>)
 80010e0:	61bb      	str	r3, [r7, #24]
		x1=tmpBat->voltAt75Percent;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ee:	edc7 7a05 	vstr	s15, [r7, #20]
		y1=75;
 80010f2:	4b2b      	ldr	r3, [pc, #172]	@ (80011a0 <CalcBatteryPercent+0x1a0>)
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	e01f      	b.n	8001138 <CalcBatteryPercent+0x138>
	}else if(tmpBat->voltage >= tmpBat->voltAt75Percent && tmpBat->voltage <= tmpBat->voltAt100Percent){
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	429a      	cmp	r2, r3
 8001102:	d319      	bcc.n	8001138 <CalcBatteryPercent+0x138>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	429a      	cmp	r2, r3
 800110e:	d813      	bhi.n	8001138 <CalcBatteryPercent+0x138>
		x0=tmpBat->voltAt75Percent;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800111c:	edc7 7a07 	vstr	s15, [r7, #28]
		y0=75;
 8001120:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <CalcBatteryPercent+0x1a0>)
 8001122:	61bb      	str	r3, [r7, #24]
		x1=tmpBat->voltAt100Percent;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001130:	edc7 7a05 	vstr	s15, [r7, #20]
		y1=100;
 8001134:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <CalcBatteryPercent+0x1a4>)
 8001136:	613b      	str	r3, [r7, #16]
	}

	yp = y0 + ((y1-y0)/(x1-x0)) * (tmpBat->voltage - x0);
 8001138:	ed97 7a04 	vldr	s14, [r7, #16]
 800113c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001140:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001144:	ed97 7a05 	vldr	s14, [r7, #20]
 8001148:	edd7 7a07 	vldr	s15, [r7, #28]
 800114c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001160:	edd7 7a07 	vldr	s15, [r7, #28]
 8001164:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800116c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001174:	edc7 7a03 	vstr	s15, [r7, #12]
	//return (uint8_t)yp;
	tmpBat->percent = (uint8_t)yp;
 8001178:	edd7 7a03 	vldr	s15, [r7, #12]
 800117c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001180:	edc7 7a00 	vstr	s15, [r7]
 8001184:	783b      	ldrb	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	711a      	strb	r2, [r3, #4]
}
 800118c:	3724      	adds	r7, #36	@ 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40a00000 	.word	0x40a00000
 800119c:	41a00000 	.word	0x41a00000
 80011a0:	42960000 	.word	0x42960000
 80011a4:	42c80000 	.word	0x42c80000

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <Error_Handler+0x8>

080011b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <HAL_MspInit+0x44>)
 80011bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011be:	4a0e      	ldr	r2, [pc, #56]	@ (80011f8 <HAL_MspInit+0x44>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80011c6:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <HAL_MspInit+0x44>)
 80011c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <HAL_MspInit+0x44>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d6:	4a08      	ldr	r2, [pc, #32]	@ (80011f8 <HAL_MspInit+0x44>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011de:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <HAL_MspInit+0x44>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000

080011fc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b0ac      	sub	sp, #176	@ 0xb0
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2288      	movs	r2, #136	@ 0x88
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f004 f834 	bl	800528a <memset>
  if(hadc->Instance==ADC1)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a27      	ldr	r2, [pc, #156]	@ (80012c4 <HAL_ADC_MspInit+0xc8>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d147      	bne.n	80012bc <HAL_ADC_MspInit+0xc0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800122c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001230:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001232:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001236:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800123a:	2302      	movs	r3, #2
 800123c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800123e:	2301      	movs	r3, #1
 8001240:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001242:	2308      	movs	r3, #8
 8001244:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001246:	2307      	movs	r3, #7
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800124a:	2302      	movs	r3, #2
 800124c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800124e:	2302      	movs	r3, #2
 8001250:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001252:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001256:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4618      	mov	r0, r3
 800125e:	f002 fe37 	bl	8003ed0 <HAL_RCCEx_PeriphCLKConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001268:	f7ff ff9e 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800126c:	4b16      	ldr	r3, [pc, #88]	@ (80012c8 <HAL_ADC_MspInit+0xcc>)
 800126e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001270:	4a15      	ldr	r2, [pc, #84]	@ (80012c8 <HAL_ADC_MspInit+0xcc>)
 8001272:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001276:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001278:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <HAL_ADC_MspInit+0xcc>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <HAL_ADC_MspInit+0xcc>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	4a0f      	ldr	r2, [pc, #60]	@ (80012c8 <HAL_ADC_MspInit+0xcc>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001290:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <HAL_ADC_MspInit+0xcc>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Analog_IN_A0_ADC1_IN5_Pin;
 800129c:	2301      	movs	r3, #1
 800129e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80012a2:	230b      	movs	r3, #11
 80012a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(Analog_IN_A0_ADC1_IN5_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012b2:	4619      	mov	r1, r3
 80012b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b8:	f001 fcb2 	bl	8002c20 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012bc:	bf00      	nop
 80012be:	37b0      	adds	r7, #176	@ 0xb0
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	50040000 	.word	0x50040000
 80012c8:	40021000 	.word	0x40021000

080012cc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0ac      	sub	sp, #176	@ 0xb0
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2288      	movs	r2, #136	@ 0x88
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 ffcc 	bl	800528a <memset>
  if(hi2c->Instance==I2C1)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a21      	ldr	r2, [pc, #132]	@ (800137c <HAL_I2C_MspInit+0xb0>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d13b      	bne.n	8001374 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012fc:	2340      	movs	r3, #64	@ 0x40
 80012fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001300:	2300      	movs	r3, #0
 8001302:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4618      	mov	r0, r3
 800130a:	f002 fde1 	bl	8003ed0 <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001314:	f7ff ff48 	bl	80011a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <HAL_I2C_MspInit+0xb4>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131c:	4a18      	ldr	r2, [pc, #96]	@ (8001380 <HAL_I2C_MspInit+0xb4>)
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001324:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <HAL_I2C_MspInit+0xb4>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001330:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001334:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001338:	2312      	movs	r3, #18
 800133a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800134a:	2304      	movs	r3, #4
 800134c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001354:	4619      	mov	r1, r3
 8001356:	480b      	ldr	r0, [pc, #44]	@ (8001384 <HAL_I2C_MspInit+0xb8>)
 8001358:	f001 fc62 	bl	8002c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800135c:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <HAL_I2C_MspInit+0xb4>)
 800135e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001360:	4a07      	ldr	r2, [pc, #28]	@ (8001380 <HAL_I2C_MspInit+0xb4>)
 8001362:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001366:	6593      	str	r3, [r2, #88]	@ 0x58
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <HAL_I2C_MspInit+0xb4>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001374:	bf00      	nop
 8001376:	37b0      	adds	r7, #176	@ 0xb0
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40005400 	.word	0x40005400
 8001380:	40021000 	.word	0x40021000
 8001384:	48000400 	.word	0x48000400

08001388 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b0ac      	sub	sp, #176	@ 0xb0
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2288      	movs	r2, #136	@ 0x88
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f003 ff6e 	bl	800528a <memset>
  if(huart->Instance==USART2)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a21      	ldr	r2, [pc, #132]	@ (8001438 <HAL_UART_MspInit+0xb0>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d13b      	bne.n	8001430 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013b8:	2302      	movs	r3, #2
 80013ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013bc:	2300      	movs	r3, #0
 80013be:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4618      	mov	r0, r3
 80013c6:	f002 fd83 	bl	8003ed0 <HAL_RCCEx_PeriphCLKConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013d0:	f7ff feea 	bl	80011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d4:	4b19      	ldr	r3, [pc, #100]	@ (800143c <HAL_UART_MspInit+0xb4>)
 80013d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d8:	4a18      	ldr	r2, [pc, #96]	@ (800143c <HAL_UART_MspInit+0xb4>)
 80013da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013de:	6593      	str	r3, [r2, #88]	@ 0x58
 80013e0:	4b16      	ldr	r3, [pc, #88]	@ (800143c <HAL_UART_MspInit+0xb4>)
 80013e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <HAL_UART_MspInit+0xb4>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f0:	4a12      	ldr	r2, [pc, #72]	@ (800143c <HAL_UART_MspInit+0xb4>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f8:	4b10      	ldr	r3, [pc, #64]	@ (800143c <HAL_UART_MspInit+0xb4>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001404:	230c      	movs	r3, #12
 8001406:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001416:	2303      	movs	r3, #3
 8001418:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800141c:	2307      	movs	r3, #7
 800141e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001426:	4619      	mov	r1, r3
 8001428:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800142c:	f001 fbf8 	bl	8002c20 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001430:	bf00      	nop
 8001432:	37b0      	adds	r7, #176	@ 0xb0
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40004400 	.word	0x40004400
 800143c:	40021000 	.word	0x40021000

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <NMI_Handler+0x4>

08001448 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <MemManage_Handler+0x4>

08001458 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <UsageFault_Handler+0x4>

08001468 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001496:	f000 f89b 	bl	80015d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014a4:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <SystemInit+0x20>)
 80014a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014aa:	4a05      	ldr	r2, [pc, #20]	@ (80014c0 <SystemInit+0x20>)
 80014ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014c8:	f7ff ffea 	bl	80014a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014cc:	480c      	ldr	r0, [pc, #48]	@ (8001500 <LoopForever+0x6>)
  ldr r1, =_edata
 80014ce:	490d      	ldr	r1, [pc, #52]	@ (8001504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001508 <LoopForever+0xe>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d4:	e002      	b.n	80014dc <LoopCopyDataInit>

080014d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014da:	3304      	adds	r3, #4

080014dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e0:	d3f9      	bcc.n	80014d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e2:	4a0a      	ldr	r2, [pc, #40]	@ (800150c <LoopForever+0x12>)
  ldr r4, =_ebss
 80014e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001510 <LoopForever+0x16>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e8:	e001      	b.n	80014ee <LoopFillZerobss>

080014ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ec:	3204      	adds	r2, #4

080014ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f0:	d3fb      	bcc.n	80014ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014f2:	f003 fed3 	bl	800529c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014f6:	f7ff fb03 	bl	8000b00 <main>

080014fa <LoopForever>:

LoopForever:
    b LoopForever
 80014fa:	e7fe      	b.n	80014fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001504:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001508:	08005354 	.word	0x08005354
  ldr r2, =_sbss
 800150c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001510:	200001d4 	.word	0x200001d4

08001514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC1_2_IRQHandler>
	...

08001518 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001522:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <HAL_Init+0x3c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a0b      	ldr	r2, [pc, #44]	@ (8001554 <HAL_Init+0x3c>)
 8001528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800152c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152e:	2003      	movs	r0, #3
 8001530:	f001 fb42 	bl	8002bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001534:	2000      	movs	r0, #0
 8001536:	f000 f80f 	bl	8001558 <HAL_InitTick>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	71fb      	strb	r3, [r7, #7]
 8001544:	e001      	b.n	800154a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001546:	f7ff fe35 	bl	80011b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800154a:	79fb      	ldrb	r3, [r7, #7]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40022000 	.word	0x40022000

08001558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001564:	4b17      	ldr	r3, [pc, #92]	@ (80015c4 <HAL_InitTick+0x6c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d023      	beq.n	80015b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800156c:	4b16      	ldr	r3, [pc, #88]	@ (80015c8 <HAL_InitTick+0x70>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <HAL_InitTick+0x6c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800157a:	fbb3 f3f1 	udiv	r3, r3, r1
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f001 fb3f 	bl	8002c06 <HAL_SYSTICK_Config>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10f      	bne.n	80015ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b0f      	cmp	r3, #15
 8001592:	d809      	bhi.n	80015a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001594:	2200      	movs	r2, #0
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f001 fb17 	bl	8002bce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015a0:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <HAL_InitTick+0x74>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e007      	b.n	80015b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e004      	b.n	80015b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	e001      	b.n	80015b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000008 	.word	0x20000008
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000004 	.word	0x20000004

080015d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <HAL_IncTick+0x20>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	461a      	mov	r2, r3
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_IncTick+0x24>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	4a04      	ldr	r2, [pc, #16]	@ (80015f4 <HAL_IncTick+0x24>)
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000008 	.word	0x20000008
 80015f4:	200001d0 	.word	0x200001d0

080015f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return uwTick;
 80015fc:	4b03      	ldr	r3, [pc, #12]	@ (800160c <HAL_GetTick+0x14>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	200001d0 	.word	0x200001d0

08001610 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	609a      	str	r2, [r3, #8]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	609a      	str	r2, [r3, #8]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001678:	b480      	push	{r7}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
 8001684:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	3360      	adds	r3, #96	@ 0x60
 800168a:	461a      	mov	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <LL_ADC_SetOffset+0x44>)
 800169a:	4013      	ands	r3, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	4313      	orrs	r3, r2
 80016a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016b0:	bf00      	nop
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	03fff000 	.word	0x03fff000

080016c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3360      	adds	r3, #96	@ 0x60
 80016ce:	461a      	mov	r2, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3360      	adds	r3, #96	@ 0x60
 80016fc:	461a      	mov	r2, r3
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	431a      	orrs	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001716:	bf00      	nop
 8001718:	371c      	adds	r7, #28
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	3330      	adds	r3, #48	@ 0x30
 8001758:	461a      	mov	r2, r3
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	f003 030c 	and.w	r3, r3, #12
 8001764:	4413      	add	r3, r2
 8001766:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f003 031f 	and.w	r3, r3, #31
 8001772:	211f      	movs	r1, #31
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	401a      	ands	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	0e9b      	lsrs	r3, r3, #26
 8001780:	f003 011f 	and.w	r1, r3, #31
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f003 031f 	and.w	r3, r3, #31
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	431a      	orrs	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001794:	bf00      	nop
 8001796:	371c      	adds	r7, #28
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	3314      	adds	r3, #20
 80017b0:	461a      	mov	r2, r3
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	0e5b      	lsrs	r3, r3, #25
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	4413      	add	r3, r2
 80017be:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	0d1b      	lsrs	r3, r3, #20
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	2107      	movs	r1, #7
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	401a      	ands	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	0d1b      	lsrs	r3, r3, #20
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	431a      	orrs	r2, r3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017ea:	bf00      	nop
 80017ec:	371c      	adds	r7, #28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001810:	43db      	mvns	r3, r3
 8001812:	401a      	ands	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f003 0318 	and.w	r3, r3, #24
 800181a:	4908      	ldr	r1, [pc, #32]	@ (800183c <LL_ADC_SetChannelSingleDiff+0x44>)
 800181c:	40d9      	lsrs	r1, r3
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	400b      	ands	r3, r1
 8001822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001826:	431a      	orrs	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	0007ffff 	.word	0x0007ffff

08001840 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 031f 	and.w	r3, r3, #31
}
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001888:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6093      	str	r3, [r2, #8]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018b0:	d101      	bne.n	80018b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80018d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018d8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001900:	d101      	bne.n	8001906 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001924:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001928:	f043 0201 	orr.w	r2, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <LL_ADC_IsEnabled+0x18>
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <LL_ADC_IsEnabled+0x1a>
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001972:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001976:	f043 0204 	orr.w	r2, r3, #4
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	2b04      	cmp	r3, #4
 800199c:	d101      	bne.n	80019a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d101      	bne.n	80019c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b089      	sub	sp, #36	@ 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e130      	b.n	8001c54 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d109      	bne.n	8001a14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff fbfb 	bl	80011fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff3f 	bl	800189c <LL_ADC_IsDeepPowerDownEnabled>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff25 	bl	8001878 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ff5a 	bl	80018ec <LL_ADC_IsInternalRegulatorEnabled>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d115      	bne.n	8001a6a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff3e 	bl	80018c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a48:	4b84      	ldr	r3, [pc, #528]	@ (8001c5c <HAL_ADC_Init+0x284>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	4a84      	ldr	r2, [pc, #528]	@ (8001c60 <HAL_ADC_Init+0x288>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	099b      	lsrs	r3, r3, #6
 8001a56:	3301      	adds	r3, #1
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a5c:	e002      	b.n	8001a64 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f9      	bne.n	8001a5e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ff3c 	bl	80018ec <LL_ADC_IsInternalRegulatorEnabled>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10d      	bne.n	8001a96 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7e:	f043 0210 	orr.w	r2, r3, #16
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8a:	f043 0201 	orr.w	r2, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ff75 	bl	800198a <LL_ADC_REG_IsConversionOngoing>
 8001aa0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aa6:	f003 0310 	and.w	r3, r3, #16
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f040 80c9 	bne.w	8001c42 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f040 80c5 	bne.w	8001c42 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001abc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ac0:	f043 0202 	orr.w	r2, r3, #2
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff35 	bl	800193c <LL_ADC_IsEnabled>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d115      	bne.n	8001b04 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ad8:	4862      	ldr	r0, [pc, #392]	@ (8001c64 <HAL_ADC_Init+0x28c>)
 8001ada:	f7ff ff2f 	bl	800193c <LL_ADC_IsEnabled>
 8001ade:	4604      	mov	r4, r0
 8001ae0:	4861      	ldr	r0, [pc, #388]	@ (8001c68 <HAL_ADC_Init+0x290>)
 8001ae2:	f7ff ff2b 	bl	800193c <LL_ADC_IsEnabled>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	431c      	orrs	r4, r3
 8001aea:	4860      	ldr	r0, [pc, #384]	@ (8001c6c <HAL_ADC_Init+0x294>)
 8001aec:	f7ff ff26 	bl	800193c <LL_ADC_IsEnabled>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4323      	orrs	r3, r4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d105      	bne.n	8001b04 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4619      	mov	r1, r3
 8001afe:	485c      	ldr	r0, [pc, #368]	@ (8001c70 <HAL_ADC_Init+0x298>)
 8001b00:	f7ff fd86 	bl	8001610 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7e5b      	ldrb	r3, [r3, #25]
 8001b08:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b0e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001b14:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001b1a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b22:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d106      	bne.n	8001b40 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b36:	3b01      	subs	r3, #1
 8001b38:	045b      	lsls	r3, r3, #17
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d009      	beq.n	8001b5c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b54:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	4b44      	ldr	r3, [pc, #272]	@ (8001c74 <HAL_ADC_Init+0x29c>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	69b9      	ldr	r1, [r7, #24]
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff1b 	bl	80019b0 <LL_ADC_INJ_IsConversionOngoing>
 8001b7a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d13d      	bne.n	8001bfe <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d13a      	bne.n	8001bfe <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b8c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b94:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ba4:	f023 0302 	bic.w	r3, r3, #2
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	69b9      	ldr	r1, [r7, #24]
 8001bae:	430b      	orrs	r3, r1
 8001bb0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d118      	bne.n	8001bee <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001bc6:	f023 0304 	bic.w	r3, r3, #4
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bd2:	4311      	orrs	r1, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001bd8:	4311      	orrs	r1, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001bde:	430a      	orrs	r2, r1
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	611a      	str	r2, [r3, #16]
 8001bec:	e007      	b.n	8001bfe <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0201 	bic.w	r2, r2, #1
 8001bfc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d10c      	bne.n	8001c20 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0c:	f023 010f 	bic.w	r1, r3, #15
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	1e5a      	subs	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c1e:	e007      	b.n	8001c30 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 020f 	bic.w	r2, r2, #15
 8001c2e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c34:	f023 0303 	bic.w	r3, r3, #3
 8001c38:	f043 0201 	orr.w	r2, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c40:	e007      	b.n	8001c52 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c46:	f043 0210 	orr.w	r2, r3, #16
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c52:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3724      	adds	r7, #36	@ 0x24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd90      	pop	{r4, r7, pc}
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	053e2d63 	.word	0x053e2d63
 8001c64:	50040000 	.word	0x50040000
 8001c68:	50040100 	.word	0x50040100
 8001c6c:	50040200 	.word	0x50040200
 8001c70:	50040300 	.word	0x50040300
 8001c74:	fff0c007 	.word	0xfff0c007

08001c78 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c80:	4857      	ldr	r0, [pc, #348]	@ (8001de0 <HAL_ADC_Start+0x168>)
 8001c82:	f7ff fddd 	bl	8001840 <LL_ADC_GetMultimode>
 8001c86:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fe7c 	bl	800198a <LL_ADC_REG_IsConversionOngoing>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f040 809c 	bne.w	8001dd2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ADC_Start+0x30>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e097      	b.n	8001dd8 <HAL_ADC_Start+0x160>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 fd73 	bl	800279c <ADC_Enable>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f040 8083 	bne.w	8001dc8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001cca:	f023 0301 	bic.w	r3, r3, #1
 8001cce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a42      	ldr	r2, [pc, #264]	@ (8001de4 <HAL_ADC_Start+0x16c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d002      	beq.n	8001ce6 <HAL_ADC_Start+0x6e>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	e000      	b.n	8001ce8 <HAL_ADC_Start+0x70>
 8001ce6:	4b40      	ldr	r3, [pc, #256]	@ (8001de8 <HAL_ADC_Start+0x170>)
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6812      	ldr	r2, [r2, #0]
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d002      	beq.n	8001cf6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d105      	bne.n	8001d02 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cfa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d0e:	d106      	bne.n	8001d1e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d14:	f023 0206 	bic.w	r2, r3, #6
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d1c:	e002      	b.n	8001d24 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	221c      	movs	r2, #28
 8001d2a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a2a      	ldr	r2, [pc, #168]	@ (8001de4 <HAL_ADC_Start+0x16c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d002      	beq.n	8001d44 <HAL_ADC_Start+0xcc>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	e000      	b.n	8001d46 <HAL_ADC_Start+0xce>
 8001d44:	4b28      	ldr	r3, [pc, #160]	@ (8001de8 <HAL_ADC_Start+0x170>)
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d008      	beq.n	8001d60 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d002      	beq.n	8001d60 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b09      	cmp	r3, #9
 8001d5e:	d114      	bne.n	8001d8a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d007      	beq.n	8001d7e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d72:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d76:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fded 	bl	8001962 <LL_ADC_REG_StartConversion>
 8001d88:	e025      	b.n	8001dd6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a12      	ldr	r2, [pc, #72]	@ (8001de4 <HAL_ADC_Start+0x16c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d002      	beq.n	8001da6 <HAL_ADC_Start+0x12e>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	e000      	b.n	8001da8 <HAL_ADC_Start+0x130>
 8001da6:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <HAL_ADC_Start+0x170>)
 8001da8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00f      	beq.n	8001dd6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001dbe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	655a      	str	r2, [r3, #84]	@ 0x54
 8001dc6:	e006      	b.n	8001dd6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001dd0:	e001      	b.n	8001dd6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	50040300 	.word	0x50040300
 8001de4:	50040100 	.word	0x50040100
 8001de8:	50040000 	.word	0x50040000

08001dec <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001df6:	4866      	ldr	r0, [pc, #408]	@ (8001f90 <HAL_ADC_PollForConversion+0x1a4>)
 8001df8:	f7ff fd22 	bl	8001840 <LL_ADC_GetMultimode>
 8001dfc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d102      	bne.n	8001e0c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001e06:	2308      	movs	r3, #8
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	e02a      	b.n	8001e62 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d002      	beq.n	8001e1e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2b09      	cmp	r3, #9
 8001e1c:	d111      	bne.n	8001e42 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d007      	beq.n	8001e3c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e30:	f043 0220 	orr.w	r2, r3, #32
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0a4      	b.n	8001f86 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e40:	e00f      	b.n	8001e62 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e42:	4853      	ldr	r0, [pc, #332]	@ (8001f90 <HAL_ADC_PollForConversion+0x1a4>)
 8001e44:	f7ff fd0a 	bl	800185c <LL_ADC_GetMultiDMATransfer>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e52:	f043 0220 	orr.w	r2, r3, #32
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e093      	b.n	8001f86 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e5e:	2304      	movs	r3, #4
 8001e60:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e62:	f7ff fbc9 	bl	80015f8 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e68:	e021      	b.n	8001eae <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d01d      	beq.n	8001eae <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001e72:	f7ff fbc1 	bl	80015f8 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d302      	bcc.n	8001e88 <HAL_ADC_PollForConversion+0x9c>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d112      	bne.n	8001eae <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10b      	bne.n	8001eae <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9a:	f043 0204 	orr.w	r2, r3, #4
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e06b      	b.n	8001f86 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0d6      	beq.n	8001e6a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fc28 	bl	8001722 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d01c      	beq.n	8001f12 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7e5b      	ldrb	r3, [r3, #25]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d118      	bne.n	8001f12 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d111      	bne.n	8001f12 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d105      	bne.n	8001f12 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0a:	f043 0201 	orr.w	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1f      	ldr	r2, [pc, #124]	@ (8001f94 <HAL_ADC_PollForConversion+0x1a8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d002      	beq.n	8001f22 <HAL_ADC_PollForConversion+0x136>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	e000      	b.n	8001f24 <HAL_ADC_PollForConversion+0x138>
 8001f22:	4b1d      	ldr	r3, [pc, #116]	@ (8001f98 <HAL_ADC_PollForConversion+0x1ac>)
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d008      	beq.n	8001f3e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d005      	beq.n	8001f3e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2b05      	cmp	r3, #5
 8001f36:	d002      	beq.n	8001f3e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b09      	cmp	r3, #9
 8001f3c:	d104      	bne.n	8001f48 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	e00c      	b.n	8001f62 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a11      	ldr	r2, [pc, #68]	@ (8001f94 <HAL_ADC_PollForConversion+0x1a8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d002      	beq.n	8001f58 <HAL_ADC_PollForConversion+0x16c>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	e000      	b.n	8001f5a <HAL_ADC_PollForConversion+0x16e>
 8001f58:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <HAL_ADC_PollForConversion+0x1ac>)
 8001f5a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d104      	bne.n	8001f72 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e008      	b.n	8001f84 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d103      	bne.n	8001f84 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	220c      	movs	r2, #12
 8001f82:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3720      	adds	r7, #32
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	50040300 	.word	0x50040300
 8001f94:	50040100 	.word	0x50040100
 8001f98:	50040000 	.word	0x50040000

08001f9c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b0b6      	sub	sp, #216	@ 0xd8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x22>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e3c9      	b.n	800276e <HAL_ADC_ConfigChannel+0x7b6>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fccf 	bl	800198a <LL_ADC_REG_IsConversionOngoing>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f040 83aa 	bne.w	8002748 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b05      	cmp	r3, #5
 8002002:	d824      	bhi.n	800204e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	3b02      	subs	r3, #2
 800200a:	2b03      	cmp	r3, #3
 800200c:	d81b      	bhi.n	8002046 <HAL_ADC_ConfigChannel+0x8e>
 800200e:	a201      	add	r2, pc, #4	@ (adr r2, 8002014 <HAL_ADC_ConfigChannel+0x5c>)
 8002010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002014:	08002025 	.word	0x08002025
 8002018:	0800202d 	.word	0x0800202d
 800201c:	08002035 	.word	0x08002035
 8002020:	0800203d 	.word	0x0800203d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002024:	230c      	movs	r3, #12
 8002026:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800202a:	e010      	b.n	800204e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800202c:	2312      	movs	r3, #18
 800202e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002032:	e00c      	b.n	800204e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002034:	2318      	movs	r3, #24
 8002036:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800203a:	e008      	b.n	800204e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800203c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002040:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002044:	e003      	b.n	800204e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002046:	2306      	movs	r3, #6
 8002048:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800204c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800205c:	f7ff fb74 	bl	8001748 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fc90 	bl	800198a <LL_ADC_REG_IsConversionOngoing>
 800206a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fc9c 	bl	80019b0 <LL_ADC_INJ_IsConversionOngoing>
 8002078:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800207c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002080:	2b00      	cmp	r3, #0
 8002082:	f040 81a4 	bne.w	80023ce <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002086:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 819f 	bne.w	80023ce <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6819      	ldr	r1, [r3, #0]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	461a      	mov	r2, r3
 800209e:	f7ff fb7f 	bl	80017a0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	08db      	lsrs	r3, r3, #3
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d00a      	beq.n	80020da <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6919      	ldr	r1, [r3, #16]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020d4:	f7ff fad0 	bl	8001678 <LL_ADC_SetOffset>
 80020d8:	e179      	b.n	80023ce <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff faed 	bl	80016c0 <LL_ADC_GetOffsetChannel>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10a      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x14e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2100      	movs	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fae2 	bl	80016c0 <LL_ADC_GetOffsetChannel>
 80020fc:	4603      	mov	r3, r0
 80020fe:	0e9b      	lsrs	r3, r3, #26
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	e01e      	b.n	8002144 <HAL_ADC_ConfigChannel+0x18c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fad7 	bl	80016c0 <LL_ADC_GetOffsetChannel>
 8002112:	4603      	mov	r3, r0
 8002114:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002124:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002128:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800212c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002134:	2320      	movs	r3, #32
 8002136:	e004      	b.n	8002142 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002138:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214c:	2b00      	cmp	r3, #0
 800214e:	d105      	bne.n	800215c <HAL_ADC_ConfigChannel+0x1a4>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	e018      	b.n	800218e <HAL_ADC_ConfigChannel+0x1d6>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002170:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002174:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002178:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002180:	2320      	movs	r3, #32
 8002182:	e004      	b.n	800218e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002184:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800218e:	429a      	cmp	r2, r3
 8002190:	d106      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff faa6 	bl	80016ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2101      	movs	r1, #1
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fa8a 	bl	80016c0 <LL_ADC_GetOffsetChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10a      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x214>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2101      	movs	r1, #1
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fa7f 	bl	80016c0 <LL_ADC_GetOffsetChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	0e9b      	lsrs	r3, r3, #26
 80021c6:	f003 021f 	and.w	r2, r3, #31
 80021ca:	e01e      	b.n	800220a <HAL_ADC_ConfigChannel+0x252>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2101      	movs	r1, #1
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fa74 	bl	80016c0 <LL_ADC_GetOffsetChannel>
 80021d8:	4603      	mov	r3, r0
 80021da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80021ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80021ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80021f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80021fa:	2320      	movs	r3, #32
 80021fc:	e004      	b.n	8002208 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80021fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x26a>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	e018      	b.n	8002254 <HAL_ADC_ConfigChannel+0x29c>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002236:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800223a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800223e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002246:	2320      	movs	r3, #32
 8002248:	e004      	b.n	8002254 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800224a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002254:	429a      	cmp	r2, r3
 8002256:	d106      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2200      	movs	r2, #0
 800225e:	2101      	movs	r1, #1
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fa43 	bl	80016ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2102      	movs	r1, #2
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fa27 	bl	80016c0 <LL_ADC_GetOffsetChannel>
 8002272:	4603      	mov	r3, r0
 8002274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x2da>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2102      	movs	r1, #2
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fa1c 	bl	80016c0 <LL_ADC_GetOffsetChannel>
 8002288:	4603      	mov	r3, r0
 800228a:	0e9b      	lsrs	r3, r3, #26
 800228c:	f003 021f 	and.w	r2, r3, #31
 8002290:	e01e      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x318>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2102      	movs	r1, #2
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fa11 	bl	80016c0 <LL_ADC_GetOffsetChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80022b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80022b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e004      	b.n	80022ce <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80022c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x330>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0e9b      	lsrs	r3, r3, #26
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	e014      	b.n	8002312 <HAL_ADC_ConfigChannel+0x35a>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80022f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80022fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002304:	2320      	movs	r3, #32
 8002306:	e004      	b.n	8002312 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002308:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002312:	429a      	cmp	r2, r3
 8002314:	d106      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2200      	movs	r2, #0
 800231c:	2102      	movs	r1, #2
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff f9e4 	bl	80016ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2103      	movs	r1, #3
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f9c8 	bl	80016c0 <LL_ADC_GetOffsetChannel>
 8002330:	4603      	mov	r3, r0
 8002332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10a      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x398>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2103      	movs	r1, #3
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff f9bd 	bl	80016c0 <LL_ADC_GetOffsetChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	0e9b      	lsrs	r3, r3, #26
 800234a:	f003 021f 	and.w	r2, r3, #31
 800234e:	e017      	b.n	8002380 <HAL_ADC_ConfigChannel+0x3c8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2103      	movs	r1, #3
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff f9b2 	bl	80016c0 <LL_ADC_GetOffsetChannel>
 800235c:	4603      	mov	r3, r0
 800235e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002368:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800236a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800236c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002372:	2320      	movs	r3, #32
 8002374:	e003      	b.n	800237e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002376:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002378:	fab3 f383 	clz	r3, r3
 800237c:	b2db      	uxtb	r3, r3
 800237e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x3e0>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	0e9b      	lsrs	r3, r3, #26
 8002392:	f003 031f 	and.w	r3, r3, #31
 8002396:	e011      	b.n	80023bc <HAL_ADC_ConfigChannel+0x404>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80023a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023a8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80023aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80023b0:	2320      	movs	r3, #32
 80023b2:	e003      	b.n	80023bc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80023b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023bc:	429a      	cmp	r2, r3
 80023be:	d106      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2200      	movs	r2, #0
 80023c6:	2103      	movs	r1, #3
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff f98f 	bl	80016ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fab2 	bl	800193c <LL_ADC_IsEnabled>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 8140 	bne.w	8002660 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	6819      	ldr	r1, [r3, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	461a      	mov	r2, r3
 80023ee:	f7ff fa03 	bl	80017f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	4a8f      	ldr	r2, [pc, #572]	@ (8002634 <HAL_ADC_ConfigChannel+0x67c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	f040 8131 	bne.w	8002660 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10b      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x46e>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	3301      	adds	r3, #1
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	2b09      	cmp	r3, #9
 800241c:	bf94      	ite	ls
 800241e:	2301      	movls	r3, #1
 8002420:	2300      	movhi	r3, #0
 8002422:	b2db      	uxtb	r3, r3
 8002424:	e019      	b.n	800245a <HAL_ADC_ConfigChannel+0x4a2>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002436:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002438:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800243e:	2320      	movs	r3, #32
 8002440:	e003      	b.n	800244a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002444:	fab3 f383 	clz	r3, r3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	3301      	adds	r3, #1
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	2b09      	cmp	r3, #9
 8002452:	bf94      	ite	ls
 8002454:	2301      	movls	r3, #1
 8002456:	2300      	movhi	r3, #0
 8002458:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800245a:	2b00      	cmp	r3, #0
 800245c:	d079      	beq.n	8002552 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002466:	2b00      	cmp	r3, #0
 8002468:	d107      	bne.n	800247a <HAL_ADC_ConfigChannel+0x4c2>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	0e9b      	lsrs	r3, r3, #26
 8002470:	3301      	adds	r3, #1
 8002472:	069b      	lsls	r3, r3, #26
 8002474:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002478:	e015      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x4ee>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002488:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800248a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800248c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002492:	2320      	movs	r3, #32
 8002494:	e003      	b.n	800249e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	069b      	lsls	r3, r3, #26
 80024a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x50e>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0e9b      	lsrs	r3, r3, #26
 80024b8:	3301      	adds	r3, #1
 80024ba:	f003 031f 	and.w	r3, r3, #31
 80024be:	2101      	movs	r1, #1
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	e017      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x53e>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80024d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024d6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80024d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80024de:	2320      	movs	r3, #32
 80024e0:	e003      	b.n	80024ea <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80024e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024e4:	fab3 f383 	clz	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	3301      	adds	r3, #1
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	2101      	movs	r1, #1
 80024f2:	fa01 f303 	lsl.w	r3, r1, r3
 80024f6:	ea42 0103 	orr.w	r1, r2, r3
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10a      	bne.n	800251c <HAL_ADC_ConfigChannel+0x564>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	0e9b      	lsrs	r3, r3, #26
 800250c:	3301      	adds	r3, #1
 800250e:	f003 021f 	and.w	r2, r3, #31
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	051b      	lsls	r3, r3, #20
 800251a:	e018      	b.n	800254e <HAL_ADC_ConfigChannel+0x596>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800252a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800252e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002534:	2320      	movs	r3, #32
 8002536:	e003      	b.n	8002540 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3301      	adds	r3, #1
 8002542:	f003 021f 	and.w	r2, r3, #31
 8002546:	4613      	mov	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4413      	add	r3, r2
 800254c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800254e:	430b      	orrs	r3, r1
 8002550:	e081      	b.n	8002656 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255a:	2b00      	cmp	r3, #0
 800255c:	d107      	bne.n	800256e <HAL_ADC_ConfigChannel+0x5b6>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	0e9b      	lsrs	r3, r3, #26
 8002564:	3301      	adds	r3, #1
 8002566:	069b      	lsls	r3, r3, #26
 8002568:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800256c:	e015      	b.n	800259a <HAL_ADC_ConfigChannel+0x5e2>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002586:	2320      	movs	r3, #32
 8002588:	e003      	b.n	8002592 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800258a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800258c:	fab3 f383 	clz	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	3301      	adds	r3, #1
 8002594:	069b      	lsls	r3, r3, #26
 8002596:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x602>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	0e9b      	lsrs	r3, r3, #26
 80025ac:	3301      	adds	r3, #1
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	2101      	movs	r1, #1
 80025b4:	fa01 f303 	lsl.w	r3, r1, r3
 80025b8:	e017      	b.n	80025ea <HAL_ADC_ConfigChannel+0x632>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	61bb      	str	r3, [r7, #24]
  return result;
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80025d2:	2320      	movs	r3, #32
 80025d4:	e003      	b.n	80025de <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	3301      	adds	r3, #1
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	ea42 0103 	orr.w	r1, r2, r3
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10d      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x65e>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	0e9b      	lsrs	r3, r3, #26
 8002600:	3301      	adds	r3, #1
 8002602:	f003 021f 	and.w	r2, r3, #31
 8002606:	4613      	mov	r3, r2
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4413      	add	r3, r2
 800260c:	3b1e      	subs	r3, #30
 800260e:	051b      	lsls	r3, r3, #20
 8002610:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002614:	e01e      	b.n	8002654 <HAL_ADC_ConfigChannel+0x69c>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	60fb      	str	r3, [r7, #12]
  return result;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d104      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800262e:	2320      	movs	r3, #32
 8002630:	e006      	b.n	8002640 <HAL_ADC_ConfigChannel+0x688>
 8002632:	bf00      	nop
 8002634:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	3301      	adds	r3, #1
 8002642:	f003 021f 	and.w	r2, r3, #31
 8002646:	4613      	mov	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	3b1e      	subs	r3, #30
 800264e:	051b      	lsls	r3, r3, #20
 8002650:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002654:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800265a:	4619      	mov	r1, r3
 800265c:	f7ff f8a0 	bl	80017a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	4b44      	ldr	r3, [pc, #272]	@ (8002778 <HAL_ADC_ConfigChannel+0x7c0>)
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d07a      	beq.n	8002762 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800266c:	4843      	ldr	r0, [pc, #268]	@ (800277c <HAL_ADC_ConfigChannel+0x7c4>)
 800266e:	f7fe fff5 	bl	800165c <LL_ADC_GetCommonPathInternalCh>
 8002672:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a41      	ldr	r2, [pc, #260]	@ (8002780 <HAL_ADC_ConfigChannel+0x7c8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d12c      	bne.n	80026da <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002680:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002684:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d126      	bne.n	80026da <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a3c      	ldr	r2, [pc, #240]	@ (8002784 <HAL_ADC_ConfigChannel+0x7cc>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d004      	beq.n	80026a0 <HAL_ADC_ConfigChannel+0x6e8>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a3b      	ldr	r2, [pc, #236]	@ (8002788 <HAL_ADC_ConfigChannel+0x7d0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d15d      	bne.n	800275c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026a8:	4619      	mov	r1, r3
 80026aa:	4834      	ldr	r0, [pc, #208]	@ (800277c <HAL_ADC_ConfigChannel+0x7c4>)
 80026ac:	f7fe ffc3 	bl	8001636 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026b0:	4b36      	ldr	r3, [pc, #216]	@ (800278c <HAL_ADC_ConfigChannel+0x7d4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	099b      	lsrs	r3, r3, #6
 80026b6:	4a36      	ldr	r2, [pc, #216]	@ (8002790 <HAL_ADC_ConfigChannel+0x7d8>)
 80026b8:	fba2 2303 	umull	r2, r3, r2, r3
 80026bc:	099b      	lsrs	r3, r3, #6
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026ca:	e002      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f9      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026d8:	e040      	b.n	800275c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a2d      	ldr	r2, [pc, #180]	@ (8002794 <HAL_ADC_ConfigChannel+0x7dc>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d118      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d112      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a23      	ldr	r2, [pc, #140]	@ (8002784 <HAL_ADC_ConfigChannel+0x7cc>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d004      	beq.n	8002704 <HAL_ADC_ConfigChannel+0x74c>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a22      	ldr	r2, [pc, #136]	@ (8002788 <HAL_ADC_ConfigChannel+0x7d0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d12d      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002704:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002708:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800270c:	4619      	mov	r1, r3
 800270e:	481b      	ldr	r0, [pc, #108]	@ (800277c <HAL_ADC_ConfigChannel+0x7c4>)
 8002710:	f7fe ff91 	bl	8001636 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002714:	e024      	b.n	8002760 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1f      	ldr	r2, [pc, #124]	@ (8002798 <HAL_ADC_ConfigChannel+0x7e0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d120      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002720:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002724:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d11a      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a14      	ldr	r2, [pc, #80]	@ (8002784 <HAL_ADC_ConfigChannel+0x7cc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d115      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002736:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800273a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800273e:	4619      	mov	r1, r3
 8002740:	480e      	ldr	r0, [pc, #56]	@ (800277c <HAL_ADC_ConfigChannel+0x7c4>)
 8002742:	f7fe ff78 	bl	8001636 <LL_ADC_SetCommonPathInternalCh>
 8002746:	e00c      	b.n	8002762 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274c:	f043 0220 	orr.w	r2, r3, #32
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800275a:	e002      	b.n	8002762 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800275c:	bf00      	nop
 800275e:	e000      	b.n	8002762 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002760:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800276a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800276e:	4618      	mov	r0, r3
 8002770:	37d8      	adds	r7, #216	@ 0xd8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	80080000 	.word	0x80080000
 800277c:	50040300 	.word	0x50040300
 8002780:	c7520000 	.word	0xc7520000
 8002784:	50040000 	.word	0x50040000
 8002788:	50040200 	.word	0x50040200
 800278c:	20000000 	.word	0x20000000
 8002790:	053e2d63 	.word	0x053e2d63
 8002794:	cb840000 	.word	0xcb840000
 8002798:	80000001 	.word	0x80000001

0800279c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff f8c5 	bl	800193c <LL_ADC_IsEnabled>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d169      	bne.n	800288c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	4b36      	ldr	r3, [pc, #216]	@ (8002898 <ADC_Enable+0xfc>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00d      	beq.n	80027e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ca:	f043 0210 	orr.w	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d6:	f043 0201 	orr.w	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e055      	b.n	800288e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff f894 	bl	8001914 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027ec:	482b      	ldr	r0, [pc, #172]	@ (800289c <ADC_Enable+0x100>)
 80027ee:	f7fe ff35 	bl	800165c <LL_ADC_GetCommonPathInternalCh>
 80027f2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80027f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d013      	beq.n	8002824 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027fc:	4b28      	ldr	r3, [pc, #160]	@ (80028a0 <ADC_Enable+0x104>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	099b      	lsrs	r3, r3, #6
 8002802:	4a28      	ldr	r2, [pc, #160]	@ (80028a4 <ADC_Enable+0x108>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	099b      	lsrs	r3, r3, #6
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	4613      	mov	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002816:	e002      	b.n	800281e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	3b01      	subs	r3, #1
 800281c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f9      	bne.n	8002818 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002824:	f7fe fee8 	bl	80015f8 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800282a:	e028      	b.n	800287e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff f883 	bl	800193c <LL_ADC_IsEnabled>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d104      	bne.n	8002846 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff f867 	bl	8001914 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002846:	f7fe fed7 	bl	80015f8 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d914      	bls.n	800287e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d00d      	beq.n	800287e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002866:	f043 0210 	orr.w	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002872:	f043 0201 	orr.w	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e007      	b.n	800288e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b01      	cmp	r3, #1
 800288a:	d1cf      	bne.n	800282c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	8000003f 	.word	0x8000003f
 800289c:	50040300 	.word	0x50040300
 80028a0:	20000000 	.word	0x20000000
 80028a4:	053e2d63 	.word	0x053e2d63

080028a8 <LL_ADC_IsEnabled>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <LL_ADC_IsEnabled+0x18>
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <LL_ADC_IsEnabled+0x1a>
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <LL_ADC_REG_IsConversionOngoing>:
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d101      	bne.n	80028e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b09f      	sub	sp, #124	@ 0x7c
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800290e:	2302      	movs	r3, #2
 8002910:	e093      	b.n	8002a3a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800291a:	2300      	movs	r3, #0
 800291c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800291e:	2300      	movs	r3, #0
 8002920:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a47      	ldr	r2, [pc, #284]	@ (8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d102      	bne.n	8002932 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800292c:	4b46      	ldr	r3, [pc, #280]	@ (8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	e001      	b.n	8002936 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10b      	bne.n	8002954 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e072      	b.n	8002a3a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff ffb9 	bl	80028ce <LL_ADC_REG_IsConversionOngoing>
 800295c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff ffb3 	bl	80028ce <LL_ADC_REG_IsConversionOngoing>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d154      	bne.n	8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800296e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002970:	2b00      	cmp	r3, #0
 8002972:	d151      	bne.n	8002a18 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002974:	4b35      	ldr	r3, [pc, #212]	@ (8002a4c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002976:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d02c      	beq.n	80029da <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002992:	035b      	lsls	r3, r3, #13
 8002994:	430b      	orrs	r3, r1
 8002996:	431a      	orrs	r2, r3
 8002998:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800299a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800299c:	4829      	ldr	r0, [pc, #164]	@ (8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800299e:	f7ff ff83 	bl	80028a8 <LL_ADC_IsEnabled>
 80029a2:	4604      	mov	r4, r0
 80029a4:	4828      	ldr	r0, [pc, #160]	@ (8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029a6:	f7ff ff7f 	bl	80028a8 <LL_ADC_IsEnabled>
 80029aa:	4603      	mov	r3, r0
 80029ac:	431c      	orrs	r4, r3
 80029ae:	4828      	ldr	r0, [pc, #160]	@ (8002a50 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80029b0:	f7ff ff7a 	bl	80028a8 <LL_ADC_IsEnabled>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4323      	orrs	r3, r4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d137      	bne.n	8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80029c4:	f023 030f 	bic.w	r3, r3, #15
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	6811      	ldr	r1, [r2, #0]
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	6892      	ldr	r2, [r2, #8]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	431a      	orrs	r2, r3
 80029d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029d6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029d8:	e028      	b.n	8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80029da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029e4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029e6:	4817      	ldr	r0, [pc, #92]	@ (8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80029e8:	f7ff ff5e 	bl	80028a8 <LL_ADC_IsEnabled>
 80029ec:	4604      	mov	r4, r0
 80029ee:	4816      	ldr	r0, [pc, #88]	@ (8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029f0:	f7ff ff5a 	bl	80028a8 <LL_ADC_IsEnabled>
 80029f4:	4603      	mov	r3, r0
 80029f6:	431c      	orrs	r4, r3
 80029f8:	4815      	ldr	r0, [pc, #84]	@ (8002a50 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80029fa:	f7ff ff55 	bl	80028a8 <LL_ADC_IsEnabled>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4323      	orrs	r3, r4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d112      	bne.n	8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a0e:	f023 030f 	bic.w	r3, r3, #15
 8002a12:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a14:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a16:	e009      	b.n	8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1c:	f043 0220 	orr.w	r2, r3, #32
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002a2a:	e000      	b.n	8002a2e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a36:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	377c      	adds	r7, #124	@ 0x7c
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd90      	pop	{r4, r7, pc}
 8002a42:	bf00      	nop
 8002a44:	50040000 	.word	0x50040000
 8002a48:	50040100 	.word	0x50040100
 8002a4c:	50040300 	.word	0x50040300
 8002a50:	50040200 	.word	0x50040200

08002a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a64:	4b0c      	ldr	r3, [pc, #48]	@ (8002a98 <__NVIC_SetPriorityGrouping+0x44>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a70:	4013      	ands	r3, r2
 8002a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a86:	4a04      	ldr	r2, [pc, #16]	@ (8002a98 <__NVIC_SetPriorityGrouping+0x44>)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	60d3      	str	r3, [r2, #12]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa0:	4b04      	ldr	r3, [pc, #16]	@ (8002ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	0a1b      	lsrs	r3, r3, #8
 8002aa6:	f003 0307 	and.w	r3, r3, #7
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	db0a      	blt.n	8002ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	490c      	ldr	r1, [pc, #48]	@ (8002b04 <__NVIC_SetPriority+0x4c>)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	0112      	lsls	r2, r2, #4
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	440b      	add	r3, r1
 8002adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae0:	e00a      	b.n	8002af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4908      	ldr	r1, [pc, #32]	@ (8002b08 <__NVIC_SetPriority+0x50>)
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	3b04      	subs	r3, #4
 8002af0:	0112      	lsls	r2, r2, #4
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	440b      	add	r3, r1
 8002af6:	761a      	strb	r2, [r3, #24]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000e100 	.word	0xe000e100
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	@ 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f1c3 0307 	rsb	r3, r3, #7
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	bf28      	it	cs
 8002b2a:	2304      	movcs	r3, #4
 8002b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2b06      	cmp	r3, #6
 8002b34:	d902      	bls.n	8002b3c <NVIC_EncodePriority+0x30>
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3b03      	subs	r3, #3
 8002b3a:	e000      	b.n	8002b3e <NVIC_EncodePriority+0x32>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	f04f 32ff 	mov.w	r2, #4294967295
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	401a      	ands	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b54:	f04f 31ff 	mov.w	r1, #4294967295
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	43d9      	mvns	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	4313      	orrs	r3, r2
         );
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3724      	adds	r7, #36	@ 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b84:	d301      	bcc.n	8002b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00f      	b.n	8002baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb4 <SysTick_Config+0x40>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b92:	210f      	movs	r1, #15
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	f7ff ff8e 	bl	8002ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b9c:	4b05      	ldr	r3, [pc, #20]	@ (8002bb4 <SysTick_Config+0x40>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ba2:	4b04      	ldr	r3, [pc, #16]	@ (8002bb4 <SysTick_Config+0x40>)
 8002ba4:	2207      	movs	r2, #7
 8002ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	e000e010 	.word	0xe000e010

08002bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff ff47 	bl	8002a54 <__NVIC_SetPriorityGrouping>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b086      	sub	sp, #24
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002be0:	f7ff ff5c 	bl	8002a9c <__NVIC_GetPriorityGrouping>
 8002be4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	6978      	ldr	r0, [r7, #20]
 8002bec:	f7ff ff8e 	bl	8002b0c <NVIC_EncodePriority>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff5d 	bl	8002ab8 <__NVIC_SetPriority>
}
 8002bfe:	bf00      	nop
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff ffb0 	bl	8002b74 <SysTick_Config>
 8002c14:	4603      	mov	r3, r0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
	...

08002c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c2e:	e17f      	b.n	8002f30 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	2101      	movs	r1, #1
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 8171 	beq.w	8002f2a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d005      	beq.n	8002c60 <HAL_GPIO_Init+0x40>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d130      	bne.n	8002cc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c96:	2201      	movs	r2, #1
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	091b      	lsrs	r3, r3, #4
 8002cac:	f003 0201 	and.w	r2, r3, #1
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d118      	bne.n	8002d00 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	08db      	lsrs	r3, r3, #3
 8002cea:	f003 0201 	and.w	r2, r3, #1
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d017      	beq.n	8002d3c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2203      	movs	r2, #3
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d123      	bne.n	8002d90 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	08da      	lsrs	r2, r3, #3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3208      	adds	r2, #8
 8002d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	220f      	movs	r2, #15
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	08da      	lsrs	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3208      	adds	r2, #8
 8002d8a:	6939      	ldr	r1, [r7, #16]
 8002d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4013      	ands	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0203 	and.w	r2, r3, #3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80ac 	beq.w	8002f2a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd2:	4b5f      	ldr	r3, [pc, #380]	@ (8002f50 <HAL_GPIO_Init+0x330>)
 8002dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd6:	4a5e      	ldr	r2, [pc, #376]	@ (8002f50 <HAL_GPIO_Init+0x330>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dde:	4b5c      	ldr	r3, [pc, #368]	@ (8002f50 <HAL_GPIO_Init+0x330>)
 8002de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dea:	4a5a      	ldr	r2, [pc, #360]	@ (8002f54 <HAL_GPIO_Init+0x334>)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	089b      	lsrs	r3, r3, #2
 8002df0:	3302      	adds	r3, #2
 8002df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	220f      	movs	r2, #15
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e14:	d025      	beq.n	8002e62 <HAL_GPIO_Init+0x242>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a4f      	ldr	r2, [pc, #316]	@ (8002f58 <HAL_GPIO_Init+0x338>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d01f      	beq.n	8002e5e <HAL_GPIO_Init+0x23e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a4e      	ldr	r2, [pc, #312]	@ (8002f5c <HAL_GPIO_Init+0x33c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d019      	beq.n	8002e5a <HAL_GPIO_Init+0x23a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a4d      	ldr	r2, [pc, #308]	@ (8002f60 <HAL_GPIO_Init+0x340>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d013      	beq.n	8002e56 <HAL_GPIO_Init+0x236>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a4c      	ldr	r2, [pc, #304]	@ (8002f64 <HAL_GPIO_Init+0x344>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00d      	beq.n	8002e52 <HAL_GPIO_Init+0x232>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a4b      	ldr	r2, [pc, #300]	@ (8002f68 <HAL_GPIO_Init+0x348>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d007      	beq.n	8002e4e <HAL_GPIO_Init+0x22e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a4a      	ldr	r2, [pc, #296]	@ (8002f6c <HAL_GPIO_Init+0x34c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d101      	bne.n	8002e4a <HAL_GPIO_Init+0x22a>
 8002e46:	2306      	movs	r3, #6
 8002e48:	e00c      	b.n	8002e64 <HAL_GPIO_Init+0x244>
 8002e4a:	2307      	movs	r3, #7
 8002e4c:	e00a      	b.n	8002e64 <HAL_GPIO_Init+0x244>
 8002e4e:	2305      	movs	r3, #5
 8002e50:	e008      	b.n	8002e64 <HAL_GPIO_Init+0x244>
 8002e52:	2304      	movs	r3, #4
 8002e54:	e006      	b.n	8002e64 <HAL_GPIO_Init+0x244>
 8002e56:	2303      	movs	r3, #3
 8002e58:	e004      	b.n	8002e64 <HAL_GPIO_Init+0x244>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e002      	b.n	8002e64 <HAL_GPIO_Init+0x244>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_GPIO_Init+0x244>
 8002e62:	2300      	movs	r3, #0
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	f002 0203 	and.w	r2, r2, #3
 8002e6a:	0092      	lsls	r2, r2, #2
 8002e6c:	4093      	lsls	r3, r2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e74:	4937      	ldr	r1, [pc, #220]	@ (8002f54 <HAL_GPIO_Init+0x334>)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	089b      	lsrs	r3, r3, #2
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e82:	4b3b      	ldr	r3, [pc, #236]	@ (8002f70 <HAL_GPIO_Init+0x350>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ea6:	4a32      	ldr	r2, [pc, #200]	@ (8002f70 <HAL_GPIO_Init+0x350>)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002eac:	4b30      	ldr	r3, [pc, #192]	@ (8002f70 <HAL_GPIO_Init+0x350>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ed0:	4a27      	ldr	r2, [pc, #156]	@ (8002f70 <HAL_GPIO_Init+0x350>)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ed6:	4b26      	ldr	r3, [pc, #152]	@ (8002f70 <HAL_GPIO_Init+0x350>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002efa:	4a1d      	ldr	r2, [pc, #116]	@ (8002f70 <HAL_GPIO_Init+0x350>)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f00:	4b1b      	ldr	r3, [pc, #108]	@ (8002f70 <HAL_GPIO_Init+0x350>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f24:	4a12      	ldr	r2, [pc, #72]	@ (8002f70 <HAL_GPIO_Init+0x350>)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f47f ae78 	bne.w	8002c30 <HAL_GPIO_Init+0x10>
  }
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	371c      	adds	r7, #28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40010000 	.word	0x40010000
 8002f58:	48000400 	.word	0x48000400
 8002f5c:	48000800 	.word	0x48000800
 8002f60:	48000c00 	.word	0x48000c00
 8002f64:	48001000 	.word	0x48001000
 8002f68:	48001400 	.word	0x48001400
 8002f6c:	48001800 	.word	0x48001800
 8002f70:	40010400 	.word	0x40010400

08002f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	807b      	strh	r3, [r7, #2]
 8002f80:	4613      	mov	r3, r2
 8002f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f84:	787b      	ldrb	r3, [r7, #1]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f8a:	887a      	ldrh	r2, [r7, #2]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f90:	e002      	b.n	8002f98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f92:	887a      	ldrh	r2, [r7, #2]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e08d      	b.n	80030d2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fe f97e 	bl	80012cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2224      	movs	r2, #36	@ 0x24
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0201 	bic.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ff4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003004:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d107      	bne.n	800301e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	e006      	b.n	800302c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800302a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d108      	bne.n	8003046 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003042:	605a      	str	r2, [r3, #4]
 8003044:	e007      	b.n	8003056 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003054:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003068:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003078:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69d9      	ldr	r1, [r3, #28]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1a      	ldr	r2, [r3, #32]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d138      	bne.n	8003162 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e032      	b.n	8003164 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2224      	movs	r2, #36	@ 0x24
 800310a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0201 	bic.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800312c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6819      	ldr	r1, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	e000      	b.n	8003164 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003162:	2302      	movs	r3, #2
  }
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b20      	cmp	r3, #32
 8003184:	d139      	bne.n	80031fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003190:	2302      	movs	r3, #2
 8003192:	e033      	b.n	80031fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2224      	movs	r2, #36	@ 0x24
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800320c:	4b04      	ldr	r3, [pc, #16]	@ (8003220 <HAL_PWREx_GetVoltageRange+0x18>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40007000 	.word	0x40007000

08003224 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003232:	d130      	bne.n	8003296 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003234:	4b23      	ldr	r3, [pc, #140]	@ (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800323c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003240:	d038      	beq.n	80032b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003242:	4b20      	ldr	r3, [pc, #128]	@ (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800324a:	4a1e      	ldr	r2, [pc, #120]	@ (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800324c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003250:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003252:	4b1d      	ldr	r3, [pc, #116]	@ (80032c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2232      	movs	r2, #50	@ 0x32
 8003258:	fb02 f303 	mul.w	r3, r2, r3
 800325c:	4a1b      	ldr	r2, [pc, #108]	@ (80032cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	0c9b      	lsrs	r3, r3, #18
 8003264:	3301      	adds	r3, #1
 8003266:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003268:	e002      	b.n	8003270 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3b01      	subs	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003270:	4b14      	ldr	r3, [pc, #80]	@ (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800327c:	d102      	bne.n	8003284 <HAL_PWREx_ControlVoltageScaling+0x60>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f2      	bne.n	800326a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003284:	4b0f      	ldr	r3, [pc, #60]	@ (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003290:	d110      	bne.n	80032b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e00f      	b.n	80032b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003296:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800329e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a2:	d007      	beq.n	80032b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032a4:	4b07      	ldr	r3, [pc, #28]	@ (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032ac:	4a05      	ldr	r2, [pc, #20]	@ (80032c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40007000 	.word	0x40007000
 80032c8:	20000000 	.word	0x20000000
 80032cc:	431bde83 	.word	0x431bde83

080032d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e3ca      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032e2:	4b97      	ldr	r3, [pc, #604]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032ec:	4b94      	ldr	r3, [pc, #592]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 80e4 	beq.w	80034cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <HAL_RCC_OscConfig+0x4a>
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2b0c      	cmp	r3, #12
 800330e:	f040 808b 	bne.w	8003428 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b01      	cmp	r3, #1
 8003316:	f040 8087 	bne.w	8003428 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800331a:	4b89      	ldr	r3, [pc, #548]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_RCC_OscConfig+0x62>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e3a2      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1a      	ldr	r2, [r3, #32]
 8003336:	4b82      	ldr	r3, [pc, #520]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d004      	beq.n	800334c <HAL_RCC_OscConfig+0x7c>
 8003342:	4b7f      	ldr	r3, [pc, #508]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800334a:	e005      	b.n	8003358 <HAL_RCC_OscConfig+0x88>
 800334c:	4b7c      	ldr	r3, [pc, #496]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 800334e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003352:	091b      	lsrs	r3, r3, #4
 8003354:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003358:	4293      	cmp	r3, r2
 800335a:	d223      	bcs.n	80033a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fd55 	bl	8003e10 <RCC_SetFlashLatencyFromMSIRange>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e383      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003370:	4b73      	ldr	r3, [pc, #460]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a72      	ldr	r2, [pc, #456]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003376:	f043 0308 	orr.w	r3, r3, #8
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	4b70      	ldr	r3, [pc, #448]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	496d      	ldr	r1, [pc, #436]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 800338a:	4313      	orrs	r3, r2
 800338c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800338e:	4b6c      	ldr	r3, [pc, #432]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	4968      	ldr	r1, [pc, #416]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	604b      	str	r3, [r1, #4]
 80033a2:	e025      	b.n	80033f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033a4:	4b66      	ldr	r3, [pc, #408]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a65      	ldr	r2, [pc, #404]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80033aa:	f043 0308 	orr.w	r3, r3, #8
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	4b63      	ldr	r3, [pc, #396]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	4960      	ldr	r1, [pc, #384]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	495b      	ldr	r1, [pc, #364]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d109      	bne.n	80033f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fd15 	bl	8003e10 <RCC_SetFlashLatencyFromMSIRange>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e343      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033f0:	f000 fc4a 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4b52      	ldr	r3, [pc, #328]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	4950      	ldr	r1, [pc, #320]	@ (8003544 <HAL_RCC_OscConfig+0x274>)
 8003402:	5ccb      	ldrb	r3, [r1, r3]
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	fa22 f303 	lsr.w	r3, r2, r3
 800340c:	4a4e      	ldr	r2, [pc, #312]	@ (8003548 <HAL_RCC_OscConfig+0x278>)
 800340e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003410:	4b4e      	ldr	r3, [pc, #312]	@ (800354c <HAL_RCC_OscConfig+0x27c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f7fe f89f 	bl	8001558 <HAL_InitTick>
 800341a:	4603      	mov	r3, r0
 800341c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d052      	beq.n	80034ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	e327      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d032      	beq.n	8003496 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003430:	4b43      	ldr	r3, [pc, #268]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a42      	ldr	r2, [pc, #264]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800343c:	f7fe f8dc 	bl	80015f8 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003444:	f7fe f8d8 	bl	80015f8 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e310      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003456:	4b3a      	ldr	r3, [pc, #232]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003462:	4b37      	ldr	r3, [pc, #220]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a36      	ldr	r2, [pc, #216]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003468:	f043 0308 	orr.w	r3, r3, #8
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4b34      	ldr	r3, [pc, #208]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	4931      	ldr	r1, [pc, #196]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003480:	4b2f      	ldr	r3, [pc, #188]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	021b      	lsls	r3, r3, #8
 800348e:	492c      	ldr	r1, [pc, #176]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003490:	4313      	orrs	r3, r2
 8003492:	604b      	str	r3, [r1, #4]
 8003494:	e01a      	b.n	80034cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003496:	4b2a      	ldr	r3, [pc, #168]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a29      	ldr	r2, [pc, #164]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034a2:	f7fe f8a9 	bl	80015f8 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034aa:	f7fe f8a5 	bl	80015f8 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e2dd      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034bc:	4b20      	ldr	r3, [pc, #128]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f0      	bne.n	80034aa <HAL_RCC_OscConfig+0x1da>
 80034c8:	e000      	b.n	80034cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d074      	beq.n	80035c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d005      	beq.n	80034ea <HAL_RCC_OscConfig+0x21a>
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b0c      	cmp	r3, #12
 80034e2:	d10e      	bne.n	8003502 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d10b      	bne.n	8003502 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ea:	4b15      	ldr	r3, [pc, #84]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d064      	beq.n	80035c0 <HAL_RCC_OscConfig+0x2f0>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d160      	bne.n	80035c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e2ba      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800350a:	d106      	bne.n	800351a <HAL_RCC_OscConfig+0x24a>
 800350c:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a0b      	ldr	r2, [pc, #44]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	e026      	b.n	8003568 <HAL_RCC_OscConfig+0x298>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003522:	d115      	bne.n	8003550 <HAL_RCC_OscConfig+0x280>
 8003524:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a05      	ldr	r2, [pc, #20]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 800352a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	4b03      	ldr	r3, [pc, #12]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a02      	ldr	r2, [pc, #8]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003536:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	e014      	b.n	8003568 <HAL_RCC_OscConfig+0x298>
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000
 8003544:	080052fc 	.word	0x080052fc
 8003548:	20000000 	.word	0x20000000
 800354c:	20000004 	.word	0x20000004
 8003550:	4ba0      	ldr	r3, [pc, #640]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a9f      	ldr	r2, [pc, #636]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b9d      	ldr	r3, [pc, #628]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a9c      	ldr	r2, [pc, #624]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d013      	beq.n	8003598 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fe f842 	bl	80015f8 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003578:	f7fe f83e 	bl	80015f8 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	@ 0x64
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e276      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800358a:	4b92      	ldr	r3, [pc, #584]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x2a8>
 8003596:	e014      	b.n	80035c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fe f82e 	bl	80015f8 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a0:	f7fe f82a 	bl	80015f8 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	@ 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e262      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035b2:	4b88      	ldr	r3, [pc, #544]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x2d0>
 80035be:	e000      	b.n	80035c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d060      	beq.n	8003690 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_OscConfig+0x310>
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	2b0c      	cmp	r3, #12
 80035d8:	d119      	bne.n	800360e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d116      	bne.n	800360e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035e0:	4b7c      	ldr	r3, [pc, #496]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_OscConfig+0x328>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e23f      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f8:	4b76      	ldr	r3, [pc, #472]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	061b      	lsls	r3, r3, #24
 8003606:	4973      	ldr	r1, [pc, #460]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800360c:	e040      	b.n	8003690 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d023      	beq.n	800365e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003616:	4b6f      	ldr	r3, [pc, #444]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a6e      	ldr	r2, [pc, #440]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003622:	f7fd ffe9 	bl	80015f8 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800362a:	f7fd ffe5 	bl	80015f8 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e21d      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800363c:	4b65      	ldr	r3, [pc, #404]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003648:	4b62      	ldr	r3, [pc, #392]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	061b      	lsls	r3, r3, #24
 8003656:	495f      	ldr	r1, [pc, #380]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003658:	4313      	orrs	r3, r2
 800365a:	604b      	str	r3, [r1, #4]
 800365c:	e018      	b.n	8003690 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800365e:	4b5d      	ldr	r3, [pc, #372]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a5c      	ldr	r2, [pc, #368]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366a:	f7fd ffc5 	bl	80015f8 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003672:	f7fd ffc1 	bl	80015f8 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e1f9      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003684:	4b53      	ldr	r3, [pc, #332]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1f0      	bne.n	8003672 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d03c      	beq.n	8003716 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01c      	beq.n	80036de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a4:	4b4b      	ldr	r3, [pc, #300]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80036a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036aa:	4a4a      	ldr	r2, [pc, #296]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b4:	f7fd ffa0 	bl	80015f8 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036bc:	f7fd ff9c 	bl	80015f8 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e1d4      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036ce:	4b41      	ldr	r3, [pc, #260]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80036d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ef      	beq.n	80036bc <HAL_RCC_OscConfig+0x3ec>
 80036dc:	e01b      	b.n	8003716 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036de:	4b3d      	ldr	r3, [pc, #244]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80036e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036e4:	4a3b      	ldr	r2, [pc, #236]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80036e6:	f023 0301 	bic.w	r3, r3, #1
 80036ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ee:	f7fd ff83 	bl	80015f8 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f6:	f7fd ff7f 	bl	80015f8 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e1b7      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003708:	4b32      	ldr	r3, [pc, #200]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 800370a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1ef      	bne.n	80036f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80a6 	beq.w	8003870 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003724:	2300      	movs	r3, #0
 8003726:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003728:	4b2a      	ldr	r3, [pc, #168]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 800372a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10d      	bne.n	8003750 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003734:	4b27      	ldr	r3, [pc, #156]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003738:	4a26      	ldr	r2, [pc, #152]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 800373a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800373e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003740:	4b24      	ldr	r3, [pc, #144]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800374c:	2301      	movs	r3, #1
 800374e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003750:	4b21      	ldr	r3, [pc, #132]	@ (80037d8 <HAL_RCC_OscConfig+0x508>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d118      	bne.n	800378e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800375c:	4b1e      	ldr	r3, [pc, #120]	@ (80037d8 <HAL_RCC_OscConfig+0x508>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a1d      	ldr	r2, [pc, #116]	@ (80037d8 <HAL_RCC_OscConfig+0x508>)
 8003762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003766:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003768:	f7fd ff46 	bl	80015f8 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003770:	f7fd ff42 	bl	80015f8 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e17a      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003782:	4b15      	ldr	r3, [pc, #84]	@ (80037d8 <HAL_RCC_OscConfig+0x508>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d108      	bne.n	80037a8 <HAL_RCC_OscConfig+0x4d8>
 8003796:	4b0f      	ldr	r3, [pc, #60]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 8003798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379c:	4a0d      	ldr	r2, [pc, #52]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037a6:	e029      	b.n	80037fc <HAL_RCC_OscConfig+0x52c>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b05      	cmp	r3, #5
 80037ae:	d115      	bne.n	80037dc <HAL_RCC_OscConfig+0x50c>
 80037b0:	4b08      	ldr	r3, [pc, #32]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b6:	4a07      	ldr	r2, [pc, #28]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80037b8:	f043 0304 	orr.w	r3, r3, #4
 80037bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037c0:	4b04      	ldr	r3, [pc, #16]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c6:	4a03      	ldr	r2, [pc, #12]	@ (80037d4 <HAL_RCC_OscConfig+0x504>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037d0:	e014      	b.n	80037fc <HAL_RCC_OscConfig+0x52c>
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40007000 	.word	0x40007000
 80037dc:	4b9c      	ldr	r3, [pc, #624]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e2:	4a9b      	ldr	r2, [pc, #620]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037ec:	4b98      	ldr	r3, [pc, #608]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f2:	4a97      	ldr	r2, [pc, #604]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80037f4:	f023 0304 	bic.w	r3, r3, #4
 80037f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d016      	beq.n	8003832 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003804:	f7fd fef8 	bl	80015f8 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380a:	e00a      	b.n	8003822 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380c:	f7fd fef4 	bl	80015f8 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e12a      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003822:	4b8b      	ldr	r3, [pc, #556]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0ed      	beq.n	800380c <HAL_RCC_OscConfig+0x53c>
 8003830:	e015      	b.n	800385e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003832:	f7fd fee1 	bl	80015f8 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003838:	e00a      	b.n	8003850 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383a:	f7fd fedd 	bl	80015f8 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003848:	4293      	cmp	r3, r2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e113      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003850:	4b7f      	ldr	r3, [pc, #508]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1ed      	bne.n	800383a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800385e:	7ffb      	ldrb	r3, [r7, #31]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d105      	bne.n	8003870 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003864:	4b7a      	ldr	r3, [pc, #488]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003868:	4a79      	ldr	r2, [pc, #484]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 800386a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800386e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80fe 	beq.w	8003a76 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800387e:	2b02      	cmp	r3, #2
 8003880:	f040 80d0 	bne.w	8003a24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003884:	4b72      	ldr	r3, [pc, #456]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 0203 	and.w	r2, r3, #3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003894:	429a      	cmp	r2, r3
 8003896:	d130      	bne.n	80038fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	3b01      	subs	r3, #1
 80038a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d127      	bne.n	80038fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d11f      	bne.n	80038fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038c4:	2a07      	cmp	r2, #7
 80038c6:	bf14      	ite	ne
 80038c8:	2201      	movne	r2, #1
 80038ca:	2200      	moveq	r2, #0
 80038cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d113      	bne.n	80038fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038dc:	085b      	lsrs	r3, r3, #1
 80038de:	3b01      	subs	r3, #1
 80038e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d109      	bne.n	80038fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	3b01      	subs	r3, #1
 80038f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d06e      	beq.n	80039d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	2b0c      	cmp	r3, #12
 80038fe:	d069      	beq.n	80039d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003900:	4b53      	ldr	r3, [pc, #332]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d105      	bne.n	8003918 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800390c:	4b50      	ldr	r3, [pc, #320]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0ad      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800391c:	4b4c      	ldr	r3, [pc, #304]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a4b      	ldr	r2, [pc, #300]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003922:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003926:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003928:	f7fd fe66 	bl	80015f8 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003930:	f7fd fe62 	bl	80015f8 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e09a      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003942:	4b43      	ldr	r3, [pc, #268]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800394e:	4b40      	ldr	r3, [pc, #256]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	4b40      	ldr	r3, [pc, #256]	@ (8003a54 <HAL_RCC_OscConfig+0x784>)
 8003954:	4013      	ands	r3, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800395e:	3a01      	subs	r2, #1
 8003960:	0112      	lsls	r2, r2, #4
 8003962:	4311      	orrs	r1, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003968:	0212      	lsls	r2, r2, #8
 800396a:	4311      	orrs	r1, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003970:	0852      	lsrs	r2, r2, #1
 8003972:	3a01      	subs	r2, #1
 8003974:	0552      	lsls	r2, r2, #21
 8003976:	4311      	orrs	r1, r2
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800397c:	0852      	lsrs	r2, r2, #1
 800397e:	3a01      	subs	r2, #1
 8003980:	0652      	lsls	r2, r2, #25
 8003982:	4311      	orrs	r1, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003988:	0912      	lsrs	r2, r2, #4
 800398a:	0452      	lsls	r2, r2, #17
 800398c:	430a      	orrs	r2, r1
 800398e:	4930      	ldr	r1, [pc, #192]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003990:	4313      	orrs	r3, r2
 8003992:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003994:	4b2e      	ldr	r3, [pc, #184]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a2d      	ldr	r2, [pc, #180]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 800399a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800399e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80039a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039ac:	f7fd fe24 	bl	80015f8 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fd fe20 	bl	80015f8 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e058      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c6:	4b22      	ldr	r3, [pc, #136]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039d2:	e050      	b.n	8003a76 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e04f      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d148      	bne.n	8003a76 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a19      	ldr	r2, [pc, #100]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80039ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039f0:	4b17      	ldr	r3, [pc, #92]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4a16      	ldr	r2, [pc, #88]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 80039f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039fc:	f7fd fdfc 	bl	80015f8 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a04:	f7fd fdf8 	bl	80015f8 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e030      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a16:	4b0e      	ldr	r3, [pc, #56]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x734>
 8003a22:	e028      	b.n	8003a76 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	2b0c      	cmp	r3, #12
 8003a28:	d023      	beq.n	8003a72 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2a:	4b09      	ldr	r3, [pc, #36]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a08      	ldr	r2, [pc, #32]	@ (8003a50 <HAL_RCC_OscConfig+0x780>)
 8003a30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a36:	f7fd fddf 	bl	80015f8 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a3c:	e00c      	b.n	8003a58 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3e:	f7fd fddb 	bl	80015f8 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d905      	bls.n	8003a58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e013      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
 8003a50:	40021000 	.word	0x40021000
 8003a54:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a58:	4b09      	ldr	r3, [pc, #36]	@ (8003a80 <HAL_RCC_OscConfig+0x7b0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1ec      	bne.n	8003a3e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a64:	4b06      	ldr	r3, [pc, #24]	@ (8003a80 <HAL_RCC_OscConfig+0x7b0>)
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	4905      	ldr	r1, [pc, #20]	@ (8003a80 <HAL_RCC_OscConfig+0x7b0>)
 8003a6a:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <HAL_RCC_OscConfig+0x7b4>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60cb      	str	r3, [r1, #12]
 8003a70:	e001      	b.n	8003a76 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3720      	adds	r7, #32
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000
 8003a84:	feeefffc 	.word	0xfeeefffc

08003a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0e7      	b.n	8003c6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b75      	ldr	r3, [pc, #468]	@ (8003c74 <HAL_RCC_ClockConfig+0x1ec>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d910      	bls.n	8003acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b72      	ldr	r3, [pc, #456]	@ (8003c74 <HAL_RCC_ClockConfig+0x1ec>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 0207 	bic.w	r2, r3, #7
 8003ab2:	4970      	ldr	r1, [pc, #448]	@ (8003c74 <HAL_RCC_ClockConfig+0x1ec>)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b6e      	ldr	r3, [pc, #440]	@ (8003c74 <HAL_RCC_ClockConfig+0x1ec>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0cf      	b.n	8003c6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d010      	beq.n	8003afa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	4b66      	ldr	r3, [pc, #408]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d908      	bls.n	8003afa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae8:	4b63      	ldr	r3, [pc, #396]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	4960      	ldr	r1, [pc, #384]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d04c      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0e:	4b5a      	ldr	r3, [pc, #360]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d121      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e0a6      	b.n	8003c6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d107      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b26:	4b54      	ldr	r3, [pc, #336]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d115      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e09a      	b.n	8003c6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d107      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b3e:	4b4e      	ldr	r3, [pc, #312]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e08e      	b.n	8003c6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e086      	b.n	8003c6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b5e:	4b46      	ldr	r3, [pc, #280]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f023 0203 	bic.w	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4943      	ldr	r1, [pc, #268]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b70:	f7fd fd42 	bl	80015f8 <HAL_GetTick>
 8003b74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b76:	e00a      	b.n	8003b8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b78:	f7fd fd3e 	bl	80015f8 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e06e      	b.n	8003c6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 020c 	and.w	r2, r3, #12
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d1eb      	bne.n	8003b78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d010      	beq.n	8003bce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	4b31      	ldr	r3, [pc, #196]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d208      	bcs.n	8003bce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	492b      	ldr	r1, [pc, #172]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bce:	4b29      	ldr	r3, [pc, #164]	@ (8003c74 <HAL_RCC_ClockConfig+0x1ec>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d210      	bcs.n	8003bfe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bdc:	4b25      	ldr	r3, [pc, #148]	@ (8003c74 <HAL_RCC_ClockConfig+0x1ec>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f023 0207 	bic.w	r2, r3, #7
 8003be4:	4923      	ldr	r1, [pc, #140]	@ (8003c74 <HAL_RCC_ClockConfig+0x1ec>)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bec:	4b21      	ldr	r3, [pc, #132]	@ (8003c74 <HAL_RCC_ClockConfig+0x1ec>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e036      	b.n	8003c6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d008      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	4918      	ldr	r1, [pc, #96]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d009      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c28:	4b13      	ldr	r3, [pc, #76]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4910      	ldr	r1, [pc, #64]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c3c:	f000 f824 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8003c40:	4602      	mov	r2, r0
 8003c42:	4b0d      	ldr	r3, [pc, #52]	@ (8003c78 <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	490b      	ldr	r1, [pc, #44]	@ (8003c7c <HAL_RCC_ClockConfig+0x1f4>)
 8003c4e:	5ccb      	ldrb	r3, [r1, r3]
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
 8003c58:	4a09      	ldr	r2, [pc, #36]	@ (8003c80 <HAL_RCC_ClockConfig+0x1f8>)
 8003c5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c5c:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <HAL_RCC_ClockConfig+0x1fc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fd fc79 	bl	8001558 <HAL_InitTick>
 8003c66:	4603      	mov	r3, r0
 8003c68:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c6a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40022000 	.word	0x40022000
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	080052fc 	.word	0x080052fc
 8003c80:	20000000 	.word	0x20000000
 8003c84:	20000004 	.word	0x20000004

08003c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b089      	sub	sp, #36	@ 0x24
 8003c8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	2300      	movs	r3, #0
 8003c94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c96:	4b3e      	ldr	r3, [pc, #248]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
 8003c9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ca0:	4b3b      	ldr	r3, [pc, #236]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_RCC_GetSysClockFreq+0x34>
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	2b0c      	cmp	r3, #12
 8003cb4:	d121      	bne.n	8003cfa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d11e      	bne.n	8003cfa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cbc:	4b34      	ldr	r3, [pc, #208]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d107      	bne.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cc8:	4b31      	ldr	r3, [pc, #196]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cce:	0a1b      	lsrs	r3, r3, #8
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	e005      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ce4:	4a2b      	ldr	r2, [pc, #172]	@ (8003d94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10d      	bne.n	8003d10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cf8:	e00a      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d102      	bne.n	8003d06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d00:	4b25      	ldr	r3, [pc, #148]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d02:	61bb      	str	r3, [r7, #24]
 8003d04:	e004      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d0c:	4b23      	ldr	r3, [pc, #140]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x114>)
 8003d0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	2b0c      	cmp	r3, #12
 8003d14:	d134      	bne.n	8003d80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d16:	4b1e      	ldr	r3, [pc, #120]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d003      	beq.n	8003d2e <HAL_RCC_GetSysClockFreq+0xa6>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d003      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0xac>
 8003d2c:	e005      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8003d98 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d30:	617b      	str	r3, [r7, #20]
      break;
 8003d32:	e005      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d34:	4b19      	ldr	r3, [pc, #100]	@ (8003d9c <HAL_RCC_GetSysClockFreq+0x114>)
 8003d36:	617b      	str	r3, [r7, #20]
      break;
 8003d38:	e002      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	617b      	str	r3, [r7, #20]
      break;
 8003d3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d40:	4b13      	ldr	r3, [pc, #76]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d4e:	4b10      	ldr	r3, [pc, #64]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	fb03 f202 	mul.w	r2, r3, r2
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d66:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	0e5b      	lsrs	r3, r3, #25
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	3301      	adds	r3, #1
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d80:	69bb      	ldr	r3, [r7, #24]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3724      	adds	r7, #36	@ 0x24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	08005314 	.word	0x08005314
 8003d98:	00f42400 	.word	0x00f42400
 8003d9c:	007a1200 	.word	0x007a1200

08003da0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003da4:	4b03      	ldr	r3, [pc, #12]	@ (8003db4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003da6:	681b      	ldr	r3, [r3, #0]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000000 	.word	0x20000000

08003db8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dbc:	f7ff fff0 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b06      	ldr	r3, [pc, #24]	@ (8003ddc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	0a1b      	lsrs	r3, r3, #8
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	4904      	ldr	r1, [pc, #16]	@ (8003de0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dce:	5ccb      	ldrb	r3, [r1, r3]
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	0800530c 	.word	0x0800530c

08003de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003de8:	f7ff ffda 	bl	8003da0 <HAL_RCC_GetHCLKFreq>
 8003dec:	4602      	mov	r2, r0
 8003dee:	4b06      	ldr	r3, [pc, #24]	@ (8003e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	0adb      	lsrs	r3, r3, #11
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	4904      	ldr	r1, [pc, #16]	@ (8003e0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dfa:	5ccb      	ldrb	r3, [r1, r3]
 8003dfc:	f003 031f 	and.w	r3, r3, #31
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	0800530c 	.word	0x0800530c

08003e10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e18:	2300      	movs	r3, #0
 8003e1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e28:	f7ff f9ee 	bl	8003208 <HAL_PWREx_GetVoltageRange>
 8003e2c:	6178      	str	r0, [r7, #20]
 8003e2e:	e014      	b.n	8003e5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e30:	4b25      	ldr	r3, [pc, #148]	@ (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e34:	4a24      	ldr	r2, [pc, #144]	@ (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e3c:	4b22      	ldr	r3, [pc, #136]	@ (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e48:	f7ff f9de 	bl	8003208 <HAL_PWREx_GetVoltageRange>
 8003e4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e52:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e58:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e60:	d10b      	bne.n	8003e7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b80      	cmp	r3, #128	@ 0x80
 8003e66:	d919      	bls.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e6c:	d902      	bls.n	8003e74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e6e:	2302      	movs	r3, #2
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	e013      	b.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e74:	2301      	movs	r3, #1
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	e010      	b.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b80      	cmp	r3, #128	@ 0x80
 8003e7e:	d902      	bls.n	8003e86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e80:	2303      	movs	r3, #3
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	e00a      	b.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b80      	cmp	r3, #128	@ 0x80
 8003e8a:	d102      	bne.n	8003e92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	e004      	b.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b70      	cmp	r3, #112	@ 0x70
 8003e96:	d101      	bne.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e98:	2301      	movs	r3, #1
 8003e9a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f023 0207 	bic.w	r2, r3, #7
 8003ea4:	4909      	ldr	r1, [pc, #36]	@ (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003eac:	4b07      	ldr	r3, [pc, #28]	@ (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d001      	beq.n	8003ebe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40022000 	.word	0x40022000

08003ed0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ed8:	2300      	movs	r3, #0
 8003eda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003edc:	2300      	movs	r3, #0
 8003ede:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d041      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ef0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ef4:	d02a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ef6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003efa:	d824      	bhi.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003efc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f00:	d008      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f06:	d81e      	bhi.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f10:	d010      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f12:	e018      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f14:	4b86      	ldr	r3, [pc, #536]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4a85      	ldr	r2, [pc, #532]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f20:	e015      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3304      	adds	r3, #4
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fabb 	bl	80044a4 <RCCEx_PLLSAI1_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f32:	e00c      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3320      	adds	r3, #32
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fba6 	bl	800468c <RCCEx_PLLSAI2_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f44:	e003      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	74fb      	strb	r3, [r7, #19]
      break;
 8003f4a:	e000      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4e:	7cfb      	ldrb	r3, [r7, #19]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10b      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f54:	4b76      	ldr	r3, [pc, #472]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f62:	4973      	ldr	r1, [pc, #460]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f6a:	e001      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	7cfb      	ldrb	r3, [r7, #19]
 8003f6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d041      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f84:	d02a      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f8a:	d824      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f90:	d008      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f96:	d81e      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fa0:	d010      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fa2:	e018      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fa4:	4b62      	ldr	r3, [pc, #392]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4a61      	ldr	r2, [pc, #388]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fb0:	e015      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fa73 	bl	80044a4 <RCCEx_PLLSAI1_Config>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fc2:	e00c      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3320      	adds	r3, #32
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fb5e 	bl	800468c <RCCEx_PLLSAI2_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fd4:	e003      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	74fb      	strb	r3, [r7, #19]
      break;
 8003fda:	e000      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fde:	7cfb      	ldrb	r3, [r7, #19]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fe4:	4b52      	ldr	r3, [pc, #328]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ff2:	494f      	ldr	r1, [pc, #316]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ffa:	e001      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80a0 	beq.w	800414e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800400e:	2300      	movs	r3, #0
 8004010:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004012:	4b47      	ldr	r3, [pc, #284]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004022:	2300      	movs	r3, #0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00d      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004028:	4b41      	ldr	r3, [pc, #260]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402c:	4a40      	ldr	r2, [pc, #256]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800402e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004032:	6593      	str	r3, [r2, #88]	@ 0x58
 8004034:	4b3e      	ldr	r3, [pc, #248]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004040:	2301      	movs	r3, #1
 8004042:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004044:	4b3b      	ldr	r3, [pc, #236]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a3a      	ldr	r2, [pc, #232]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800404a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800404e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004050:	f7fd fad2 	bl	80015f8 <HAL_GetTick>
 8004054:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004056:	e009      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004058:	f7fd face 	bl	80015f8 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d902      	bls.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	74fb      	strb	r3, [r7, #19]
        break;
 800406a:	e005      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800406c:	4b31      	ldr	r3, [pc, #196]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0ef      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004078:	7cfb      	ldrb	r3, [r7, #19]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d15c      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800407e:	4b2c      	ldr	r3, [pc, #176]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004084:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004088:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01f      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	429a      	cmp	r2, r3
 800409a:	d019      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800409c:	4b24      	ldr	r3, [pc, #144]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040a8:	4b21      	ldr	r3, [pc, #132]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ae:	4a20      	ldr	r2, [pc, #128]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040be:	4a1c      	ldr	r2, [pc, #112]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040c8:	4a19      	ldr	r2, [pc, #100]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d016      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040da:	f7fd fa8d 	bl	80015f8 <HAL_GetTick>
 80040de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e0:	e00b      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e2:	f7fd fa89 	bl	80015f8 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d902      	bls.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	74fb      	strb	r3, [r7, #19]
            break;
 80040f8:	e006      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0ec      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004108:	7cfb      	ldrb	r3, [r7, #19]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10c      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800410e:	4b08      	ldr	r3, [pc, #32]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004114:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800411e:	4904      	ldr	r1, [pc, #16]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004126:	e009      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	74bb      	strb	r3, [r7, #18]
 800412c:	e006      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800412e:	bf00      	nop
 8004130:	40021000 	.word	0x40021000
 8004134:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004138:	7cfb      	ldrb	r3, [r7, #19]
 800413a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800413c:	7c7b      	ldrb	r3, [r7, #17]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d105      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004142:	4b9e      	ldr	r3, [pc, #632]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004146:	4a9d      	ldr	r2, [pc, #628]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004148:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800414c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800415a:	4b98      	ldr	r3, [pc, #608]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004160:	f023 0203 	bic.w	r2, r3, #3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004168:	4994      	ldr	r1, [pc, #592]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800417c:	4b8f      	ldr	r3, [pc, #572]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004182:	f023 020c 	bic.w	r2, r3, #12
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418a:	498c      	ldr	r1, [pc, #560]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800419e:	4b87      	ldr	r3, [pc, #540]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ac:	4983      	ldr	r1, [pc, #524]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041c0:	4b7e      	ldr	r3, [pc, #504]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ce:	497b      	ldr	r1, [pc, #492]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0310 	and.w	r3, r3, #16
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041e2:	4b76      	ldr	r3, [pc, #472]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f0:	4972      	ldr	r1, [pc, #456]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004204:	4b6d      	ldr	r3, [pc, #436]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004212:	496a      	ldr	r1, [pc, #424]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004226:	4b65      	ldr	r3, [pc, #404]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004234:	4961      	ldr	r1, [pc, #388]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004248:	4b5c      	ldr	r3, [pc, #368]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004256:	4959      	ldr	r1, [pc, #356]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800426a:	4b54      	ldr	r3, [pc, #336]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004270:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004278:	4950      	ldr	r1, [pc, #320]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800428c:	4b4b      	ldr	r3, [pc, #300]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004292:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429a:	4948      	ldr	r1, [pc, #288]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042ae:	4b43      	ldr	r3, [pc, #268]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042bc:	493f      	ldr	r1, [pc, #252]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d028      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042d0:	4b3a      	ldr	r3, [pc, #232]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042de:	4937      	ldr	r1, [pc, #220]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042ee:	d106      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042f0:	4b32      	ldr	r3, [pc, #200]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4a31      	ldr	r2, [pc, #196]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042fa:	60d3      	str	r3, [r2, #12]
 80042fc:	e011      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004302:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004306:	d10c      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3304      	adds	r3, #4
 800430c:	2101      	movs	r1, #1
 800430e:	4618      	mov	r0, r3
 8004310:	f000 f8c8 	bl	80044a4 <RCCEx_PLLSAI1_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004318:	7cfb      	ldrb	r3, [r7, #19]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800431e:	7cfb      	ldrb	r3, [r7, #19]
 8004320:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d028      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800432e:	4b23      	ldr	r3, [pc, #140]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004334:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433c:	491f      	ldr	r1, [pc, #124]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004348:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800434c:	d106      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800434e:	4b1b      	ldr	r3, [pc, #108]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	4a1a      	ldr	r2, [pc, #104]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004354:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004358:	60d3      	str	r3, [r2, #12]
 800435a:	e011      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004360:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004364:	d10c      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3304      	adds	r3, #4
 800436a:	2101      	movs	r1, #1
 800436c:	4618      	mov	r0, r3
 800436e:	f000 f899 	bl	80044a4 <RCCEx_PLLSAI1_Config>
 8004372:	4603      	mov	r3, r0
 8004374:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004376:	7cfb      	ldrb	r3, [r7, #19]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800437c:	7cfb      	ldrb	r3, [r7, #19]
 800437e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d02b      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800438c:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004392:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800439a:	4908      	ldr	r1, [pc, #32]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043aa:	d109      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043ac:	4b03      	ldr	r3, [pc, #12]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a02      	ldr	r2, [pc, #8]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043b6:	60d3      	str	r3, [r2, #12]
 80043b8:	e014      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043ba:	bf00      	nop
 80043bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043c8:	d10c      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3304      	adds	r3, #4
 80043ce:	2101      	movs	r1, #1
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 f867 	bl	80044a4 <RCCEx_PLLSAI1_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043da:	7cfb      	ldrb	r3, [r7, #19]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80043e0:	7cfb      	ldrb	r3, [r7, #19]
 80043e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d02f      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043f0:	4b2b      	ldr	r3, [pc, #172]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043fe:	4928      	ldr	r1, [pc, #160]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800440a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800440e:	d10d      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3304      	adds	r3, #4
 8004414:	2102      	movs	r1, #2
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f844 	bl	80044a4 <RCCEx_PLLSAI1_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d014      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004426:	7cfb      	ldrb	r3, [r7, #19]
 8004428:	74bb      	strb	r3, [r7, #18]
 800442a:	e011      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004434:	d10c      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3320      	adds	r3, #32
 800443a:	2102      	movs	r1, #2
 800443c:	4618      	mov	r0, r3
 800443e:	f000 f925 	bl	800468c <RCCEx_PLLSAI2_Config>
 8004442:	4603      	mov	r3, r0
 8004444:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004446:	7cfb      	ldrb	r3, [r7, #19]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800444c:	7cfb      	ldrb	r3, [r7, #19]
 800444e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800445c:	4b10      	ldr	r3, [pc, #64]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004462:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800446a:	490d      	ldr	r1, [pc, #52]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00b      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800447e:	4b08      	ldr	r3, [pc, #32]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004484:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800448e:	4904      	ldr	r1, [pc, #16]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004496:	7cbb      	ldrb	r3, [r7, #18]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40021000 	.word	0x40021000

080044a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044b2:	4b75      	ldr	r3, [pc, #468]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d018      	beq.n	80044f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044be:	4b72      	ldr	r3, [pc, #456]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f003 0203 	and.w	r2, r3, #3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d10d      	bne.n	80044ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
       ||
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d009      	beq.n	80044ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044d6:	4b6c      	ldr	r3, [pc, #432]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	091b      	lsrs	r3, r3, #4
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
       ||
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d047      	beq.n	800457a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
 80044ee:	e044      	b.n	800457a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d018      	beq.n	800452a <RCCEx_PLLSAI1_Config+0x86>
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d825      	bhi.n	8004548 <RCCEx_PLLSAI1_Config+0xa4>
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d002      	beq.n	8004506 <RCCEx_PLLSAI1_Config+0x62>
 8004500:	2b02      	cmp	r3, #2
 8004502:	d009      	beq.n	8004518 <RCCEx_PLLSAI1_Config+0x74>
 8004504:	e020      	b.n	8004548 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004506:	4b60      	ldr	r3, [pc, #384]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d11d      	bne.n	800454e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004516:	e01a      	b.n	800454e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004518:	4b5b      	ldr	r3, [pc, #364]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004520:	2b00      	cmp	r3, #0
 8004522:	d116      	bne.n	8004552 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004528:	e013      	b.n	8004552 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800452a:	4b57      	ldr	r3, [pc, #348]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10f      	bne.n	8004556 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004536:	4b54      	ldr	r3, [pc, #336]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d109      	bne.n	8004556 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004546:	e006      	b.n	8004556 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	73fb      	strb	r3, [r7, #15]
      break;
 800454c:	e004      	b.n	8004558 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800454e:	bf00      	nop
 8004550:	e002      	b.n	8004558 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004552:	bf00      	nop
 8004554:	e000      	b.n	8004558 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004556:	bf00      	nop
    }

    if(status == HAL_OK)
 8004558:	7bfb      	ldrb	r3, [r7, #15]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10d      	bne.n	800457a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800455e:	4b4a      	ldr	r3, [pc, #296]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6819      	ldr	r1, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	3b01      	subs	r3, #1
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	430b      	orrs	r3, r1
 8004574:	4944      	ldr	r1, [pc, #272]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004576:	4313      	orrs	r3, r2
 8004578:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d17d      	bne.n	800467c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004580:	4b41      	ldr	r3, [pc, #260]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a40      	ldr	r2, [pc, #256]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004586:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800458a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458c:	f7fd f834 	bl	80015f8 <HAL_GetTick>
 8004590:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004592:	e009      	b.n	80045a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004594:	f7fd f830 	bl	80015f8 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d902      	bls.n	80045a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	73fb      	strb	r3, [r7, #15]
        break;
 80045a6:	e005      	b.n	80045b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045a8:	4b37      	ldr	r3, [pc, #220]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1ef      	bne.n	8004594 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d160      	bne.n	800467c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d111      	bne.n	80045e4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045c0:	4b31      	ldr	r3, [pc, #196]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80045c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6892      	ldr	r2, [r2, #8]
 80045d0:	0211      	lsls	r1, r2, #8
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	68d2      	ldr	r2, [r2, #12]
 80045d6:	0912      	lsrs	r2, r2, #4
 80045d8:	0452      	lsls	r2, r2, #17
 80045da:	430a      	orrs	r2, r1
 80045dc:	492a      	ldr	r1, [pc, #168]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	610b      	str	r3, [r1, #16]
 80045e2:	e027      	b.n	8004634 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d112      	bne.n	8004610 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045ea:	4b27      	ldr	r3, [pc, #156]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80045f2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6892      	ldr	r2, [r2, #8]
 80045fa:	0211      	lsls	r1, r2, #8
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6912      	ldr	r2, [r2, #16]
 8004600:	0852      	lsrs	r2, r2, #1
 8004602:	3a01      	subs	r2, #1
 8004604:	0552      	lsls	r2, r2, #21
 8004606:	430a      	orrs	r2, r1
 8004608:	491f      	ldr	r1, [pc, #124]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800460a:	4313      	orrs	r3, r2
 800460c:	610b      	str	r3, [r1, #16]
 800460e:	e011      	b.n	8004634 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004610:	4b1d      	ldr	r3, [pc, #116]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004618:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6892      	ldr	r2, [r2, #8]
 8004620:	0211      	lsls	r1, r2, #8
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6952      	ldr	r2, [r2, #20]
 8004626:	0852      	lsrs	r2, r2, #1
 8004628:	3a01      	subs	r2, #1
 800462a:	0652      	lsls	r2, r2, #25
 800462c:	430a      	orrs	r2, r1
 800462e:	4916      	ldr	r1, [pc, #88]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004630:	4313      	orrs	r3, r2
 8004632:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004634:	4b14      	ldr	r3, [pc, #80]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a13      	ldr	r2, [pc, #76]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800463a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800463e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004640:	f7fc ffda 	bl	80015f8 <HAL_GetTick>
 8004644:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004646:	e009      	b.n	800465c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004648:	f7fc ffd6 	bl	80015f8 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d902      	bls.n	800465c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	73fb      	strb	r3, [r7, #15]
          break;
 800465a:	e005      	b.n	8004668 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800465c:	4b0a      	ldr	r3, [pc, #40]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0ef      	beq.n	8004648 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800466e:	4b06      	ldr	r3, [pc, #24]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	4904      	ldr	r1, [pc, #16]	@ (8004688 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004678:	4313      	orrs	r3, r2
 800467a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40021000 	.word	0x40021000

0800468c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800469a:	4b6a      	ldr	r3, [pc, #424]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d018      	beq.n	80046d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046a6:	4b67      	ldr	r3, [pc, #412]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f003 0203 	and.w	r2, r3, #3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d10d      	bne.n	80046d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
       ||
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d009      	beq.n	80046d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046be:	4b61      	ldr	r3, [pc, #388]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	091b      	lsrs	r3, r3, #4
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
       ||
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d047      	beq.n	8004762 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	73fb      	strb	r3, [r7, #15]
 80046d6:	e044      	b.n	8004762 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d018      	beq.n	8004712 <RCCEx_PLLSAI2_Config+0x86>
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d825      	bhi.n	8004730 <RCCEx_PLLSAI2_Config+0xa4>
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d002      	beq.n	80046ee <RCCEx_PLLSAI2_Config+0x62>
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d009      	beq.n	8004700 <RCCEx_PLLSAI2_Config+0x74>
 80046ec:	e020      	b.n	8004730 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046ee:	4b55      	ldr	r3, [pc, #340]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d11d      	bne.n	8004736 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046fe:	e01a      	b.n	8004736 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004700:	4b50      	ldr	r3, [pc, #320]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004708:	2b00      	cmp	r3, #0
 800470a:	d116      	bne.n	800473a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004710:	e013      	b.n	800473a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004712:	4b4c      	ldr	r3, [pc, #304]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10f      	bne.n	800473e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800471e:	4b49      	ldr	r3, [pc, #292]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d109      	bne.n	800473e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800472e:	e006      	b.n	800473e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	73fb      	strb	r3, [r7, #15]
      break;
 8004734:	e004      	b.n	8004740 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004736:	bf00      	nop
 8004738:	e002      	b.n	8004740 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800473a:	bf00      	nop
 800473c:	e000      	b.n	8004740 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800473e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10d      	bne.n	8004762 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004746:	4b3f      	ldr	r3, [pc, #252]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6819      	ldr	r1, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	3b01      	subs	r3, #1
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	430b      	orrs	r3, r1
 800475c:	4939      	ldr	r1, [pc, #228]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800475e:	4313      	orrs	r3, r2
 8004760:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d167      	bne.n	8004838 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004768:	4b36      	ldr	r3, [pc, #216]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a35      	ldr	r2, [pc, #212]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800476e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004772:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004774:	f7fc ff40 	bl	80015f8 <HAL_GetTick>
 8004778:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800477a:	e009      	b.n	8004790 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800477c:	f7fc ff3c 	bl	80015f8 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d902      	bls.n	8004790 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	73fb      	strb	r3, [r7, #15]
        break;
 800478e:	e005      	b.n	800479c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004790:	4b2c      	ldr	r3, [pc, #176]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1ef      	bne.n	800477c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d14a      	bne.n	8004838 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d111      	bne.n	80047cc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047a8:	4b26      	ldr	r3, [pc, #152]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80047b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6892      	ldr	r2, [r2, #8]
 80047b8:	0211      	lsls	r1, r2, #8
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	68d2      	ldr	r2, [r2, #12]
 80047be:	0912      	lsrs	r2, r2, #4
 80047c0:	0452      	lsls	r2, r2, #17
 80047c2:	430a      	orrs	r2, r1
 80047c4:	491f      	ldr	r1, [pc, #124]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	614b      	str	r3, [r1, #20]
 80047ca:	e011      	b.n	80047f0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80047d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6892      	ldr	r2, [r2, #8]
 80047dc:	0211      	lsls	r1, r2, #8
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6912      	ldr	r2, [r2, #16]
 80047e2:	0852      	lsrs	r2, r2, #1
 80047e4:	3a01      	subs	r2, #1
 80047e6:	0652      	lsls	r2, r2, #25
 80047e8:	430a      	orrs	r2, r1
 80047ea:	4916      	ldr	r1, [pc, #88]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047f0:	4b14      	ldr	r3, [pc, #80]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a13      	ldr	r2, [pc, #76]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fc:	f7fc fefc 	bl	80015f8 <HAL_GetTick>
 8004800:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004802:	e009      	b.n	8004818 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004804:	f7fc fef8 	bl	80015f8 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d902      	bls.n	8004818 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	73fb      	strb	r3, [r7, #15]
          break;
 8004816:	e005      	b.n	8004824 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004818:	4b0a      	ldr	r3, [pc, #40]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0ef      	beq.n	8004804 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800482a:	4b06      	ldr	r3, [pc, #24]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 800482c:	695a      	ldr	r2, [r3, #20]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	4904      	ldr	r1, [pc, #16]	@ (8004844 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004834:	4313      	orrs	r3, r2
 8004836:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004838:	7bfb      	ldrb	r3, [r7, #15]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40021000 	.word	0x40021000

08004848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e040      	b.n	80048dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fc fd8c 	bl	8001388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2224      	movs	r2, #36	@ 0x24
 8004874:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fae0 	bl	8004e54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f825 	bl	80048e4 <UART_SetConfig>
 800489a:	4603      	mov	r3, r0
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e01b      	b.n	80048dc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fb5f 	bl	8004f98 <UART_CheckIdleState>
 80048da:	4603      	mov	r3, r0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e8:	b08a      	sub	sp, #40	@ 0x28
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	431a      	orrs	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	431a      	orrs	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	4313      	orrs	r3, r2
 800490a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	4ba4      	ldr	r3, [pc, #656]	@ (8004ba4 <UART_SetConfig+0x2c0>)
 8004914:	4013      	ands	r3, r2
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800491c:	430b      	orrs	r3, r1
 800491e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a99      	ldr	r2, [pc, #612]	@ (8004ba8 <UART_SetConfig+0x2c4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d004      	beq.n	8004950 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800494c:	4313      	orrs	r3, r2
 800494e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004960:	430a      	orrs	r2, r1
 8004962:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a90      	ldr	r2, [pc, #576]	@ (8004bac <UART_SetConfig+0x2c8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d126      	bne.n	80049bc <UART_SetConfig+0xd8>
 800496e:	4b90      	ldr	r3, [pc, #576]	@ (8004bb0 <UART_SetConfig+0x2cc>)
 8004970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	2b03      	cmp	r3, #3
 800497a:	d81b      	bhi.n	80049b4 <UART_SetConfig+0xd0>
 800497c:	a201      	add	r2, pc, #4	@ (adr r2, 8004984 <UART_SetConfig+0xa0>)
 800497e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004982:	bf00      	nop
 8004984:	08004995 	.word	0x08004995
 8004988:	080049a5 	.word	0x080049a5
 800498c:	0800499d 	.word	0x0800499d
 8004990:	080049ad 	.word	0x080049ad
 8004994:	2301      	movs	r3, #1
 8004996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800499a:	e116      	b.n	8004bca <UART_SetConfig+0x2e6>
 800499c:	2302      	movs	r3, #2
 800499e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a2:	e112      	b.n	8004bca <UART_SetConfig+0x2e6>
 80049a4:	2304      	movs	r3, #4
 80049a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049aa:	e10e      	b.n	8004bca <UART_SetConfig+0x2e6>
 80049ac:	2308      	movs	r3, #8
 80049ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b2:	e10a      	b.n	8004bca <UART_SetConfig+0x2e6>
 80049b4:	2310      	movs	r3, #16
 80049b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ba:	e106      	b.n	8004bca <UART_SetConfig+0x2e6>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a7c      	ldr	r2, [pc, #496]	@ (8004bb4 <UART_SetConfig+0x2d0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d138      	bne.n	8004a38 <UART_SetConfig+0x154>
 80049c6:	4b7a      	ldr	r3, [pc, #488]	@ (8004bb0 <UART_SetConfig+0x2cc>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049cc:	f003 030c 	and.w	r3, r3, #12
 80049d0:	2b0c      	cmp	r3, #12
 80049d2:	d82d      	bhi.n	8004a30 <UART_SetConfig+0x14c>
 80049d4:	a201      	add	r2, pc, #4	@ (adr r2, 80049dc <UART_SetConfig+0xf8>)
 80049d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049da:	bf00      	nop
 80049dc:	08004a11 	.word	0x08004a11
 80049e0:	08004a31 	.word	0x08004a31
 80049e4:	08004a31 	.word	0x08004a31
 80049e8:	08004a31 	.word	0x08004a31
 80049ec:	08004a21 	.word	0x08004a21
 80049f0:	08004a31 	.word	0x08004a31
 80049f4:	08004a31 	.word	0x08004a31
 80049f8:	08004a31 	.word	0x08004a31
 80049fc:	08004a19 	.word	0x08004a19
 8004a00:	08004a31 	.word	0x08004a31
 8004a04:	08004a31 	.word	0x08004a31
 8004a08:	08004a31 	.word	0x08004a31
 8004a0c:	08004a29 	.word	0x08004a29
 8004a10:	2300      	movs	r3, #0
 8004a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a16:	e0d8      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a1e:	e0d4      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004a20:	2304      	movs	r3, #4
 8004a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a26:	e0d0      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004a28:	2308      	movs	r3, #8
 8004a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a2e:	e0cc      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004a30:	2310      	movs	r3, #16
 8004a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a36:	e0c8      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a5e      	ldr	r2, [pc, #376]	@ (8004bb8 <UART_SetConfig+0x2d4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d125      	bne.n	8004a8e <UART_SetConfig+0x1aa>
 8004a42:	4b5b      	ldr	r3, [pc, #364]	@ (8004bb0 <UART_SetConfig+0x2cc>)
 8004a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a48:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a4c:	2b30      	cmp	r3, #48	@ 0x30
 8004a4e:	d016      	beq.n	8004a7e <UART_SetConfig+0x19a>
 8004a50:	2b30      	cmp	r3, #48	@ 0x30
 8004a52:	d818      	bhi.n	8004a86 <UART_SetConfig+0x1a2>
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d00a      	beq.n	8004a6e <UART_SetConfig+0x18a>
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d814      	bhi.n	8004a86 <UART_SetConfig+0x1a2>
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <UART_SetConfig+0x182>
 8004a60:	2b10      	cmp	r3, #16
 8004a62:	d008      	beq.n	8004a76 <UART_SetConfig+0x192>
 8004a64:	e00f      	b.n	8004a86 <UART_SetConfig+0x1a2>
 8004a66:	2300      	movs	r3, #0
 8004a68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6c:	e0ad      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a74:	e0a9      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004a76:	2304      	movs	r3, #4
 8004a78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a7c:	e0a5      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004a7e:	2308      	movs	r3, #8
 8004a80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a84:	e0a1      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004a86:	2310      	movs	r3, #16
 8004a88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a8c:	e09d      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a4a      	ldr	r2, [pc, #296]	@ (8004bbc <UART_SetConfig+0x2d8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d125      	bne.n	8004ae4 <UART_SetConfig+0x200>
 8004a98:	4b45      	ldr	r3, [pc, #276]	@ (8004bb0 <UART_SetConfig+0x2cc>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004aa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004aa4:	d016      	beq.n	8004ad4 <UART_SetConfig+0x1f0>
 8004aa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004aa8:	d818      	bhi.n	8004adc <UART_SetConfig+0x1f8>
 8004aaa:	2b80      	cmp	r3, #128	@ 0x80
 8004aac:	d00a      	beq.n	8004ac4 <UART_SetConfig+0x1e0>
 8004aae:	2b80      	cmp	r3, #128	@ 0x80
 8004ab0:	d814      	bhi.n	8004adc <UART_SetConfig+0x1f8>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <UART_SetConfig+0x1d8>
 8004ab6:	2b40      	cmp	r3, #64	@ 0x40
 8004ab8:	d008      	beq.n	8004acc <UART_SetConfig+0x1e8>
 8004aba:	e00f      	b.n	8004adc <UART_SetConfig+0x1f8>
 8004abc:	2300      	movs	r3, #0
 8004abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac2:	e082      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aca:	e07e      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004acc:	2304      	movs	r3, #4
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ad2:	e07a      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ada:	e076      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004adc:	2310      	movs	r3, #16
 8004ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ae2:	e072      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a35      	ldr	r2, [pc, #212]	@ (8004bc0 <UART_SetConfig+0x2dc>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d12a      	bne.n	8004b44 <UART_SetConfig+0x260>
 8004aee:	4b30      	ldr	r3, [pc, #192]	@ (8004bb0 <UART_SetConfig+0x2cc>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004af8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004afc:	d01a      	beq.n	8004b34 <UART_SetConfig+0x250>
 8004afe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b02:	d81b      	bhi.n	8004b3c <UART_SetConfig+0x258>
 8004b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b08:	d00c      	beq.n	8004b24 <UART_SetConfig+0x240>
 8004b0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b0e:	d815      	bhi.n	8004b3c <UART_SetConfig+0x258>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <UART_SetConfig+0x238>
 8004b14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b18:	d008      	beq.n	8004b2c <UART_SetConfig+0x248>
 8004b1a:	e00f      	b.n	8004b3c <UART_SetConfig+0x258>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b22:	e052      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004b24:	2302      	movs	r3, #2
 8004b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b2a:	e04e      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b32:	e04a      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004b34:	2308      	movs	r3, #8
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b3a:	e046      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b42:	e042      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a17      	ldr	r2, [pc, #92]	@ (8004ba8 <UART_SetConfig+0x2c4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d13a      	bne.n	8004bc4 <UART_SetConfig+0x2e0>
 8004b4e:	4b18      	ldr	r3, [pc, #96]	@ (8004bb0 <UART_SetConfig+0x2cc>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b5c:	d01a      	beq.n	8004b94 <UART_SetConfig+0x2b0>
 8004b5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b62:	d81b      	bhi.n	8004b9c <UART_SetConfig+0x2b8>
 8004b64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b68:	d00c      	beq.n	8004b84 <UART_SetConfig+0x2a0>
 8004b6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b6e:	d815      	bhi.n	8004b9c <UART_SetConfig+0x2b8>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <UART_SetConfig+0x298>
 8004b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b78:	d008      	beq.n	8004b8c <UART_SetConfig+0x2a8>
 8004b7a:	e00f      	b.n	8004b9c <UART_SetConfig+0x2b8>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b82:	e022      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004b84:	2302      	movs	r3, #2
 8004b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b8a:	e01e      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b92:	e01a      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004b94:	2308      	movs	r3, #8
 8004b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b9a:	e016      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ba2:	e012      	b.n	8004bca <UART_SetConfig+0x2e6>
 8004ba4:	efff69f3 	.word	0xefff69f3
 8004ba8:	40008000 	.word	0x40008000
 8004bac:	40013800 	.word	0x40013800
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	40004400 	.word	0x40004400
 8004bb8:	40004800 	.word	0x40004800
 8004bbc:	40004c00 	.word	0x40004c00
 8004bc0:	40005000 	.word	0x40005000
 8004bc4:	2310      	movs	r3, #16
 8004bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a9f      	ldr	r2, [pc, #636]	@ (8004e4c <UART_SetConfig+0x568>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d17a      	bne.n	8004cca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d824      	bhi.n	8004c26 <UART_SetConfig+0x342>
 8004bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8004be4 <UART_SetConfig+0x300>)
 8004bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be2:	bf00      	nop
 8004be4:	08004c09 	.word	0x08004c09
 8004be8:	08004c27 	.word	0x08004c27
 8004bec:	08004c11 	.word	0x08004c11
 8004bf0:	08004c27 	.word	0x08004c27
 8004bf4:	08004c17 	.word	0x08004c17
 8004bf8:	08004c27 	.word	0x08004c27
 8004bfc:	08004c27 	.word	0x08004c27
 8004c00:	08004c27 	.word	0x08004c27
 8004c04:	08004c1f 	.word	0x08004c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c08:	f7ff f8d6 	bl	8003db8 <HAL_RCC_GetPCLK1Freq>
 8004c0c:	61f8      	str	r0, [r7, #28]
        break;
 8004c0e:	e010      	b.n	8004c32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c10:	4b8f      	ldr	r3, [pc, #572]	@ (8004e50 <UART_SetConfig+0x56c>)
 8004c12:	61fb      	str	r3, [r7, #28]
        break;
 8004c14:	e00d      	b.n	8004c32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c16:	f7ff f837 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8004c1a:	61f8      	str	r0, [r7, #28]
        break;
 8004c1c:	e009      	b.n	8004c32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c22:	61fb      	str	r3, [r7, #28]
        break;
 8004c24:	e005      	b.n	8004c32 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 80fb 	beq.w	8004e30 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	4413      	add	r3, r2
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d305      	bcc.n	8004c56 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d903      	bls.n	8004c5e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c5c:	e0e8      	b.n	8004e30 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	2200      	movs	r2, #0
 8004c62:	461c      	mov	r4, r3
 8004c64:	4615      	mov	r5, r2
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	022b      	lsls	r3, r5, #8
 8004c70:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c74:	0222      	lsls	r2, r4, #8
 8004c76:	68f9      	ldr	r1, [r7, #12]
 8004c78:	6849      	ldr	r1, [r1, #4]
 8004c7a:	0849      	lsrs	r1, r1, #1
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	4688      	mov	r8, r1
 8004c80:	4681      	mov	r9, r0
 8004c82:	eb12 0a08 	adds.w	sl, r2, r8
 8004c86:	eb43 0b09 	adc.w	fp, r3, r9
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	603b      	str	r3, [r7, #0]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c98:	4650      	mov	r0, sl
 8004c9a:	4659      	mov	r1, fp
 8004c9c:	f7fb fd9a 	bl	80007d4 <__aeabi_uldivmod>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cae:	d308      	bcc.n	8004cc2 <UART_SetConfig+0x3de>
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cb6:	d204      	bcs.n	8004cc2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	60da      	str	r2, [r3, #12]
 8004cc0:	e0b6      	b.n	8004e30 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004cc8:	e0b2      	b.n	8004e30 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cd2:	d15e      	bne.n	8004d92 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d828      	bhi.n	8004d2e <UART_SetConfig+0x44a>
 8004cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce4 <UART_SetConfig+0x400>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004d09 	.word	0x08004d09
 8004ce8:	08004d11 	.word	0x08004d11
 8004cec:	08004d19 	.word	0x08004d19
 8004cf0:	08004d2f 	.word	0x08004d2f
 8004cf4:	08004d1f 	.word	0x08004d1f
 8004cf8:	08004d2f 	.word	0x08004d2f
 8004cfc:	08004d2f 	.word	0x08004d2f
 8004d00:	08004d2f 	.word	0x08004d2f
 8004d04:	08004d27 	.word	0x08004d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d08:	f7ff f856 	bl	8003db8 <HAL_RCC_GetPCLK1Freq>
 8004d0c:	61f8      	str	r0, [r7, #28]
        break;
 8004d0e:	e014      	b.n	8004d3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d10:	f7ff f868 	bl	8003de4 <HAL_RCC_GetPCLK2Freq>
 8004d14:	61f8      	str	r0, [r7, #28]
        break;
 8004d16:	e010      	b.n	8004d3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d18:	4b4d      	ldr	r3, [pc, #308]	@ (8004e50 <UART_SetConfig+0x56c>)
 8004d1a:	61fb      	str	r3, [r7, #28]
        break;
 8004d1c:	e00d      	b.n	8004d3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d1e:	f7fe ffb3 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8004d22:	61f8      	str	r0, [r7, #28]
        break;
 8004d24:	e009      	b.n	8004d3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d2a:	61fb      	str	r3, [r7, #28]
        break;
 8004d2c:	e005      	b.n	8004d3a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d077      	beq.n	8004e30 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	005a      	lsls	r2, r3, #1
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	085b      	lsrs	r3, r3, #1
 8004d4a:	441a      	add	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	2b0f      	cmp	r3, #15
 8004d5a:	d916      	bls.n	8004d8a <UART_SetConfig+0x4a6>
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d62:	d212      	bcs.n	8004d8a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f023 030f 	bic.w	r3, r3, #15
 8004d6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	085b      	lsrs	r3, r3, #1
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	8afb      	ldrh	r3, [r7, #22]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	8afa      	ldrh	r2, [r7, #22]
 8004d86:	60da      	str	r2, [r3, #12]
 8004d88:	e052      	b.n	8004e30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d90:	e04e      	b.n	8004e30 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d827      	bhi.n	8004dea <UART_SetConfig+0x506>
 8004d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004da0 <UART_SetConfig+0x4bc>)
 8004d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da0:	08004dc5 	.word	0x08004dc5
 8004da4:	08004dcd 	.word	0x08004dcd
 8004da8:	08004dd5 	.word	0x08004dd5
 8004dac:	08004deb 	.word	0x08004deb
 8004db0:	08004ddb 	.word	0x08004ddb
 8004db4:	08004deb 	.word	0x08004deb
 8004db8:	08004deb 	.word	0x08004deb
 8004dbc:	08004deb 	.word	0x08004deb
 8004dc0:	08004de3 	.word	0x08004de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc4:	f7fe fff8 	bl	8003db8 <HAL_RCC_GetPCLK1Freq>
 8004dc8:	61f8      	str	r0, [r7, #28]
        break;
 8004dca:	e014      	b.n	8004df6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dcc:	f7ff f80a 	bl	8003de4 <HAL_RCC_GetPCLK2Freq>
 8004dd0:	61f8      	str	r0, [r7, #28]
        break;
 8004dd2:	e010      	b.n	8004df6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8004e50 <UART_SetConfig+0x56c>)
 8004dd6:	61fb      	str	r3, [r7, #28]
        break;
 8004dd8:	e00d      	b.n	8004df6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dda:	f7fe ff55 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8004dde:	61f8      	str	r0, [r7, #28]
        break;
 8004de0:	e009      	b.n	8004df6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004de6:	61fb      	str	r3, [r7, #28]
        break;
 8004de8:	e005      	b.n	8004df6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004df4:	bf00      	nop
    }

    if (pclk != 0U)
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d019      	beq.n	8004e30 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	085a      	lsrs	r2, r3, #1
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	441a      	add	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	2b0f      	cmp	r3, #15
 8004e14:	d909      	bls.n	8004e2a <UART_SetConfig+0x546>
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e1c:	d205      	bcs.n	8004e2a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60da      	str	r2, [r3, #12]
 8004e28:	e002      	b.n	8004e30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e3c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3728      	adds	r7, #40	@ 0x28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40008000 	.word	0x40008000
 8004e50:	00f42400 	.word	0x00f42400

08004e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01a      	beq.n	8004f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f52:	d10a      	bne.n	8004f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
  }
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b098      	sub	sp, #96	@ 0x60
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fa8:	f7fc fb26 	bl	80015f8 <HAL_GetTick>
 8004fac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d12e      	bne.n	800501a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f88c 	bl	80050e8 <UART_WaitOnFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d021      	beq.n	800501a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fde:	e853 3f00 	ldrex	r3, [r3]
 8004fe2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fea:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ff4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ff6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e6      	bne.n	8004fd6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e062      	b.n	80050e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b04      	cmp	r3, #4
 8005026:	d149      	bne.n	80050bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005028:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005030:	2200      	movs	r2, #0
 8005032:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f856 	bl	80050e8 <UART_WaitOnFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d03c      	beq.n	80050bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504a:	e853 3f00 	ldrex	r3, [r3]
 800504e:	623b      	str	r3, [r7, #32]
   return(result);
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005056:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005060:	633b      	str	r3, [r7, #48]	@ 0x30
 8005062:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005064:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005068:	e841 2300 	strex	r3, r2, [r1]
 800506c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800506e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1e6      	bne.n	8005042 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3308      	adds	r3, #8
 800507a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	e853 3f00 	ldrex	r3, [r3]
 8005082:	60fb      	str	r3, [r7, #12]
   return(result);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0301 	bic.w	r3, r3, #1
 800508a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	3308      	adds	r3, #8
 8005092:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005094:	61fa      	str	r2, [r7, #28]
 8005096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005098:	69b9      	ldr	r1, [r7, #24]
 800509a:	69fa      	ldr	r2, [r7, #28]
 800509c:	e841 2300 	strex	r3, r2, [r1]
 80050a0:	617b      	str	r3, [r7, #20]
   return(result);
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1e5      	bne.n	8005074 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e011      	b.n	80050e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3758      	adds	r7, #88	@ 0x58
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	4613      	mov	r3, r2
 80050f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f8:	e04f      	b.n	800519a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005100:	d04b      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005102:	f7fc fa79 	bl	80015f8 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	429a      	cmp	r2, r3
 8005110:	d302      	bcc.n	8005118 <UART_WaitOnFlagUntilTimeout+0x30>
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e04e      	b.n	80051ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	d037      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0xb2>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b80      	cmp	r3, #128	@ 0x80
 800512e:	d034      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b40      	cmp	r3, #64	@ 0x40
 8005134:	d031      	beq.n	800519a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b08      	cmp	r3, #8
 8005142:	d110      	bne.n	8005166 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2208      	movs	r2, #8
 800514a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 f838 	bl	80051c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2208      	movs	r2, #8
 8005156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e029      	b.n	80051ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005174:	d111      	bne.n	800519a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800517e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f81e 	bl	80051c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e00f      	b.n	80051ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	4013      	ands	r3, r2
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	bf0c      	ite	eq
 80051aa:	2301      	moveq	r3, #1
 80051ac:	2300      	movne	r3, #0
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d0a0      	beq.n	80050fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b095      	sub	sp, #84	@ 0x54
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051f0:	e841 2300 	strex	r3, r2, [r1]
 80051f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e6      	bne.n	80051ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3308      	adds	r3, #8
 8005202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	61fb      	str	r3, [r7, #28]
   return(result);
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f023 0301 	bic.w	r3, r3, #1
 8005212:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	3308      	adds	r3, #8
 800521a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800521c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800521e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e5      	bne.n	80051fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005234:	2b01      	cmp	r3, #1
 8005236:	d118      	bne.n	800526a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	60bb      	str	r3, [r7, #8]
   return(result);
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f023 0310 	bic.w	r3, r3, #16
 800524c:	647b      	str	r3, [r7, #68]	@ 0x44
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005256:	61bb      	str	r3, [r7, #24]
 8005258:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	6979      	ldr	r1, [r7, #20]
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	613b      	str	r3, [r7, #16]
   return(result);
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e6      	bne.n	8005238 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2220      	movs	r2, #32
 800526e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800527e:	bf00      	nop
 8005280:	3754      	adds	r7, #84	@ 0x54
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <memset>:
 800528a:	4402      	add	r2, r0
 800528c:	4603      	mov	r3, r0
 800528e:	4293      	cmp	r3, r2
 8005290:	d100      	bne.n	8005294 <memset+0xa>
 8005292:	4770      	bx	lr
 8005294:	f803 1b01 	strb.w	r1, [r3], #1
 8005298:	e7f9      	b.n	800528e <memset+0x4>
	...

0800529c <__libc_init_array>:
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	4d0d      	ldr	r5, [pc, #52]	@ (80052d4 <__libc_init_array+0x38>)
 80052a0:	4c0d      	ldr	r4, [pc, #52]	@ (80052d8 <__libc_init_array+0x3c>)
 80052a2:	1b64      	subs	r4, r4, r5
 80052a4:	10a4      	asrs	r4, r4, #2
 80052a6:	2600      	movs	r6, #0
 80052a8:	42a6      	cmp	r6, r4
 80052aa:	d109      	bne.n	80052c0 <__libc_init_array+0x24>
 80052ac:	4d0b      	ldr	r5, [pc, #44]	@ (80052dc <__libc_init_array+0x40>)
 80052ae:	4c0c      	ldr	r4, [pc, #48]	@ (80052e0 <__libc_init_array+0x44>)
 80052b0:	f000 f818 	bl	80052e4 <_init>
 80052b4:	1b64      	subs	r4, r4, r5
 80052b6:	10a4      	asrs	r4, r4, #2
 80052b8:	2600      	movs	r6, #0
 80052ba:	42a6      	cmp	r6, r4
 80052bc:	d105      	bne.n	80052ca <__libc_init_array+0x2e>
 80052be:	bd70      	pop	{r4, r5, r6, pc}
 80052c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c4:	4798      	blx	r3
 80052c6:	3601      	adds	r6, #1
 80052c8:	e7ee      	b.n	80052a8 <__libc_init_array+0xc>
 80052ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ce:	4798      	blx	r3
 80052d0:	3601      	adds	r6, #1
 80052d2:	e7f2      	b.n	80052ba <__libc_init_array+0x1e>
 80052d4:	0800534c 	.word	0x0800534c
 80052d8:	0800534c 	.word	0x0800534c
 80052dc:	0800534c 	.word	0x0800534c
 80052e0:	08005350 	.word	0x08005350

080052e4 <_init>:
 80052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e6:	bf00      	nop
 80052e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ea:	bc08      	pop	{r3}
 80052ec:	469e      	mov	lr, r3
 80052ee:	4770      	bx	lr

080052f0 <_fini>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	bf00      	nop
 80052f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f6:	bc08      	pop	{r3}
 80052f8:	469e      	mov	lr, r3
 80052fa:	4770      	bx	lr
