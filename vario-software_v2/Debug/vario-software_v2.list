
vario-software_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000831c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080084b0  080084b0  000094b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085b0  080085b0  0000a068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080085b0  080085b0  000095b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085b8  080085b8  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085b8  080085b8  000095b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085bc  080085bc  000095bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080085c0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000068  08008628  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08008628  0000a3b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f14  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b4  00000000  00000000  0001cfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  0001f960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d8e  00000000  00000000  00020ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029683  00000000  00000000  0002186e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c02  00000000  00000000  0004aef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101313  00000000  00000000  0005faf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00160e06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056b8  00000000  00000000  00160e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00166504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008494 	.word	0x08008494

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08008494 	.word	0x08008494

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_ldivmod>:
 8000c28:	b97b      	cbnz	r3, 8000c4a <__aeabi_ldivmod+0x22>
 8000c2a:	b972      	cbnz	r2, 8000c4a <__aeabi_ldivmod+0x22>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bfbe      	ittt	lt
 8000c30:	2000      	movlt	r0, #0
 8000c32:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c36:	e006      	blt.n	8000c46 <__aeabi_ldivmod+0x1e>
 8000c38:	bf08      	it	eq
 8000c3a:	2800      	cmpeq	r0, #0
 8000c3c:	bf1c      	itt	ne
 8000c3e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c42:	f04f 30ff 	movne.w	r0, #4294967295
 8000c46:	f000 b9d3 	b.w	8000ff0 <__aeabi_idiv0>
 8000c4a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c4e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c52:	2900      	cmp	r1, #0
 8000c54:	db09      	blt.n	8000c6a <__aeabi_ldivmod+0x42>
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db1a      	blt.n	8000c90 <__aeabi_ldivmod+0x68>
 8000c5a:	f000 f84d 	bl	8000cf8 <__udivmoddi4>
 8000c5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c66:	b004      	add	sp, #16
 8000c68:	4770      	bx	lr
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	db1b      	blt.n	8000cac <__aeabi_ldivmod+0x84>
 8000c74:	f000 f840 	bl	8000cf8 <__udivmoddi4>
 8000c78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c80:	b004      	add	sp, #16
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	4252      	negs	r2, r2
 8000c8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8e:	4770      	bx	lr
 8000c90:	4252      	negs	r2, r2
 8000c92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c96:	f000 f82f 	bl	8000cf8 <__udivmoddi4>
 8000c9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca2:	b004      	add	sp, #16
 8000ca4:	4240      	negs	r0, r0
 8000ca6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000caa:	4770      	bx	lr
 8000cac:	4252      	negs	r2, r2
 8000cae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb2:	f000 f821 	bl	8000cf8 <__udivmoddi4>
 8000cb6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbe:	b004      	add	sp, #16
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b988 	b.w	8000ff0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	468e      	mov	lr, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	4688      	mov	r8, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d962      	bls.n	8000dd4 <__udivmoddi4+0xdc>
 8000d0e:	fab2 f682 	clz	r6, r2
 8000d12:	b14e      	cbz	r6, 8000d28 <__udivmoddi4+0x30>
 8000d14:	f1c6 0320 	rsb	r3, r6, #32
 8000d18:	fa01 f806 	lsl.w	r8, r1, r6
 8000d1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d20:	40b7      	lsls	r7, r6
 8000d22:	ea43 0808 	orr.w	r8, r3, r8
 8000d26:	40b4      	lsls	r4, r6
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d34:	0c23      	lsrs	r3, r4, #16
 8000d36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d4c:	f080 80ea 	bcs.w	8000f24 <__udivmoddi4+0x22c>
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f240 80e7 	bls.w	8000f24 <__udivmoddi4+0x22c>
 8000d56:	3902      	subs	r1, #2
 8000d58:	443b      	add	r3, r7
 8000d5a:	1a9a      	subs	r2, r3, r2
 8000d5c:	b2a3      	uxth	r3, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6e:	459c      	cmp	ip, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x8e>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	f080 80d6 	bcs.w	8000f28 <__udivmoddi4+0x230>
 8000d7c:	459c      	cmp	ip, r3
 8000d7e:	f240 80d3 	bls.w	8000f28 <__udivmoddi4+0x230>
 8000d82:	443b      	add	r3, r7
 8000d84:	3802      	subs	r0, #2
 8000d86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8a:	eba3 030c 	sub.w	r3, r3, ip
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11d      	cbz	r5, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40f3      	lsrs	r3, r6
 8000d94:	2200      	movs	r2, #0
 8000d96:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d905      	bls.n	8000dae <__udivmoddi4+0xb6>
 8000da2:	b10d      	cbz	r5, 8000da8 <__udivmoddi4+0xb0>
 8000da4:	e9c5 0100 	strd	r0, r1, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4608      	mov	r0, r1
 8000dac:	e7f5      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dae:	fab3 f183 	clz	r1, r3
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d146      	bne.n	8000e44 <__udivmoddi4+0x14c>
 8000db6:	4573      	cmp	r3, lr
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xc8>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 8105 	bhi.w	8000fca <__udivmoddi4+0x2d2>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4690      	mov	r8, r2
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e5      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dce:	e9c5 4800 	strd	r4, r8, [r5]
 8000dd2:	e7e2      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f000 8090 	beq.w	8000efa <__udivmoddi4+0x202>
 8000dda:	fab2 f682 	clz	r6, r2
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f040 80a4 	bne.w	8000f2c <__udivmoddi4+0x234>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	b280      	uxth	r0, r0
 8000dee:	b2bc      	uxth	r4, r7
 8000df0:	2101      	movs	r1, #1
 8000df2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000df6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x11e>
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x11c>
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f200 80e0 	bhi.w	8000fd4 <__udivmoddi4+0x2dc>
 8000e14:	46c4      	mov	ip, r8
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e24:	fb02 f404 	mul.w	r4, r2, r4
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x144>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x142>
 8000e34:	429c      	cmp	r4, r3
 8000e36:	f200 80ca 	bhi.w	8000fce <__udivmoddi4+0x2d6>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e42:	e7a5      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e44:	f1c1 0620 	rsb	r6, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	fa0e f401 	lsl.w	r4, lr, r1
 8000e54:	fa20 f306 	lsr.w	r3, r0, r6
 8000e58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e60:	4323      	orrs	r3, r4
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	fa1f fc87 	uxth.w	ip, r7
 8000e6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e82:	d909      	bls.n	8000e98 <__udivmoddi4+0x1a0>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e8a:	f080 809c 	bcs.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	f240 8099 	bls.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	eba4 040e 	sub.w	r4, r4, lr
 8000e9c:	fa1f fe83 	uxth.w	lr, r3
 8000ea0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb0:	45a4      	cmp	ip, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1ce>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eba:	f080 8082 	bcs.w	8000fc2 <__udivmoddi4+0x2ca>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d97f      	bls.n	8000fc2 <__udivmoddi4+0x2ca>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eca:	eba4 040c 	sub.w	r4, r4, ip
 8000ece:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ed2:	4564      	cmp	r4, ip
 8000ed4:	4673      	mov	r3, lr
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	d362      	bcc.n	8000fa0 <__udivmoddi4+0x2a8>
 8000eda:	d05f      	beq.n	8000f9c <__udivmoddi4+0x2a4>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x1fe>
 8000ede:	ebb8 0203 	subs.w	r2, r8, r3
 8000ee2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ee6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eea:	fa22 f301 	lsr.w	r3, r2, r1
 8000eee:	431e      	orrs	r6, r3
 8000ef0:	40cc      	lsrs	r4, r1
 8000ef2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	e74f      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000efa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000efe:	0c01      	lsrs	r1, r0, #16
 8000f00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f04:	b280      	uxth	r0, r0
 8000f06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	463c      	mov	r4, r7
 8000f10:	46b8      	mov	r8, r7
 8000f12:	46be      	mov	lr, r7
 8000f14:	2620      	movs	r6, #32
 8000f16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f1a:	eba2 0208 	sub.w	r2, r2, r8
 8000f1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f22:	e766      	b.n	8000df2 <__udivmoddi4+0xfa>
 8000f24:	4601      	mov	r1, r0
 8000f26:	e718      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f28:	4610      	mov	r0, r2
 8000f2a:	e72c      	b.n	8000d86 <__udivmoddi4+0x8e>
 8000f2c:	f1c6 0220 	rsb	r2, r6, #32
 8000f30:	fa2e f302 	lsr.w	r3, lr, r2
 8000f34:	40b7      	lsls	r7, r6
 8000f36:	40b1      	lsls	r1, r6
 8000f38:	fa20 f202 	lsr.w	r2, r0, r2
 8000f3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f46:	b2bc      	uxth	r4, r7
 8000f48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb08 f904 	mul.w	r9, r8, r4
 8000f56:	40b0      	lsls	r0, r6
 8000f58:	4589      	cmp	r9, r1
 8000f5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f5e:	b280      	uxth	r0, r0
 8000f60:	d93e      	bls.n	8000fe0 <__udivmoddi4+0x2e8>
 8000f62:	1879      	adds	r1, r7, r1
 8000f64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f68:	d201      	bcs.n	8000f6e <__udivmoddi4+0x276>
 8000f6a:	4589      	cmp	r9, r1
 8000f6c:	d81f      	bhi.n	8000fae <__udivmoddi4+0x2b6>
 8000f6e:	eba1 0109 	sub.w	r1, r1, r9
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d229      	bcs.n	8000fdc <__udivmoddi4+0x2e4>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f8e:	d2c4      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f90:	4542      	cmp	r2, r8
 8000f92:	d2c2      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f94:	f1a9 0102 	sub.w	r1, r9, #2
 8000f98:	443a      	add	r2, r7
 8000f9a:	e7be      	b.n	8000f1a <__udivmoddi4+0x222>
 8000f9c:	45f0      	cmp	r8, lr
 8000f9e:	d29d      	bcs.n	8000edc <__udivmoddi4+0x1e4>
 8000fa0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fa4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fa8:	3801      	subs	r0, #1
 8000faa:	46e1      	mov	r9, ip
 8000fac:	e796      	b.n	8000edc <__udivmoddi4+0x1e4>
 8000fae:	eba7 0909 	sub.w	r9, r7, r9
 8000fb2:	4449      	add	r1, r9
 8000fb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fbc:	fb09 f804 	mul.w	r8, r9, r4
 8000fc0:	e7db      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fc2:	4673      	mov	r3, lr
 8000fc4:	e77f      	b.n	8000ec6 <__udivmoddi4+0x1ce>
 8000fc6:	4650      	mov	r0, sl
 8000fc8:	e766      	b.n	8000e98 <__udivmoddi4+0x1a0>
 8000fca:	4608      	mov	r0, r1
 8000fcc:	e6fd      	b.n	8000dca <__udivmoddi4+0xd2>
 8000fce:	443b      	add	r3, r7
 8000fd0:	3a02      	subs	r2, #2
 8000fd2:	e733      	b.n	8000e3c <__udivmoddi4+0x144>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	443b      	add	r3, r7
 8000fda:	e71c      	b.n	8000e16 <__udivmoddi4+0x11e>
 8000fdc:	4649      	mov	r1, r9
 8000fde:	e79c      	b.n	8000f1a <__udivmoddi4+0x222>
 8000fe0:	eba1 0109 	sub.w	r1, r1, r9
 8000fe4:	46c4      	mov	ip, r8
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	e7c4      	b.n	8000f7a <__udivmoddi4+0x282>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__reg_write>:

// Write a new value to BMP280 register
// input:
//   reg - register number
//   value - new register value
static void __reg_write(uint8_t reg, uint8_t value) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	460a      	mov	r2, r1
 8000ffe:	71fb      	strb	r3, [r7, #7]
 8001000:	4613      	mov	r3, r2
 8001002:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2] = { reg, value };
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	733b      	strb	r3, [r7, #12]
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	737b      	strb	r3, [r7, #13]

	I2C_Transmit(BMP280_I2C_PORT, buf, sizeof(buf), BMP280_ADDR, I2C_GENSTOP_YES);
 800100c:	f107 010c 	add.w	r1, r7, #12
 8001010:	2300      	movs	r3, #0
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	23ec      	movs	r3, #236	@ 0xec
 8001016:	2202      	movs	r2, #2
 8001018:	4803      	ldr	r0, [pc, #12]	@ (8001028 <__reg_write+0x34>)
 800101a:	f000 fc9b 	bl	8001954 <I2C_Transmit>
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40005400 	.word	0x40005400

0800102c <__reg_read>:

// Read a value of the BMP280 register
// input:
//   reg - register number
// return: register value (zero in case of error on I2C bus)
static uint8_t __reg_read(uint8_t reg) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af02      	add	r7, sp, #8
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]

	I2C_Transmit(BMP280_I2C_PORT, &reg, 1, BMP280_ADDR, I2C_GENSTOP_NO);
 800103a:	1df9      	adds	r1, r7, #7
 800103c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	23ec      	movs	r3, #236	@ 0xec
 8001044:	2201      	movs	r2, #1
 8001046:	4807      	ldr	r0, [pc, #28]	@ (8001064 <__reg_read+0x38>)
 8001048:	f000 fc84 	bl	8001954 <I2C_Transmit>
	I2C_Receive(BMP280_I2C_PORT, &value, 1, BMP280_ADDR);
 800104c:	f107 010f 	add.w	r1, r7, #15
 8001050:	23ec      	movs	r3, #236	@ 0xec
 8001052:	2201      	movs	r2, #1
 8001054:	4803      	ldr	r0, [pc, #12]	@ (8001064 <__reg_read+0x38>)
 8001056:	f000 fd31 	bl	8001abc <I2C_Receive>

	return value;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40005400 	.word	0x40005400

08001068 <__reg_read_bulk>:
// input:
//   reg - starting register number
//   buf - pointer to the buffer to store data
//   len - number of registers to read
// return: BMP280_ERROR in case of error on I2C bus, BMP280_SUCCESS otherwise
static BMP280_RESULT __reg_read_bulk(uint8_t reg, uint8_t *buf, uint32_t count) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af02      	add	r7, sp, #8
 800106e:	4603      	mov	r3, r0
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	73fb      	strb	r3, [r7, #15]
	if (I2C_Transmit(BMP280_I2C_PORT, &reg, 1, BMP280_ADDR, I2C_GENSTOP_NO) == I2C_SUCCESS) {
 8001076:	f107 010f 	add.w	r1, r7, #15
 800107a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	23ec      	movs	r3, #236	@ 0xec
 8001082:	2201      	movs	r2, #1
 8001084:	480a      	ldr	r0, [pc, #40]	@ (80010b0 <__reg_read_bulk+0x48>)
 8001086:	f000 fc65 	bl	8001954 <I2C_Transmit>
 800108a:	4603      	mov	r3, r0
 800108c:	2b01      	cmp	r3, #1
 800108e:	d10a      	bne.n	80010a6 <__reg_read_bulk+0x3e>
		if (I2C_Receive(BMP280_I2C_PORT, buf, count, BMP280_ADDR) == I2C_SUCCESS) {
 8001090:	23ec      	movs	r3, #236	@ 0xec
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	4806      	ldr	r0, [pc, #24]	@ (80010b0 <__reg_read_bulk+0x48>)
 8001098:	f000 fd10 	bl	8001abc <I2C_Receive>
 800109c:	4603      	mov	r3, r0
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d101      	bne.n	80010a6 <__reg_read_bulk+0x3e>
			return BMP280_SUCCESS;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <__reg_read_bulk+0x40>
		}
	}

	return BMP280_ERROR;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40005400 	.word	0x40005400

080010b4 <BMP280_Check>:

// Check if BMP280 present on I2C bus
// return: BMP280_SUCCESS if BMP280 present, BMP280_ERROR otherwise
BMP280_RESULT BMP280_Check(void) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	switch (BMP280_GetVersion()) {
 80010b8:	f000 f809 	bl	80010ce <BMP280_GetVersion>
 80010bc:	4603      	mov	r3, r0
 80010be:	3b56      	subs	r3, #86	@ 0x56
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d801      	bhi.n	80010c8 <BMP280_Check+0x14>
		case BMP280_CHIP_ID1:
		case BMP280_CHIP_ID2:
		case BMP280_CHIP_ID3:
			return BMP280_SUCCESS;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <BMP280_Check+0x16>
		default:
			return BMP280_ERROR;
 80010c8:	2300      	movs	r3, #0
	}
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}

080010ce <BMP280_GetVersion>:
	__reg_write(BMP280_REG_RESET, BMP280_SOFT_RESET_KEY);
}

// Get version of the BMP280 chip
// return: version of BMP280 chip or zero in case of chip absence or error on I2C bus
inline uint8_t BMP280_GetVersion(void) {
 80010ce:	b580      	push	{r7, lr}
 80010d0:	af00      	add	r7, sp, #0
	return __reg_read(BMP280_REG_ID);
 80010d2:	20d0      	movs	r0, #208	@ 0xd0
 80010d4:	f7ff ffaa 	bl	800102c <__reg_read>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}

080010de <BMP280_SetMode>:

// Set sensor mode of the BMP280 chip
// input:
//   mode - new mode (one of BMP280_MODE_xx values)
// note: always set the power mode after sensor configuration is done
void BMP280_SetMode(uint8_t mode) {
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
	// Configure 'mode' bits in 'ctrl_meas' (0xF4) register
	mode &= BMP280_MODE_MSK;
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__reg_read(BMP280_REG_CTRL_MEAS) & ~BMP280_MODE_MSK);
 80010f0:	20f4      	movs	r0, #244	@ 0xf4
 80010f2:	f7ff ff9b 	bl	800102c <__reg_read>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f023 0303 	bic.w	r3, r3, #3
 80010fc:	73fb      	strb	r3, [r7, #15]
	__reg_write(BMP280_REG_CTRL_MEAS, reg | mode);
 80010fe:	7bfa      	ldrb	r2, [r7, #15]
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	4313      	orrs	r3, r2
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4619      	mov	r1, r3
 8001108:	20f4      	movs	r0, #244	@ 0xf4
 800110a:	f7ff ff73 	bl	8000ff4 <__reg_write>
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <BMP280_SetFilter>:

// Set coefficient of the IIR filter
// input:
//   filter - new coefficient value (one of BMP280_FILTER_x values)
void BMP280_SetFilter(uint8_t filter) {
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
	// Configure 'filter' bits in 'config' (0xF5) register
	filter &= BMP280_FILTER_MSK;
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 031c 	and.w	r3, r3, #28
 8001126:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__reg_read(BMP280_REG_CONFIG) & ~BMP280_FILTER_MSK);
 8001128:	20f5      	movs	r0, #245	@ 0xf5
 800112a:	f7ff ff7f 	bl	800102c <__reg_read>
 800112e:	4603      	mov	r3, r0
 8001130:	f023 031c 	bic.w	r3, r3, #28
 8001134:	73fb      	strb	r3, [r7, #15]
	__reg_write(BMP280_REG_CONFIG, reg | filter);
 8001136:	7bfa      	ldrb	r2, [r7, #15]
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	4313      	orrs	r3, r2
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4619      	mov	r1, r3
 8001140:	20f5      	movs	r0, #245	@ 0xf5
 8001142:	f7ff ff57 	bl	8000ff4 <__reg_write>
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <BMP280_SetStandby>:

// Set inactive duration in normal mode (Tstandby)
// input:
//   tsb - new inactive duration (one of BMP280_STBY_x values)
void BMP280_SetStandby(uint8_t tsb) {
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	71fb      	strb	r3, [r7, #7]
	// Configure 't_sb' bits in 'config' (0xF5) register
	tsb &= BMP280_STBY_MSK;
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f023 031f 	bic.w	r3, r3, #31
 800115e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__reg_read(BMP280_REG_CONFIG) & ~BMP280_STBY_MSK);
 8001160:	20f5      	movs	r0, #245	@ 0xf5
 8001162:	f7ff ff63 	bl	800102c <__reg_read>
 8001166:	4603      	mov	r3, r0
 8001168:	f003 031f 	and.w	r3, r3, #31
 800116c:	73fb      	strb	r3, [r7, #15]
	__reg_write(BMP280_REG_CONFIG, reg | tsb);
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	4313      	orrs	r3, r2
 8001174:	b2db      	uxtb	r3, r3
 8001176:	4619      	mov	r1, r3
 8001178:	20f5      	movs	r0, #245	@ 0xf5
 800117a:	f7ff ff3b 	bl	8000ff4 <__reg_write>
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <BMP280_SetOSRST>:

// Set oversampling of temperature data
// input:
//   osrs - new oversampling value (one of BMP280_OSRS_T_Xx values)
void BMP280_SetOSRST(uint8_t osrs) {
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
	// Configure 'osrs_t' bits in 'ctrl_meas' (0xF4) register
	osrs &= BMP280_OSRS_T_MSK;
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f023 031f 	bic.w	r3, r3, #31
 8001196:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__reg_read(BMP280_REG_CTRL_MEAS) & ~BMP280_OSRS_T_MSK);
 8001198:	20f4      	movs	r0, #244	@ 0xf4
 800119a:	f7ff ff47 	bl	800102c <__reg_read>
 800119e:	4603      	mov	r3, r0
 80011a0:	f003 031f 	and.w	r3, r3, #31
 80011a4:	73fb      	strb	r3, [r7, #15]
	__reg_write(BMP280_REG_CTRL_MEAS, reg | osrs);
 80011a6:	7bfa      	ldrb	r2, [r7, #15]
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	4619      	mov	r1, r3
 80011b0:	20f4      	movs	r0, #244	@ 0xf4
 80011b2:	f7ff ff1f 	bl	8000ff4 <__reg_write>
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <BMP280_SetOSRSP>:

// Set oversampling of pressure data
// input:
//   osrs - new oversampling value (one of BMP280_OSRS_P_Xx values)
void BMP280_SetOSRSP(uint8_t osrs) {
 80011be:	b580      	push	{r7, lr}
 80011c0:	b084      	sub	sp, #16
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
	// Configure 'osrs_p' bits in 'ctrl_meas' (0xF4) register
	osrs &= BMP280_OSRS_P_MSK;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 031c 	and.w	r3, r3, #28
 80011ce:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__reg_read(BMP280_REG_CTRL_MEAS) & ~BMP280_OSRS_P_MSK);
 80011d0:	20f4      	movs	r0, #244	@ 0xf4
 80011d2:	f7ff ff2b 	bl	800102c <__reg_read>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f023 031c 	bic.w	r3, r3, #28
 80011dc:	73fb      	strb	r3, [r7, #15]
	__reg_write(BMP280_REG_CTRL_MEAS, reg | osrs);
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4619      	mov	r1, r3
 80011e8:	20f4      	movs	r0, #244	@ 0xf4
 80011ea:	f7ff ff03 	bl	8000ff4 <__reg_write>
}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <BMP280_Read_Calibration>:

// Read calibration data
// return: BMP280_ERROR in case of error on I2C bus, BMP280_SUCCESS otherwise
BMP280_RESULT BMP280_Read_Calibration(void) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	// Bulk read from 'calib00' to 'calib25'
	return __reg_read_bulk(BMP280_REG_CALIB00, (uint8_t *)&cal_param, sizeof(cal_param));
 80011fc:	2218      	movs	r2, #24
 80011fe:	4903      	ldr	r1, [pc, #12]	@ (800120c <BMP280_Read_Calibration+0x14>)
 8001200:	2088      	movs	r0, #136	@ 0x88
 8001202:	f7ff ff31 	bl	8001068 <__reg_read_bulk>
 8001206:	4603      	mov	r3, r0
}
 8001208:	4618      	mov	r0, r3
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000084 	.word	0x20000084

08001210 <BMP280_Read_UTP>:
//   UT - pointer to store temperature value (signed 32-bit)
//   UP - pointer to store pressure value (signed 32-bit)
// return: BMP280_ERROR in case of error on I2C bus, BMP280_SUCCESS otherwise
// note: the '0x80000' value means no data for this particular value is present,
//       i.e. that measurement is disabled or not ready yet
BMP280_RESULT BMP280_Read_UTP(int32_t *UT, int32_t *UP) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
	uint8_t buf[8];

	// Bulk read from 'press_msb' to 'temp_xlsb'
	if (__reg_read_bulk(BMP280_REG_PRESS_MSB, buf, sizeof(buf)) == BMP280_SUCCESS) {
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	2208      	movs	r2, #8
 8001220:	4619      	mov	r1, r3
 8001222:	20f7      	movs	r0, #247	@ 0xf7
 8001224:	f7ff ff20 	bl	8001068 <__reg_read_bulk>
 8001228:	4603      	mov	r3, r0
 800122a:	2b01      	cmp	r3, #1
 800122c:	d117      	bne.n	800125e <BMP280_Read_UTP+0x4e>
		*UP = (int32_t)((buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4));
 800122e:	7a3b      	ldrb	r3, [r7, #8]
 8001230:	031a      	lsls	r2, r3, #12
 8001232:	7a7b      	ldrb	r3, [r7, #9]
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	4313      	orrs	r3, r2
 8001238:	7aba      	ldrb	r2, [r7, #10]
 800123a:	0912      	lsrs	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	431a      	orrs	r2, r3
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	601a      	str	r2, [r3, #0]
		*UT = (int32_t)((buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4));
 8001244:	7afb      	ldrb	r3, [r7, #11]
 8001246:	031a      	lsls	r2, r3, #12
 8001248:	7b3b      	ldrb	r3, [r7, #12]
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	4313      	orrs	r3, r2
 800124e:	7b7a      	ldrb	r2, [r7, #13]
 8001250:	0912      	lsrs	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	601a      	str	r2, [r3, #0]
		return BMP280_SUCCESS;
 800125a:	2301      	movs	r3, #1
 800125c:	e008      	b.n	8001270 <BMP280_Read_UTP+0x60>
	}

	// Default result values
	*UT = BMP280_NO_TEMPERATURE;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001264:	601a      	str	r2, [r3, #0]
	*UP = BMP280_NO_PRESSURE;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800126c:	601a      	str	r2, [r3, #0]

	return BMP280_ERROR;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <BMP280_CalcT>:
// Calculate temperature from raw value, resolution is 0.01 degree
// input:
//   UT - raw temperature value
// return: temperature in Celsius degrees (value of '5123' represents '51.23C')
// note: code from the BMP280 datasheet (rev 1.19)
int32_t BMP280_CalcT(int32_t UT) {
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
#if (BMP280_CALC_TYPE != 2)
	// Integer calculations

	t_fine  = ((((UT >> 3) - ((int32_t)cal_param.dig_T1 << 1))) \
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	10da      	asrs	r2, r3, #3
 8001284:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <BMP280_CalcT+0x70>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	1ad3      	subs	r3, r2, r3
			* ((int32_t)cal_param.dig_T2)) >> 11;
 800128c:	4a16      	ldr	r2, [pc, #88]	@ (80012e8 <BMP280_CalcT+0x70>)
 800128e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001292:	fb02 f303 	mul.w	r3, r2, r3
 8001296:	12db      	asrs	r3, r3, #11
	t_fine  = ((((UT >> 3) - ((int32_t)cal_param.dig_T1 << 1))) \
 8001298:	4a14      	ldr	r2, [pc, #80]	@ (80012ec <BMP280_CalcT+0x74>)
 800129a:	6013      	str	r3, [r2, #0]
	t_fine += (((((UT >> 4) - ((int32_t)cal_param.dig_T1)) \
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	111b      	asrs	r3, r3, #4
 80012a0:	4a11      	ldr	r2, [pc, #68]	@ (80012e8 <BMP280_CalcT+0x70>)
 80012a2:	8812      	ldrh	r2, [r2, #0]
 80012a4:	1a9b      	subs	r3, r3, r2
			* ((UT >> 4) - ((int32_t)cal_param.dig_T1))) >> 12) \
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	1112      	asrs	r2, r2, #4
 80012aa:	490f      	ldr	r1, [pc, #60]	@ (80012e8 <BMP280_CalcT+0x70>)
 80012ac:	8809      	ldrh	r1, [r1, #0]
 80012ae:	1a52      	subs	r2, r2, r1
 80012b0:	fb02 f303 	mul.w	r3, r2, r3
 80012b4:	131b      	asrs	r3, r3, #12
			* ((int32_t)cal_param.dig_T3)) >> 14;
 80012b6:	4a0c      	ldr	r2, [pc, #48]	@ (80012e8 <BMP280_CalcT+0x70>)
 80012b8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80012bc:	fb02 f303 	mul.w	r3, r2, r3
 80012c0:	139a      	asrs	r2, r3, #14
	t_fine += (((((UT >> 4) - ((int32_t)cal_param.dig_T1)) \
 80012c2:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <BMP280_CalcT+0x74>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <BMP280_CalcT+0x74>)
 80012ca:	6013      	str	r3, [r2, #0]

	return ((t_fine * 5) + 128) >> 8;
 80012cc:	4b07      	ldr	r3, [pc, #28]	@ (80012ec <BMP280_CalcT+0x74>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	3380      	adds	r3, #128	@ 0x80
 80012d8:	121b      	asrs	r3, r3, #8
	v_x2 = (v_x2 * v_x2) * ((float)cal_param.dig_T3);
	t_fine_f = v_x1 + v_x2;

	return (int32_t)(((v_x1 + v_x2) / 5120.0F) * 100.0F);
#endif // BMP280_CALC_TYPE
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000084 	.word	0x20000084
 80012ec:	2000009c 	.word	0x2000009c

080012f0 <BMP280_CalcP>:
// input:
//   UP - raw pressure value
// return: pressure in mPa (value of '100663688' represents '100663.688Pa')
// note: BMP280_CalcT() should be called before calling this function
// note: code from the BMP280 datasheet (rev 1.19)
uint32_t BMP280_CalcP(int32_t UP) {
 80012f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012f4:	b0ce      	sub	sp, #312	@ 0x138
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
	return p * 1000U;
#elif (BMP280_CALC_TYPE == 1)
	// 64-bit calculations
	int64_t v1, v2, p;

	v1 = (int64_t)t_fine - 128000;
 80012fc:	4baf      	ldr	r3, [pc, #700]	@ (80015bc <BMP280_CalcP+0x2cc>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	17da      	asrs	r2, r3, #31
 8001302:	461c      	mov	r4, r3
 8001304:	4615      	mov	r5, r2
 8001306:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800130a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800130e:	e9c7 ab4c 	strd	sl, fp, [r7, #304]	@ 0x130
	v2 = v1 * v1 * (int64_t)cal_param.dig_P6;
 8001312:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001316:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800131a:	fb03 f102 	mul.w	r1, r3, r2
 800131e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001322:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001326:	fb02 f303 	mul.w	r3, r2, r3
 800132a:	18ca      	adds	r2, r1, r3
 800132c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001330:	fba3 8903 	umull	r8, r9, r3, r3
 8001334:	eb02 0309 	add.w	r3, r2, r9
 8001338:	4699      	mov	r9, r3
 800133a:	4ba1      	ldr	r3, [pc, #644]	@ (80015c0 <BMP280_CalcP+0x2d0>)
 800133c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001340:	b21b      	sxth	r3, r3
 8001342:	17da      	asrs	r2, r3, #31
 8001344:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001348:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800134c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001350:	4603      	mov	r3, r0
 8001352:	fb03 f209 	mul.w	r2, r3, r9
 8001356:	460b      	mov	r3, r1
 8001358:	fb08 f303 	mul.w	r3, r8, r3
 800135c:	4413      	add	r3, r2
 800135e:	4602      	mov	r2, r0
 8001360:	fba8 1202 	umull	r1, r2, r8, r2
 8001364:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001368:	460a      	mov	r2, r1
 800136a:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800136e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001372:	4413      	add	r3, r2
 8001374:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001378:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 800137c:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
 8001380:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	v2 = v2 + ((v1 * (int64_t)cal_param.dig_P5) << 17);
 8001384:	4b8e      	ldr	r3, [pc, #568]	@ (80015c0 <BMP280_CalcP+0x2d0>)
 8001386:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800138a:	b21b      	sxth	r3, r3
 800138c:	17da      	asrs	r2, r3, #31
 800138e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001392:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001396:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800139a:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 800139e:	462a      	mov	r2, r5
 80013a0:	fb02 f203 	mul.w	r2, r2, r3
 80013a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80013a8:	4621      	mov	r1, r4
 80013aa:	fb01 f303 	mul.w	r3, r1, r3
 80013ae:	441a      	add	r2, r3
 80013b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80013b4:	4621      	mov	r1, r4
 80013b6:	fba3 1301 	umull	r1, r3, r3, r1
 80013ba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80013be:	460b      	mov	r3, r1
 80013c0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80013c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80013c8:	18d3      	adds	r3, r2, r3
 80013ca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80013ce:	f04f 0000 	mov.w	r0, #0
 80013d2:	f04f 0100 	mov.w	r1, #0
 80013d6:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 80013da:	462b      	mov	r3, r5
 80013dc:	0459      	lsls	r1, r3, #17
 80013de:	4623      	mov	r3, r4
 80013e0:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80013e4:	4623      	mov	r3, r4
 80013e6:	0458      	lsls	r0, r3, #17
 80013e8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80013ec:	1814      	adds	r4, r2, r0
 80013ee:	653c      	str	r4, [r7, #80]	@ 0x50
 80013f0:	414b      	adcs	r3, r1
 80013f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80013f4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 80013f8:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	v2 = v2 + ((int64_t)cal_param.dig_P4 << 35);
 80013fc:	4b70      	ldr	r3, [pc, #448]	@ (80015c0 <BMP280_CalcP+0x2d0>)
 80013fe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001402:	b21b      	sxth	r3, r3
 8001404:	17da      	asrs	r2, r3, #31
 8001406:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800140a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800140e:	f04f 0000 	mov.w	r0, #0
 8001412:	f04f 0100 	mov.w	r1, #0
 8001416:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800141a:	00d9      	lsls	r1, r3, #3
 800141c:	2000      	movs	r0, #0
 800141e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001422:	1814      	adds	r4, r2, r0
 8001424:	64bc      	str	r4, [r7, #72]	@ 0x48
 8001426:	414b      	adcs	r3, r1
 8001428:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800142a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800142e:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	v1 = ((v1 * v1 * (int64_t)cal_param.dig_P3) >> 8) + \
 8001432:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001436:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800143a:	fb03 f102 	mul.w	r1, r3, r2
 800143e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001442:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	18ca      	adds	r2, r1, r3
 800144c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001450:	fba3 1303 	umull	r1, r3, r3, r3
 8001454:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001458:	460b      	mov	r3, r1
 800145a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800145e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001462:	18d3      	adds	r3, r2, r3
 8001464:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001468:	4b55      	ldr	r3, [pc, #340]	@ (80015c0 <BMP280_CalcP+0x2d0>)
 800146a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800146e:	b21b      	sxth	r3, r3
 8001470:	17da      	asrs	r2, r3, #31
 8001472:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001476:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800147a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 800147e:	462b      	mov	r3, r5
 8001480:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	@ 0xb0
 8001484:	4642      	mov	r2, r8
 8001486:	fb02 f203 	mul.w	r2, r2, r3
 800148a:	464b      	mov	r3, r9
 800148c:	4621      	mov	r1, r4
 800148e:	fb01 f303 	mul.w	r3, r1, r3
 8001492:	4413      	add	r3, r2
 8001494:	4622      	mov	r2, r4
 8001496:	4641      	mov	r1, r8
 8001498:	fba2 1201 	umull	r1, r2, r2, r1
 800149c:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80014a0:	460a      	mov	r2, r1
 80014a2:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 80014a6:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80014aa:	4413      	add	r3, r2
 80014ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80014b0:	f04f 0000 	mov.w	r0, #0
 80014b4:	f04f 0100 	mov.w	r1, #0
 80014b8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80014bc:	4623      	mov	r3, r4
 80014be:	0a18      	lsrs	r0, r3, #8
 80014c0:	462b      	mov	r3, r5
 80014c2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80014c6:	462b      	mov	r3, r5
 80014c8:	1219      	asrs	r1, r3, #8
			((v1 * (int64_t)cal_param.dig_P2) << 12);
 80014ca:	4b3d      	ldr	r3, [pc, #244]	@ (80015c0 <BMP280_CalcP+0x2d0>)
 80014cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	17da      	asrs	r2, r3, #31
 80014d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80014d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80014dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80014e0:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80014e4:	464a      	mov	r2, r9
 80014e6:	fb02 f203 	mul.w	r2, r2, r3
 80014ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80014ee:	4644      	mov	r4, r8
 80014f0:	fb04 f303 	mul.w	r3, r4, r3
 80014f4:	441a      	add	r2, r3
 80014f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80014fa:	4644      	mov	r4, r8
 80014fc:	fba3 4304 	umull	r4, r3, r3, r4
 8001500:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001504:	4623      	mov	r3, r4
 8001506:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800150a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800150e:	18d3      	adds	r3, r2, r3
 8001510:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001520:	464c      	mov	r4, r9
 8001522:	0323      	lsls	r3, r4, #12
 8001524:	4644      	mov	r4, r8
 8001526:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800152a:	4644      	mov	r4, r8
 800152c:	0322      	lsls	r2, r4, #12
	v1 = ((v1 * v1 * (int64_t)cal_param.dig_P3) >> 8) + \
 800152e:	1884      	adds	r4, r0, r2
 8001530:	643c      	str	r4, [r7, #64]	@ 0x40
 8001532:	eb41 0303 	adc.w	r3, r1, r3
 8001536:	647b      	str	r3, [r7, #68]	@ 0x44
 8001538:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800153c:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	v1 = (((((int64_t)1) << 47) + v1)) * ((int64_t)cal_param.dig_P1) >> 33;
 8001540:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001544:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001548:	f8c7 10a4 	str.w	r1, [r7, #164]	@ 0xa4
 800154c:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001550:	4b1b      	ldr	r3, [pc, #108]	@ (80015c0 <BMP280_CalcP+0x2d0>)
 8001552:	88db      	ldrh	r3, [r3, #6]
 8001554:	b29b      	uxth	r3, r3
 8001556:	2200      	movs	r2, #0
 8001558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800155c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001560:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8001564:	462b      	mov	r3, r5
 8001566:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800156a:	4642      	mov	r2, r8
 800156c:	fb02 f203 	mul.w	r2, r2, r3
 8001570:	464b      	mov	r3, r9
 8001572:	4621      	mov	r1, r4
 8001574:	fb01 f303 	mul.w	r3, r1, r3
 8001578:	4413      	add	r3, r2
 800157a:	4622      	mov	r2, r4
 800157c:	4641      	mov	r1, r8
 800157e:	fba2 1201 	umull	r1, r2, r2, r1
 8001582:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001586:	460a      	mov	r2, r1
 8001588:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800158c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001590:	4413      	add	r3, r2
 8001592:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80015a2:	4629      	mov	r1, r5
 80015a4:	104a      	asrs	r2, r1, #1
 80015a6:	4629      	mov	r1, r5
 80015a8:	17cb      	asrs	r3, r1, #31
 80015aa:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	if (v1 == 0) {
 80015ae:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80015b2:	4313      	orrs	r3, r2
 80015b4:	d106      	bne.n	80015c4 <BMP280_CalcP+0x2d4>
		// avoid exception caused by division by zero
		return 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e18d      	b.n	80018d6 <BMP280_CalcP+0x5e6>
 80015ba:	bf00      	nop
 80015bc:	2000009c 	.word	0x2000009c
 80015c0:	20000084 	.word	0x20000084
	}
	p = 1048576 - UP;
 80015c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80015c8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80015cc:	17da      	asrs	r2, r3, #31
 80015ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80015d2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80015d6:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	p = (((p << 31) - v2) * 3125) / v1;
 80015da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015de:	105b      	asrs	r3, r3, #1
 80015e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015e8:	07db      	lsls	r3, r3, #31
 80015ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80015ee:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80015f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015f6:	4621      	mov	r1, r4
 80015f8:	1a89      	subs	r1, r1, r2
 80015fa:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80015fe:	4629      	mov	r1, r5
 8001600:	eb61 0303 	sbc.w	r3, r1, r3
 8001604:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001608:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800160c:	4622      	mov	r2, r4
 800160e:	462b      	mov	r3, r5
 8001610:	1891      	adds	r1, r2, r2
 8001612:	6339      	str	r1, [r7, #48]	@ 0x30
 8001614:	415b      	adcs	r3, r3
 8001616:	637b      	str	r3, [r7, #52]	@ 0x34
 8001618:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800161c:	4621      	mov	r1, r4
 800161e:	1851      	adds	r1, r2, r1
 8001620:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001622:	4629      	mov	r1, r5
 8001624:	414b      	adcs	r3, r1
 8001626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001634:	4649      	mov	r1, r9
 8001636:	018b      	lsls	r3, r1, #6
 8001638:	4641      	mov	r1, r8
 800163a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800163e:	4641      	mov	r1, r8
 8001640:	018a      	lsls	r2, r1, #6
 8001642:	4641      	mov	r1, r8
 8001644:	1889      	adds	r1, r1, r2
 8001646:	6239      	str	r1, [r7, #32]
 8001648:	4649      	mov	r1, r9
 800164a:	eb43 0101 	adc.w	r1, r3, r1
 800164e:	6279      	str	r1, [r7, #36]	@ 0x24
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800165c:	4649      	mov	r1, r9
 800165e:	008b      	lsls	r3, r1, #2
 8001660:	4641      	mov	r1, r8
 8001662:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001666:	4641      	mov	r1, r8
 8001668:	008a      	lsls	r2, r1, #2
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	4603      	mov	r3, r0
 8001670:	4622      	mov	r2, r4
 8001672:	189b      	adds	r3, r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	460b      	mov	r3, r1
 8001678:	462a      	mov	r2, r5
 800167a:	eb42 0303 	adc.w	r3, r2, r3
 800167e:	61fb      	str	r3, [r7, #28]
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800168c:	4649      	mov	r1, r9
 800168e:	008b      	lsls	r3, r1, #2
 8001690:	4641      	mov	r1, r8
 8001692:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001696:	4641      	mov	r1, r8
 8001698:	008a      	lsls	r2, r1, #2
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	4603      	mov	r3, r0
 80016a0:	4622      	mov	r2, r4
 80016a2:	189b      	adds	r3, r3, r2
 80016a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80016a8:	462b      	mov	r3, r5
 80016aa:	460a      	mov	r2, r1
 80016ac:	eb42 0303 	adc.w	r3, r2, r3
 80016b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80016b4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80016b8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80016bc:	f7ff fab4 	bl	8000c28 <__aeabi_ldivmod>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	v1 = (((int64_t)cal_param.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 80016c8:	4b86      	ldr	r3, [pc, #536]	@ (80018e4 <BMP280_CalcP+0x5f4>)
 80016ca:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	17da      	asrs	r2, r3, #31
 80016d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80016d4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80016d6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80016da:	f04f 0000 	mov.w	r0, #0
 80016de:	f04f 0100 	mov.w	r1, #0
 80016e2:	0b50      	lsrs	r0, r2, #13
 80016e4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80016e8:	1359      	asrs	r1, r3, #13
 80016ea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016ee:	462b      	mov	r3, r5
 80016f0:	fb00 f203 	mul.w	r2, r0, r3
 80016f4:	4623      	mov	r3, r4
 80016f6:	fb03 f301 	mul.w	r3, r3, r1
 80016fa:	4413      	add	r3, r2
 80016fc:	4622      	mov	r2, r4
 80016fe:	fba2 1200 	umull	r1, r2, r2, r0
 8001702:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001706:	460a      	mov	r2, r1
 8001708:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 800170c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001710:	4413      	add	r3, r2
 8001712:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001716:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800171a:	f04f 0000 	mov.w	r0, #0
 800171e:	f04f 0100 	mov.w	r1, #0
 8001722:	0b50      	lsrs	r0, r2, #13
 8001724:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001728:	1359      	asrs	r1, r3, #13
 800172a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800172e:	462b      	mov	r3, r5
 8001730:	fb00 f203 	mul.w	r2, r0, r3
 8001734:	4623      	mov	r3, r4
 8001736:	fb03 f301 	mul.w	r3, r3, r1
 800173a:	4413      	add	r3, r2
 800173c:	4622      	mov	r2, r4
 800173e:	fba2 1200 	umull	r1, r2, r2, r0
 8001742:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001746:	460a      	mov	r2, r1
 8001748:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800174c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001750:	4413      	add	r3, r2
 8001752:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001762:	4621      	mov	r1, r4
 8001764:	0e4a      	lsrs	r2, r1, #25
 8001766:	4629      	mov	r1, r5
 8001768:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800176c:	4629      	mov	r1, r5
 800176e:	164b      	asrs	r3, r1, #25
 8001770:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	v2 = (((int64_t)cal_param.dig_P8) * p) >> 19;
 8001774:	4b5b      	ldr	r3, [pc, #364]	@ (80018e4 <BMP280_CalcP+0x5f4>)
 8001776:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800177a:	b21b      	sxth	r3, r3
 800177c:	17da      	asrs	r2, r3, #31
 800177e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001780:	677a      	str	r2, [r7, #116]	@ 0x74
 8001782:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001786:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800178a:	462a      	mov	r2, r5
 800178c:	fb02 f203 	mul.w	r2, r2, r3
 8001790:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001794:	4621      	mov	r1, r4
 8001796:	fb01 f303 	mul.w	r3, r1, r3
 800179a:	441a      	add	r2, r3
 800179c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017a0:	4621      	mov	r1, r4
 80017a2:	fba3 1301 	umull	r1, r3, r3, r1
 80017a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80017aa:	460b      	mov	r3, r1
 80017ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80017b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017b4:	18d3      	adds	r3, r2, r3
 80017b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80017c6:	4621      	mov	r1, r4
 80017c8:	0cca      	lsrs	r2, r1, #19
 80017ca:	4629      	mov	r1, r5
 80017cc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80017d0:	4629      	mov	r1, r5
 80017d2:	14cb      	asrs	r3, r1, #19
 80017d4:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	p = ((p + v1 + v2) >> 8) + ((int64_t)cal_param.dig_P7 << 4);
 80017d8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80017dc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80017e0:	1884      	adds	r4, r0, r2
 80017e2:	66bc      	str	r4, [r7, #104]	@ 0x68
 80017e4:	eb41 0303 	adc.w	r3, r1, r3
 80017e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80017ea:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80017ee:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80017f2:	4621      	mov	r1, r4
 80017f4:	1889      	adds	r1, r1, r2
 80017f6:	6639      	str	r1, [r7, #96]	@ 0x60
 80017f8:	4629      	mov	r1, r5
 80017fa:	eb43 0101 	adc.w	r1, r3, r1
 80017fe:	6679      	str	r1, [r7, #100]	@ 0x64
 8001800:	f04f 0000 	mov.w	r0, #0
 8001804:	f04f 0100 	mov.w	r1, #0
 8001808:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800180c:	4623      	mov	r3, r4
 800180e:	0a18      	lsrs	r0, r3, #8
 8001810:	462b      	mov	r3, r5
 8001812:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001816:	462b      	mov	r3, r5
 8001818:	1219      	asrs	r1, r3, #8
 800181a:	4b32      	ldr	r3, [pc, #200]	@ (80018e4 <BMP280_CalcP+0x5f4>)
 800181c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001820:	b21b      	sxth	r3, r3
 8001822:	17da      	asrs	r2, r3, #31
 8001824:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001826:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001834:	464c      	mov	r4, r9
 8001836:	0123      	lsls	r3, r4, #4
 8001838:	4644      	mov	r4, r8
 800183a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800183e:	4644      	mov	r4, r8
 8001840:	0122      	lsls	r2, r4, #4
 8001842:	1884      	adds	r4, r0, r2
 8001844:	613c      	str	r4, [r7, #16]
 8001846:	eb41 0303 	adc.w	r3, r1, r3
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001850:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120

	return (uint32_t)((p * 1000) >> 8);
 8001854:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	f04f 0400 	mov.w	r4, #0
 8001860:	f04f 0500 	mov.w	r5, #0
 8001864:	015d      	lsls	r5, r3, #5
 8001866:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800186a:	0154      	lsls	r4, r2, #5
 800186c:	4622      	mov	r2, r4
 800186e:	462b      	mov	r3, r5
 8001870:	1a14      	subs	r4, r2, r0
 8001872:	60bc      	str	r4, [r7, #8]
 8001874:	eb63 0301 	sbc.w	r3, r3, r1
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001886:	464c      	mov	r4, r9
 8001888:	00a3      	lsls	r3, r4, #2
 800188a:	4644      	mov	r4, r8
 800188c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001890:	4644      	mov	r4, r8
 8001892:	00a2      	lsls	r2, r4, #2
 8001894:	4614      	mov	r4, r2
 8001896:	461d      	mov	r5, r3
 8001898:	4623      	mov	r3, r4
 800189a:	181b      	adds	r3, r3, r0
 800189c:	603b      	str	r3, [r7, #0]
 800189e:	462b      	mov	r3, r5
 80018a0:	eb41 0303 	adc.w	r3, r1, r3
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018b2:	4629      	mov	r1, r5
 80018b4:	00cb      	lsls	r3, r1, #3
 80018b6:	4621      	mov	r1, r4
 80018b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018bc:	4621      	mov	r1, r4
 80018be:	00ca      	lsls	r2, r1, #3
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	0a02      	lsrs	r2, r0, #8
 80018ce:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80018d2:	120b      	asrs	r3, r1, #8
 80018d4:	4613      	mov	r3, r2
	v_x2 = p_f * ((float)cal_param.dig_P8) / 32768.0F;
	p_f += (v_x1 + v_x2 + ((float)cal_param.dig_P7)) / 16.0F;

	return (uint32_t)(p_f * 1000.0F);
#endif // BMP280_CALC_TYPE
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80018dc:	46bd      	mov	sp, r7
 80018de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018e2:	bf00      	nop
 80018e4:	20000084 	.word	0x20000084

080018e8 <I2C_CalcDelay>:
								I2C_ICR_STOPCF  | \
								I2C_ICR_TIMOUTCF)


// Count rough delay for timeouts
static uint32_t I2C_CalcDelay(uint32_t delay) {
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	uint32_t cnt;

	if (SystemCoreClock > 1000000U) {
 80018f0:	4b13      	ldr	r3, [pc, #76]	@ (8001940 <I2C_CalcDelay+0x58>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a13      	ldr	r2, [pc, #76]	@ (8001944 <I2C_CalcDelay+0x5c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d90b      	bls.n	8001912 <I2C_CalcDelay+0x2a>
		cnt = (delay * ((SystemCoreClock / 1000000U) + 1U));
 80018fa:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <I2C_CalcDelay+0x58>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a12      	ldr	r2, [pc, #72]	@ (8001948 <I2C_CalcDelay+0x60>)
 8001900:	fba2 2303 	umull	r2, r3, r2, r3
 8001904:	0c9b      	lsrs	r3, r3, #18
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	fb02 f303 	mul.w	r3, r2, r3
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e00f      	b.n	8001932 <I2C_CalcDelay+0x4a>
	} else {
		cnt = (((delay / 100U) + 1U) * ((SystemCoreClock / 10000U) + 1U));
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a0d      	ldr	r2, [pc, #52]	@ (800194c <I2C_CalcDelay+0x64>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	3301      	adds	r3, #1
 800191e:	4a08      	ldr	r2, [pc, #32]	@ (8001940 <I2C_CalcDelay+0x58>)
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	490b      	ldr	r1, [pc, #44]	@ (8001950 <I2C_CalcDelay+0x68>)
 8001924:	fba1 1202 	umull	r1, r2, r1, r2
 8001928:	0b52      	lsrs	r2, r2, #13
 800192a:	3201      	adds	r2, #1
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	60fb      	str	r3, [r7, #12]
	}

	return cnt;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	20000000 	.word	0x20000000
 8001944:	000f4240 	.word	0x000f4240
 8001948:	431bde83 	.word	0x431bde83
 800194c:	51eb851f 	.word	0x51eb851f
 8001950:	d1b71759 	.word	0xd1b71759

08001954 <I2C_Transmit>:
//     I2C_TX_CONT - this flag indicates that transmission will be continued
//                   e.g. by calling this function again with NOSTART flag
//     zero value - generate both START and STOP conditions
// return:
//   I2C_ERROR if there was a timeout during I2C operations, I2C_SUCCESS otherwise
I2CSTATUS I2C_Transmit(I2C_TypeDef* I2Cx, const uint8_t *pBuf, uint32_t nbytes, uint8_t devAddr, uint32_t flags) {
 8001954:	b5b0      	push	{r4, r5, r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	70fb      	strb	r3, [r7, #3]
	uint32_t delay_val = I2C_CalcDelay(I2C_TIMEOUT);
 8001962:	20c8      	movs	r0, #200	@ 0xc8
 8001964:	f7ff ffc0 	bl	80018e8 <I2C_CalcDelay>
 8001968:	6178      	str	r0, [r7, #20]
	register uint32_t reg;
	register uint32_t tx_count;
	register volatile uint32_t wait;

	// Clear all flags
	I2Cx->ICR = I2C_ICR_ALL;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f643 7238 	movw	r2, #16184	@ 0x3f38
 8001970:	61da      	str	r2, [r3, #28]

	// Everything regarding to the transmission is in the CR2 register
	reg = I2Cx->CR2;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	685c      	ldr	r4, [r3, #4]
	reg &= ~I2C_CR2_ALL;
 8001976:	4b50      	ldr	r3, [pc, #320]	@ (8001ab8 <I2C_Transmit+0x164>)
 8001978:	4023      	ands	r3, r4
 800197a:	461c      	mov	r4, r3

	// Slave device address
	reg |= (devAddr & I2C_CR2_SADD);
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	431c      	orrs	r4, r3

	// Whether it need to generate START condition
	if (!(flags & I2C_TX_NOSTART)) { reg |= I2C_CR2_START; }
 8001980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001982:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <I2C_Transmit+0x3a>
 800198a:	f444 5400 	orr.w	r4, r4, #8192	@ 0x2000

	// Whether it need to generate STOP condition
	if ((flags & I2C_TX_CONT) || (nbytes > I2C_NBYTES_MAX)) {
 800198e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001990:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <I2C_Transmit+0x4a>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2bff      	cmp	r3, #255	@ 0xff
 800199c:	d902      	bls.n	80019a4 <I2C_Transmit+0x50>
		reg |= I2C_CR2_RELOAD;
 800199e:	f044 7480 	orr.w	r4, r4, #16777216	@ 0x1000000
 80019a2:	e006      	b.n	80019b2 <I2C_Transmit+0x5e>
	} else if (!(flags & I2C_TX_NOSTOP)) {
 80019a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <I2C_Transmit+0x5e>
		reg |= I2C_CR2_AUTOEND;
 80019ae:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
	}

	// Transfer length
	tx_count = (nbytes > I2C_NBYTES_MAX) ? I2C_NBYTES_MAX : nbytes;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2bff      	cmp	r3, #255	@ 0xff
 80019b6:	bf28      	it	cs
 80019b8:	23ff      	movcs	r3, #255	@ 0xff
 80019ba:	461d      	mov	r5, r3
	nbytes -= tx_count;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	1b5b      	subs	r3, r3, r5
 80019c0:	607b      	str	r3, [r7, #4]
	reg |= tx_count << I2C_CR2_NBYTES_Pos;
 80019c2:	042b      	lsls	r3, r5, #16
 80019c4:	431c      	orrs	r4, r3

	// Write a composed value to the I2C register
	I2Cx->CR2 = reg;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	605c      	str	r4, [r3, #4]

	// Transmit data
	while (tx_count) {
 80019ca:	e05b      	b.n	8001a84 <I2C_Transmit+0x130>
		// Wait until either TXIS or NACK flag is set
		wait = delay_val;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	613b      	str	r3, [r7, #16]
		while (!((reg = I2Cx->ISR) & (I2C_ISR_TXIS | I2C_ISR_NACKF)) && --wait);
 80019d0:	bf00      	nop
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	699c      	ldr	r4, [r3, #24]
 80019d6:	f004 0312 	and.w	r3, r4, #18
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d104      	bne.n	80019e8 <I2C_Transmit+0x94>
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f4      	bne.n	80019d2 <I2C_Transmit+0x7e>
		if ((reg & I2C_ISR_NACKF) || (wait == 0U)) {
 80019e8:	f004 0310 	and.w	r3, r4, #16
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <I2C_Transmit+0xa2>
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <I2C_Transmit+0xa6>
			return I2C_ERROR;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e05a      	b.n	8001ab0 <I2C_Transmit+0x15c>
		}

		// Transmit byte
		I2Cx->TXDR = *pBuf++;
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	60ba      	str	r2, [r7, #8]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	629a      	str	r2, [r3, #40]	@ 0x28
		tx_count--;
 8001a08:	3d01      	subs	r5, #1

		if ((tx_count == 0U) && (nbytes != 0U)) {
 8001a0a:	2d00      	cmp	r5, #0
 8001a0c:	d13a      	bne.n	8001a84 <I2C_Transmit+0x130>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d037      	beq.n	8001a84 <I2C_Transmit+0x130>
			// Wait until TCR flag is set (Transfer Complete Reload)
			wait = delay_val;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	613b      	str	r3, [r7, #16]
			while (!(I2Cx->ISR & I2C_ISR_TCR) && --wait);
 8001a18:	bf00      	nop
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d104      	bne.n	8001a30 <I2C_Transmit+0xdc>
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f4      	bne.n	8001a1a <I2C_Transmit+0xc6>
			if (wait == 0U) {
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <I2C_Transmit+0xe6>
				return I2C_ERROR;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e03a      	b.n	8001ab0 <I2C_Transmit+0x15c>
			}

			// Configure next (or last) portion transfer
			reg = I2Cx->CR2;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	685c      	ldr	r4, [r3, #4]
			reg &= ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND);
 8001a3e:	f024 737f 	bic.w	r3, r4, #66846720	@ 0x3fc0000
 8001a42:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001a46:	461c      	mov	r4, r3
			if ((flags & I2C_TX_CONT) || (nbytes > I2C_NBYTES_MAX)) {
 8001a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a4a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d102      	bne.n	8001a58 <I2C_Transmit+0x104>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2bff      	cmp	r3, #255	@ 0xff
 8001a56:	d902      	bls.n	8001a5e <I2C_Transmit+0x10a>
				reg |= I2C_CR2_RELOAD;
 8001a58:	f044 7480 	orr.w	r4, r4, #16777216	@ 0x1000000
 8001a5c:	e006      	b.n	8001a6c <I2C_Transmit+0x118>
			} else if (!(flags & I2C_TX_NOSTOP)) {
 8001a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <I2C_Transmit+0x118>
				reg |= I2C_CR2_AUTOEND;
 8001a68:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
			}
			tx_count = (nbytes > I2C_NBYTES_MAX) ? I2C_NBYTES_MAX : nbytes;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2bff      	cmp	r3, #255	@ 0xff
 8001a70:	bf28      	it	cs
 8001a72:	23ff      	movcs	r3, #255	@ 0xff
 8001a74:	461d      	mov	r5, r3
			nbytes -= tx_count;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	1b5b      	subs	r3, r3, r5
 8001a7a:	607b      	str	r3, [r7, #4]
			reg |= tx_count << I2C_CR2_NBYTES_Pos;
 8001a7c:	042b      	lsls	r3, r5, #16
 8001a7e:	431c      	orrs	r4, r3
			I2Cx->CR2 = reg;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	605c      	str	r4, [r3, #4]
	while (tx_count) {
 8001a84:	2d00      	cmp	r5, #0
 8001a86:	d1a1      	bne.n	80019cc <I2C_Transmit+0x78>
		}
	}

	// End of transmission
	wait = delay_val;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	613b      	str	r3, [r7, #16]
	while (!(I2Cx->ISR & (I2C_ISR_TC | I2C_ISR_TCR | I2C_ISR_STOPF)) && --wait);
 8001a8c:	bf00      	nop
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d104      	bne.n	8001aa4 <I2C_Transmit+0x150>
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f4      	bne.n	8001a8e <I2C_Transmit+0x13a>

	return (wait == 0U) ? I2C_ERROR : I2C_SUCCESS;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	bf14      	ite	ne
 8001aaa:	2301      	movne	r3, #1
 8001aac:	2300      	moveq	r3, #0
 8001aae:	b2db      	uxtb	r3, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab8:	fc009800 	.word	0xfc009800

08001abc <I2C_Receive>:
//   buf - pointer to the data buffer
//   nbytes - number of bytes to receive
//   devAddr - address of target device
// return:
//   I2C_ERROR if there was a timeout during I2C operations, I2C_SUCCESS otherwise
I2CSTATUS I2C_Receive(I2C_TypeDef* I2Cx, uint8_t *pBuf, uint32_t nbytes, uint8_t devAddr) {
 8001abc:	b5b0      	push	{r4, r5, r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
 8001ac8:	70fb      	strb	r3, [r7, #3]
	uint32_t delay_val = I2C_CalcDelay(I2C_TIMEOUT);
 8001aca:	20c8      	movs	r0, #200	@ 0xc8
 8001acc:	f7ff ff0c 	bl	80018e8 <I2C_CalcDelay>
 8001ad0:	6178      	str	r0, [r7, #20]
	register uint32_t reg;
	register uint32_t rx_count;
	register volatile uint32_t wait;

	// Clear all flags
	I2Cx->ICR = I2C_ICR_ALL;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f643 7238 	movw	r2, #16184	@ 0x3f38
 8001ad8:	61da      	str	r2, [r3, #28]

	// Everything regarding to the transmission is in the CR2 register
	reg = I2Cx->CR2;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	685c      	ldr	r4, [r3, #4]
	reg &= ~I2C_CR2_ALL;
 8001ade:	4b41      	ldr	r3, [pc, #260]	@ (8001be4 <I2C_Receive+0x128>)
 8001ae0:	4023      	ands	r3, r4
 8001ae2:	461c      	mov	r4, r3

	// Configure slave device address, enable START condition and set direction to READ
	reg |= (devAddr & I2C_CR2_SADD) | I2C_CR2_START | I2C_CR2_RD_WRN;
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	4323      	orrs	r3, r4
 8001ae8:	f443 5410 	orr.w	r4, r3, #9216	@ 0x2400

	// Transfer length
	if (nbytes > I2C_NBYTES_MAX) {
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2bff      	cmp	r3, #255	@ 0xff
 8001af0:	d903      	bls.n	8001afa <I2C_Receive+0x3e>
		rx_count = I2C_NBYTES_MAX;
 8001af2:	25ff      	movs	r5, #255	@ 0xff
		reg |= I2C_CR2_RELOAD;
 8001af4:	f044 7480 	orr.w	r4, r4, #16777216	@ 0x1000000
 8001af8:	e002      	b.n	8001b00 <I2C_Receive+0x44>
	} else {
		rx_count = nbytes;
 8001afa:	687d      	ldr	r5, [r7, #4]
		reg |= I2C_CR2_AUTOEND;
 8001afc:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
	}
	reg |= rx_count << I2C_CR2_NBYTES_Pos;
 8001b00:	042b      	lsls	r3, r5, #16
 8001b02:	431c      	orrs	r4, r3
	nbytes -= rx_count;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	1b5b      	subs	r3, r3, r5
 8001b08:	607b      	str	r3, [r7, #4]

	// Write a composed value to the I2C register
	I2Cx->CR2 = reg;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	605c      	str	r4, [r3, #4]

	// Receive data
	while (rx_count) {
 8001b0e:	e04e      	b.n	8001bae <I2C_Receive+0xf2>
		// Wait until either RXNE or NACK flag is set
		wait = delay_val;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	613b      	str	r3, [r7, #16]
		while (!((reg = I2Cx->ISR) & (I2C_ISR_RXNE | I2C_ISR_NACKF)) && --wait);
 8001b14:	bf00      	nop
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	699c      	ldr	r4, [r3, #24]
 8001b1a:	f004 0314 	and.w	r3, r4, #20
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d104      	bne.n	8001b2c <I2C_Receive+0x70>
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f4      	bne.n	8001b16 <I2C_Receive+0x5a>
		if ((reg & I2C_ISR_NACKF) || (wait == 0U)) {
 8001b2c:	f004 0310 	and.w	r3, r4, #16
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <I2C_Receive+0x7e>
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <I2C_Receive+0x82>
			return I2C_ERROR;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e04d      	b.n	8001bda <I2C_Receive+0x11e>
		}

		// Read received data
		*pBuf++ = (uint8_t)I2Cx->RXDR;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	60ba      	str	r2, [r7, #8]
 8001b48:	b2ca      	uxtb	r2, r1
 8001b4a:	701a      	strb	r2, [r3, #0]
		rx_count--;
 8001b4c:	3d01      	subs	r5, #1

		if ((rx_count == 0U) && (nbytes != 0U)) {
 8001b4e:	2d00      	cmp	r5, #0
 8001b50:	d12d      	bne.n	8001bae <I2C_Receive+0xf2>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d02a      	beq.n	8001bae <I2C_Receive+0xf2>
			// Wait until TCR flag is set (Transfer Complete Reload)
			wait = delay_val;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	613b      	str	r3, [r7, #16]
			while (!(I2Cx->ISR & I2C_ISR_TCR) && --wait);
 8001b5c:	bf00      	nop
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d104      	bne.n	8001b74 <I2C_Receive+0xb8>
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f4      	bne.n	8001b5e <I2C_Receive+0xa2>
			if (wait == 0U) {
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <I2C_Receive+0xc2>
				return I2C_ERROR;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e02d      	b.n	8001bda <I2C_Receive+0x11e>
			}

			// Configure next (or last) portion transfer
			reg = I2Cx->CR2;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	685c      	ldr	r4, [r3, #4]
			reg &= ~(I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_RELOAD);
 8001b82:	f024 737f 	bic.w	r3, r4, #66846720	@ 0x3fc0000
 8001b86:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001b8a:	461c      	mov	r4, r3
			if (nbytes > I2C_NBYTES_MAX) {
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2bff      	cmp	r3, #255	@ 0xff
 8001b90:	d903      	bls.n	8001b9a <I2C_Receive+0xde>
				rx_count = I2C_NBYTES_MAX;
 8001b92:	25ff      	movs	r5, #255	@ 0xff
				reg |= I2C_CR2_RELOAD;
 8001b94:	f044 7480 	orr.w	r4, r4, #16777216	@ 0x1000000
 8001b98:	e002      	b.n	8001ba0 <I2C_Receive+0xe4>
			} else {
				rx_count = nbytes;
 8001b9a:	687d      	ldr	r5, [r7, #4]
				reg |= I2C_CR2_AUTOEND;
 8001b9c:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
			}
			reg |= rx_count << I2C_CR2_NBYTES_Pos;
 8001ba0:	042b      	lsls	r3, r5, #16
 8001ba2:	431c      	orrs	r4, r3
			nbytes -= rx_count;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	1b5b      	subs	r3, r3, r5
 8001ba8:	607b      	str	r3, [r7, #4]
			I2Cx->CR2 = reg;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	605c      	str	r4, [r3, #4]
	while (rx_count) {
 8001bae:	2d00      	cmp	r5, #0
 8001bb0:	d1ae      	bne.n	8001b10 <I2C_Receive+0x54>
		}
	}

	// Wait for the STOP flag
	wait = delay_val;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	613b      	str	r3, [r7, #16]
	while (!(I2Cx->ISR & I2C_ISR_STOPF) && --wait);
 8001bb6:	bf00      	nop
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0320 	and.w	r3, r3, #32
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d104      	bne.n	8001bce <I2C_Receive+0x112>
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f4      	bne.n	8001bb8 <I2C_Receive+0xfc>

	return (wait == 0U) ? I2C_ERROR : I2C_SUCCESS;
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf14      	ite	ne
 8001bd4:	2301      	movne	r3, #1
 8001bd6:	2300      	moveq	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bdb0      	pop	{r4, r5, r7, pc}
 8001be2:	bf00      	nop
 8001be4:	fc009800 	.word	0xfc009800

08001be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	LoadSettings();
 8001bec:	f000 f9f4 	bl	8001fd8 <LoadSettings>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bf0:	f000 feaa 	bl	8002948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf4:	f000 f852 	bl	8001c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bf8:	f000 f988 	bl	8001f0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001bfc:	f000 f956 	bl	8001eac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001c00:	f000 f89e 	bl	8001d40 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001c04:	f000 f912 	bl	8001e2c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  InitBaro();
 8001c08:	f000 fb4e 	bl	80022a8 <InitBaro>

  printf("***********LOOP START***********\n");
 8001c0c:	481d      	ldr	r0, [pc, #116]	@ (8001c84 <main+0x9c>)
 8001c0e:	f004 fe7f 	bl	8006910 <puts>
    /* USER CODE BEGIN 3 */

	  // Let green LED blink
	  static uint32_t lastBlink;
	  static uint8_t toggle;
	  if(HAL_GetTick() - lastBlink >= BLINK_TIME){	// once every Second
 8001c12:	f000 ff09 	bl	8002a28 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	4b1b      	ldr	r3, [pc, #108]	@ (8001c88 <main+0xa0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c22:	d316      	bcc.n	8001c52 <main+0x6a>
		  lastBlink = HAL_GetTick();
 8001c24:	f000 ff00 	bl	8002a28 <HAL_GetTick>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4a17      	ldr	r2, [pc, #92]	@ (8001c88 <main+0xa0>)
 8001c2c:	6013      	str	r3, [r2, #0]
		  toggle = !toggle;
 8001c2e:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <main+0xa4>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf0c      	ite	eq
 8001c36:	2301      	moveq	r3, #1
 8001c38:	2300      	movne	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <main+0xa4>)
 8001c40:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, toggle);
 8001c42:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <main+0xa4>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	2120      	movs	r1, #32
 8001c4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c4e:	f002 fba9 	bl	80043a4 <HAL_GPIO_WritePin>
	  }

	  // Read analog voltage at A0
	  static uint32_t lastAdcRead;
	  if(HAL_GetTick() - lastAdcRead >= BATTERY_UPDATE_TIME){		// once every Second
 8001c52:	f000 fee9 	bl	8002a28 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <main+0xa8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c62:	d30a      	bcc.n	8001c7a <main+0x92>
		  lastAdcRead = HAL_GetTick();
 8001c64:	f000 fee0 	bl	8002a28 <HAL_GetTick>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4a09      	ldr	r2, [pc, #36]	@ (8001c90 <main+0xa8>)
 8001c6c:	6013      	str	r3, [r2, #0]
		  ReadVoltage(&Battery);
 8001c6e:	4809      	ldr	r0, [pc, #36]	@ (8001c94 <main+0xac>)
 8001c70:	f000 fa0a 	bl	8002088 <ReadVoltage>
		  CalcBatteryPercent(&Battery);
 8001c74:	4807      	ldr	r0, [pc, #28]	@ (8001c94 <main+0xac>)
 8001c76:	f000 fa43 	bl	8002100 <CalcBatteryPercent>
	  }

	  // Read Baro
	  ReadBaro(&Baro);
 8001c7a:	4807      	ldr	r0, [pc, #28]	@ (8001c98 <main+0xb0>)
 8001c7c:	f000 fb3c 	bl	80022f8 <ReadBaro>
  {
 8001c80:	e7c7      	b.n	8001c12 <main+0x2a>
 8001c82:	bf00      	nop
 8001c84:	080084b0 	.word	0x080084b0
 8001c88:	20000240 	.word	0x20000240
 8001c8c:	20000244 	.word	0x20000244
 8001c90:	20000248 	.word	0x20000248
 8001c94:	20000224 	.word	0x20000224
 8001c98:	20000210 	.word	0x20000210

08001c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b096      	sub	sp, #88	@ 0x58
 8001ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	2244      	movs	r2, #68	@ 0x44
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f004 ff10 	bl	8006ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001cbe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001cc2:	f002 fcc7 	bl	8004654 <HAL_PWREx_ControlVoltageScaling>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ccc:	f000 fbe2 	bl	8002494 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cd8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cda:	2310      	movs	r3, #16
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001cea:	230a      	movs	r3, #10
 8001cec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001cee:	2307      	movs	r3, #7
 8001cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f002 fcfe 	bl	8004700 <HAL_RCC_OscConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001d0a:	f000 fbc3 	bl	8002494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d0e:	230f      	movs	r3, #15
 8001d10:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d12:	2303      	movs	r3, #3
 8001d14:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d22:	463b      	mov	r3, r7
 8001d24:	2104      	movs	r1, #4
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 f8c6 	bl	8004eb8 <HAL_RCC_ClockConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d32:	f000 fbaf 	bl	8002494 <Error_Handler>
  }
}
 8001d36:	bf00      	nop
 8001d38:	3758      	adds	r7, #88	@ 0x58
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	@ 0x28
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d46:	f107 031c 	add.w	r3, r7, #28
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
 8001d60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d62:	4b2f      	ldr	r3, [pc, #188]	@ (8001e20 <MX_ADC1_Init+0xe0>)
 8001d64:	4a2f      	ldr	r2, [pc, #188]	@ (8001e24 <MX_ADC1_Init+0xe4>)
 8001d66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d68:	4b2d      	ldr	r3, [pc, #180]	@ (8001e20 <MX_ADC1_Init+0xe0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e20 <MX_ADC1_Init+0xe0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d74:	4b2a      	ldr	r3, [pc, #168]	@ (8001e20 <MX_ADC1_Init+0xe0>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d7a:	4b29      	ldr	r3, [pc, #164]	@ (8001e20 <MX_ADC1_Init+0xe0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d80:	4b27      	ldr	r3, [pc, #156]	@ (8001e20 <MX_ADC1_Init+0xe0>)
 8001d82:	2204      	movs	r2, #4
 8001d84:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d86:	4b26      	ldr	r3, [pc, #152]	@ (8001e20 <MX_ADC1_Init+0xe0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d8c:	4b24      	ldr	r3, [pc, #144]	@ (8001e20 <MX_ADC1_Init+0xe0>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001d92:	4b23      	ldr	r3, [pc, #140]	@ (8001e20 <MX_ADC1_Init+0xe0>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d98:	4b21      	ldr	r3, [pc, #132]	@ (8001e20 <MX_ADC1_Init+0xe0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001da0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e20 <MX_ADC1_Init+0xe0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e20 <MX_ADC1_Init+0xe0>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dac:	4b1c      	ldr	r3, [pc, #112]	@ (8001e20 <MX_ADC1_Init+0xe0>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001db4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e20 <MX_ADC1_Init+0xe0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001dba:	4b19      	ldr	r3, [pc, #100]	@ (8001e20 <MX_ADC1_Init+0xe0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dc2:	4817      	ldr	r0, [pc, #92]	@ (8001e20 <MX_ADC1_Init+0xe0>)
 8001dc4:	f001 f820 	bl	8002e08 <HAL_ADC_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001dce:	f000 fb61 	bl	8002494 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4810      	ldr	r0, [pc, #64]	@ (8001e20 <MX_ADC1_Init+0xe0>)
 8001dde:	f001 ffa1 	bl	8003d24 <HAL_ADCEx_MultiModeConfigChannel>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001de8:	f000 fb54 	bl	8002494 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001dec:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <MX_ADC1_Init+0xe8>)
 8001dee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001df0:	2306      	movs	r3, #6
 8001df2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001df8:	237f      	movs	r3, #127	@ 0x7f
 8001dfa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <MX_ADC1_Init+0xe0>)
 8001e0a:	f001 faed 	bl	80033e8 <HAL_ADC_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001e14:	f000 fb3e 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	3728      	adds	r7, #40	@ 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	200000a0 	.word	0x200000a0
 8001e24:	50040000 	.word	0x50040000
 8001e28:	14f00020 	.word	0x14f00020

08001e2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e32:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea4 <MX_I2C1_Init+0x78>)
 8001e34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8001e36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e38:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea8 <MX_I2C1_Init+0x7c>)
 8001e3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e3c:	4b18      	ldr	r3, [pc, #96]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e42:	4b17      	ldr	r3, [pc, #92]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e48:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e54:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e66:	480e      	ldr	r0, [pc, #56]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e68:	f002 fab4 	bl	80043d4 <HAL_I2C_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e72:	f000 fb0f 	bl	8002494 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e76:	2100      	movs	r1, #0
 8001e78:	4809      	ldr	r0, [pc, #36]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e7a:	f002 fb46 	bl	800450a <HAL_I2CEx_ConfigAnalogFilter>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e84:	f000 fb06 	bl	8002494 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4805      	ldr	r0, [pc, #20]	@ (8001ea0 <MX_I2C1_Init+0x74>)
 8001e8c:	f002 fb88 	bl	80045a0 <HAL_I2CEx_ConfigDigitalFilter>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e96:	f000 fafd 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000104 	.word	0x20000104
 8001ea4:	40005400 	.word	0x40005400
 8001ea8:	10d19ce4 	.word	0x10d19ce4

08001eac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001eb0:	4b14      	ldr	r3, [pc, #80]	@ (8001f04 <MX_USART2_UART_Init+0x58>)
 8001eb2:	4a15      	ldr	r2, [pc, #84]	@ (8001f08 <MX_USART2_UART_Init+0x5c>)
 8001eb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eb6:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <MX_USART2_UART_Init+0x58>)
 8001eb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ebc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <MX_USART2_UART_Init+0x58>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <MX_USART2_UART_Init+0x58>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <MX_USART2_UART_Init+0x58>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <MX_USART2_UART_Init+0x58>)
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <MX_USART2_UART_Init+0x58>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001edc:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <MX_USART2_UART_Init+0x58>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ee2:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <MX_USART2_UART_Init+0x58>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <MX_USART2_UART_Init+0x58>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eee:	4805      	ldr	r0, [pc, #20]	@ (8001f04 <MX_USART2_UART_Init+0x58>)
 8001ef0:	f003 fec2 	bl	8005c78 <HAL_UART_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001efa:	f000 facb 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000158 	.word	0x20000158
 8001f08:	40004400 	.word	0x40004400

08001f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	@ 0x28
 8001f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f22:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd0 <MX_GPIO_Init+0xc4>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f26:	4a2a      	ldr	r2, [pc, #168]	@ (8001fd0 <MX_GPIO_Init+0xc4>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f2e:	4b28      	ldr	r3, [pc, #160]	@ (8001fd0 <MX_GPIO_Init+0xc4>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f3a:	4b25      	ldr	r3, [pc, #148]	@ (8001fd0 <MX_GPIO_Init+0xc4>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3e:	4a24      	ldr	r2, [pc, #144]	@ (8001fd0 <MX_GPIO_Init+0xc4>)
 8001f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f46:	4b22      	ldr	r3, [pc, #136]	@ (8001fd0 <MX_GPIO_Init+0xc4>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd0 <MX_GPIO_Init+0xc4>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f56:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd0 <MX_GPIO_Init+0xc4>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd0 <MX_GPIO_Init+0xc4>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6a:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <MX_GPIO_Init+0xc4>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6e:	4a18      	ldr	r2, [pc, #96]	@ (8001fd0 <MX_GPIO_Init+0xc4>)
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f76:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <MX_GPIO_Init+0xc4>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2120      	movs	r1, #32
 8001f86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f8a:	f002 fa0b 	bl	80043a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f94:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480b      	ldr	r0, [pc, #44]	@ (8001fd4 <MX_GPIO_Init+0xc8>)
 8001fa6:	f002 f853 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001faa:	2320      	movs	r3, #32
 8001fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fc4:	f002 f844 	bl	8004050 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	@ 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	48000800 	.word	0x48000800

08001fd8 <LoadSettings>:

/* USER CODE BEGIN 4 */

void LoadSettings(){
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
	// Fill all the values from Settings.h to all structs
	Beeper.climb_threshold = 		CLIMB_THRESHOLD;
 8001fdc:	4b20      	ldr	r3, [pc, #128]	@ (8002060 <LoadSettings+0x88>)
 8001fde:	4a21      	ldr	r2, [pc, #132]	@ (8002064 <LoadSettings+0x8c>)
 8001fe0:	601a      	str	r2, [r3, #0]
	Beeper.near_climb_threshold = 	NEAR_CLIMB_THRESHOLD;
 8001fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8002060 <LoadSettings+0x88>)
 8001fe4:	4a20      	ldr	r2, [pc, #128]	@ (8002068 <LoadSettings+0x90>)
 8001fe6:	605a      	str	r2, [r3, #4]
	Beeper.sink_threshold = 		SINK_THRESHOLD;
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8002060 <LoadSettings+0x88>)
 8001fea:	4a20      	ldr	r2, [pc, #128]	@ (800206c <LoadSettings+0x94>)
 8001fec:	609a      	str	r2, [r3, #8]
	Beeper.climb_beeps_start = 		CLIMB_BEEPS_AT_THRESHOLD;
 8001fee:	4b1c      	ldr	r3, [pc, #112]	@ (8002060 <LoadSettings+0x88>)
 8001ff0:	4a1f      	ldr	r2, [pc, #124]	@ (8002070 <LoadSettings+0x98>)
 8001ff2:	60da      	str	r2, [r3, #12]
	Beeper.climb_beeps_stop = 		CLIMB_BEEPS_AT_MAX_VARIO;
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8002060 <LoadSettings+0x88>)
 8001ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8002074 <LoadSettings+0x9c>)
 8001ff8:	611a      	str	r2, [r3, #16]
	Beeper.start_f_climb = 			CLIMB_FREQUENCY_AT_THERSHOLD;
 8001ffa:	4b19      	ldr	r3, [pc, #100]	@ (8002060 <LoadSettings+0x88>)
 8001ffc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002000:	615a      	str	r2, [r3, #20]
	Beeper.stop_f_climb = 			CLIMB_FREQUENCY_AT_MAX_VARIO;
 8002002:	4b17      	ldr	r3, [pc, #92]	@ (8002060 <LoadSettings+0x88>)
 8002004:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8002008:	619a      	str	r2, [r3, #24]
	Beeper.start_f_sink = 			SINK_FREQUENCY_AT_THERSHOLD;
 800200a:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <LoadSettings+0x88>)
 800200c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002010:	61da      	str	r2, [r3, #28]
	Beeper.stop_f_sink = 			SINK_FREQUENCY_AT_MIN_VARIO;
 8002012:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <LoadSettings+0x88>)
 8002014:	22c8      	movs	r2, #200	@ 0xc8
 8002016:	621a      	str	r2, [r3, #32]
	Beeper.min_peep_time_start = 	MIN_PEEP_TIME_AT_THRESHOLD;
 8002018:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <LoadSettings+0x88>)
 800201a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800201e:	625a      	str	r2, [r3, #36]	@ 0x24
	Beeper.min_peep_time_stop = 	MIN_PEEP_TIME_AT_MAX_VARIO;
 8002020:	4b0f      	ldr	r3, [pc, #60]	@ (8002060 <LoadSettings+0x88>)
 8002022:	2296      	movs	r2, #150	@ 0x96
 8002024:	629a      	str	r2, [r3, #40]	@ 0x28

	Battery.voltAt0Percent = 		BAT_0;
 8002026:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <LoadSettings+0xa0>)
 8002028:	f640 4208 	movw	r2, #3080	@ 0xc08
 800202c:	609a      	str	r2, [r3, #8]
	Battery.voltAt5Percent = 		BAT_5;
 800202e:	4b12      	ldr	r3, [pc, #72]	@ (8002078 <LoadSettings+0xa0>)
 8002030:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8002034:	60da      	str	r2, [r3, #12]
	Battery.voltAt20Percent = 		BAT_20;
 8002036:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <LoadSettings+0xa0>)
 8002038:	f640 629c 	movw	r2, #3740	@ 0xe9c
 800203c:	611a      	str	r2, [r3, #16]
	Battery.voltAt75Percent = 		BAT_75;
 800203e:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <LoadSettings+0xa0>)
 8002040:	f640 7296 	movw	r2, #3990	@ 0xf96
 8002044:	615a      	str	r2, [r3, #20]
	Battery.voltAt100Percent = 		BAT_100;
 8002046:	4b0c      	ldr	r3, [pc, #48]	@ (8002078 <LoadSettings+0xa0>)
 8002048:	f241 0204 	movw	r2, #4100	@ 0x1004
 800204c:	619a      	str	r2, [r3, #24]

	Baro.preassureSealevel = 		PRASSURE_AT_SEALEVEL;
 800204e:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <LoadSettings+0xa4>)
 8002050:	4a0b      	ldr	r2, [pc, #44]	@ (8002080 <LoadSettings+0xa8>)
 8002052:	611a      	str	r2, [r3, #16]

}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	200001e0 	.word	0x200001e0
 8002064:	3e99999a 	.word	0x3e99999a
 8002068:	3dcccccd 	.word	0x3dcccccd
 800206c:	c0400000 	.word	0xc0400000
 8002070:	3fd9999a 	.word	0x3fd9999a
 8002074:	40d66666 	.word	0x40d66666
 8002078:	20000224 	.word	0x20000224
 800207c:	20000210 	.word	0x20000210
 8002080:	447d5000 	.word	0x447d5000
 8002084:	00000000 	.word	0x00000000

08002088 <ReadVoltage>:

void ReadVoltage(Battery_t *tmpBat){
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8002090:	4819      	ldr	r0, [pc, #100]	@ (80020f8 <ReadVoltage+0x70>)
 8002092:	f001 f809 	bl	80030a8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);						// 1 ms Timeout
 8002096:	2101      	movs	r1, #1
 8002098:	4817      	ldr	r0, [pc, #92]	@ (80020f8 <ReadVoltage+0x70>)
 800209a:	f001 f8bf 	bl	800321c <HAL_ADC_PollForConversion>
	uint32_t ADC_value = HAL_ADC_GetValue(&hadc1) * ADC_MULTI;
 800209e:	4816      	ldr	r0, [pc, #88]	@ (80020f8 <ReadVoltage+0x70>)
 80020a0:	f001 f994 	bl	80033cc <HAL_ADC_GetValue>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fa24 	bl	80004f4 <__aeabi_ui2d>
 80020ac:	a310      	add	r3, pc, #64	@ (adr r3, 80020f0 <ReadVoltage+0x68>)
 80020ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b2:	f7fe fa99 	bl	80005e8 <__aeabi_dmul>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4610      	mov	r0, r2
 80020bc:	4619      	mov	r1, r3
 80020be:	f7fe fd43 	bl	8000b48 <__aeabi_d2uiz>
 80020c2:	4603      	mov	r3, r0
 80020c4:	60fb      	str	r3, [r7, #12]
	uint32_t voltage = ((float)ADC_value*(float)RES_RATIO);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	ee07 3a90 	vmov	s15, r3
 80020cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80020fc <ReadVoltage+0x74>
 80020d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020dc:	ee17 3a90 	vmov	r3, s15
 80020e0:	60bb      	str	r3, [r7, #8]

	//printf("ADC value: %li\n",ADC_value);
	//printf("voltage: %li\n",voltage);

	tmpBat->voltage = voltage;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	601a      	str	r2, [r3, #0]
}
 80020e8:	bf00      	nop
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	205bc01a 	.word	0x205bc01a
 80020f4:	3fedf141 	.word	0x3fedf141
 80020f8:	200000a0 	.word	0x200000a0
 80020fc:	40bb1757 	.word	0x40bb1757

08002100 <CalcBatteryPercent>:

void CalcBatteryPercent(Battery_t *tmpBat){
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	@ 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	float x0, y0, x1, y1, yp;
	//Handle Error
	if(tmpBat->voltage < tmpBat->voltAt0Percent){
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	429a      	cmp	r2, r3
 8002112:	d203      	bcs.n	800211c <CalcBatteryPercent+0x1c>
		tmpBat->percent = 0;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	711a      	strb	r2, [r3, #4]
		return;
 800211a:	e0b7      	b.n	800228c <CalcBatteryPercent+0x18c>
	}
	if(tmpBat->voltage > tmpBat->voltAt100Percent){
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	429a      	cmp	r2, r3
 8002126:	d903      	bls.n	8002130 <CalcBatteryPercent+0x30>
		tmpBat->percent = 100;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2264      	movs	r2, #100	@ 0x64
 800212c:	711a      	strb	r2, [r3, #4]
		return;
 800212e:	e0ad      	b.n	800228c <CalcBatteryPercent+0x18c>
	}

	if(tmpBat->voltage >= tmpBat->voltAt0Percent && tmpBat->voltage < tmpBat->voltAt5Percent){
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	429a      	cmp	r2, r3
 800213a:	d31b      	bcc.n	8002174 <CalcBatteryPercent+0x74>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	429a      	cmp	r2, r3
 8002146:	d215      	bcs.n	8002174 <CalcBatteryPercent+0x74>
		x0=tmpBat->voltAt0Percent;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	ee07 3a90 	vmov	s15, r3
 8002150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002154:	edc7 7a07 	vstr	s15, [r7, #28]
		y0=0;
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
		x1=tmpBat->voltAt5Percent;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800216a:	edc7 7a05 	vstr	s15, [r7, #20]
		y1=5;
 800216e:	4b4a      	ldr	r3, [pc, #296]	@ (8002298 <CalcBatteryPercent+0x198>)
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	e061      	b.n	8002238 <CalcBatteryPercent+0x138>
	}else if(tmpBat->voltage >= tmpBat->voltAt5Percent && tmpBat->voltage < tmpBat->voltAt20Percent){
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	429a      	cmp	r2, r3
 800217e:	d31a      	bcc.n	80021b6 <CalcBatteryPercent+0xb6>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	429a      	cmp	r2, r3
 800218a:	d214      	bcs.n	80021b6 <CalcBatteryPercent+0xb6>
		x0=tmpBat->voltAt5Percent;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	ee07 3a90 	vmov	s15, r3
 8002194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002198:	edc7 7a07 	vstr	s15, [r7, #28]
		y0=5;
 800219c:	4b3e      	ldr	r3, [pc, #248]	@ (8002298 <CalcBatteryPercent+0x198>)
 800219e:	61bb      	str	r3, [r7, #24]
		x1=tmpBat->voltAt20Percent;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	ee07 3a90 	vmov	s15, r3
 80021a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ac:	edc7 7a05 	vstr	s15, [r7, #20]
		y1=20;
 80021b0:	4b3a      	ldr	r3, [pc, #232]	@ (800229c <CalcBatteryPercent+0x19c>)
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	e040      	b.n	8002238 <CalcBatteryPercent+0x138>
	}else if(tmpBat->voltage >= tmpBat->voltAt20Percent && tmpBat->voltage < tmpBat->voltAt75Percent){
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d31a      	bcc.n	80021f8 <CalcBatteryPercent+0xf8>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d214      	bcs.n	80021f8 <CalcBatteryPercent+0xf8>
		x0=tmpBat->voltAt20Percent;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021da:	edc7 7a07 	vstr	s15, [r7, #28]
		y0=20;
 80021de:	4b2f      	ldr	r3, [pc, #188]	@ (800229c <CalcBatteryPercent+0x19c>)
 80021e0:	61bb      	str	r3, [r7, #24]
		x1=tmpBat->voltAt75Percent;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ee:	edc7 7a05 	vstr	s15, [r7, #20]
		y1=75;
 80021f2:	4b2b      	ldr	r3, [pc, #172]	@ (80022a0 <CalcBatteryPercent+0x1a0>)
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	e01f      	b.n	8002238 <CalcBatteryPercent+0x138>
	}else if(tmpBat->voltage >= tmpBat->voltAt75Percent && tmpBat->voltage <= tmpBat->voltAt100Percent){
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	429a      	cmp	r2, r3
 8002202:	d319      	bcc.n	8002238 <CalcBatteryPercent+0x138>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	429a      	cmp	r2, r3
 800220e:	d813      	bhi.n	8002238 <CalcBatteryPercent+0x138>
		x0=tmpBat->voltAt75Percent;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	ee07 3a90 	vmov	s15, r3
 8002218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800221c:	edc7 7a07 	vstr	s15, [r7, #28]
		y0=75;
 8002220:	4b1f      	ldr	r3, [pc, #124]	@ (80022a0 <CalcBatteryPercent+0x1a0>)
 8002222:	61bb      	str	r3, [r7, #24]
		x1=tmpBat->voltAt100Percent;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	ee07 3a90 	vmov	s15, r3
 800222c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002230:	edc7 7a05 	vstr	s15, [r7, #20]
		y1=100;
 8002234:	4b1b      	ldr	r3, [pc, #108]	@ (80022a4 <CalcBatteryPercent+0x1a4>)
 8002236:	613b      	str	r3, [r7, #16]
	}

	yp = y0 + ((y1-y0)/(x1-x0)) * (tmpBat->voltage - x0);
 8002238:	ed97 7a04 	vldr	s14, [r7, #16]
 800223c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002240:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002244:	ed97 7a05 	vldr	s14, [r7, #20]
 8002248:	edd7 7a07 	vldr	s15, [r7, #28]
 800224c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	ee07 3a90 	vmov	s15, r3
 800225c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002260:	edd7 7a07 	vldr	s15, [r7, #28]
 8002264:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002274:	edc7 7a03 	vstr	s15, [r7, #12]
	//return (uint8_t)yp;
	tmpBat->percent = (uint8_t)yp;
 8002278:	edd7 7a03 	vldr	s15, [r7, #12]
 800227c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002280:	edc7 7a00 	vstr	s15, [r7]
 8002284:	783b      	ldrb	r3, [r7, #0]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	711a      	strb	r2, [r3, #4]
}
 800228c:	3724      	adds	r7, #36	@ 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40a00000 	.word	0x40a00000
 800229c:	41a00000 	.word	0x41a00000
 80022a0:	42960000 	.word	0x42960000
 80022a4:	42c80000 	.word	0x42c80000

080022a8 <InitBaro>:
}
float mapfloat(float x, float in_min, float in_max, float out_min, float out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void InitBaro(){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	if(BMP280_Check()== 1)
 80022ac:	f7fe ff02 	bl	80010b4 <BMP280_Check>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d103      	bne.n	80022be <InitBaro+0x16>
		printf("all good");
 80022b6:	480d      	ldr	r0, [pc, #52]	@ (80022ec <InitBaro+0x44>)
 80022b8:	f004 fac2 	bl	8006840 <iprintf>
 80022bc:	e002      	b.n	80022c4 <InitBaro+0x1c>
	else
		printf("no i2c device found");
 80022be:	480c      	ldr	r0, [pc, #48]	@ (80022f0 <InitBaro+0x48>)
 80022c0:	f004 fabe 	bl	8006840 <iprintf>

	BMP280_Read_Calibration();
 80022c4:	f7fe ff98 	bl	80011f8 <BMP280_Read_Calibration>
	// Set normal mode inactive duration (standby time)
	BMP280_SetStandby(BMP280_STBY_1s);
 80022c8:	20a0      	movs	r0, #160	@ 0xa0
 80022ca:	f7fe ff40 	bl	800114e <BMP280_SetStandby>
	// Set IIR filter constant
	BMP280_SetFilter(BMP280_FILTER_4);
 80022ce:	2008      	movs	r0, #8
 80022d0:	f7fe ff21 	bl	8001116 <BMP280_SetFilter>
	// Set oversampling for temperature
	BMP280_SetOSRST(BMP280_OSRS_T_x2);
 80022d4:	2040      	movs	r0, #64	@ 0x40
 80022d6:	f7fe ff56 	bl	8001186 <BMP280_SetOSRST>
	// Set oversampling for pressure
	BMP280_SetOSRSP(BMP280_OSRS_P_x2);
 80022da:	2008      	movs	r0, #8
 80022dc:	f7fe ff6f 	bl	80011be <BMP280_SetOSRSP>
	// Set normal mode (perpetual periodic conversion)
	BMP280_SetMode(BMP280_MODE_NORMAL);
 80022e0:	2003      	movs	r0, #3
 80022e2:	f7fe fefc 	bl	80010de <BMP280_SetMode>

}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	080084d4 	.word	0x080084d4
 80022f0:	080084e0 	.word	0x080084e0
 80022f4:	00000000 	.word	0x00000000

080022f8 <ReadBaro>:

void ReadBaro(Barometer_t *tmpBaro){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	static uint32_t conversionTimer;

	static int32_t raw_preassure, raw_temperature;


	if(HAL_GetTick() - conversionTimer > 12){
 8002300:	f000 fb92 	bl	8002a28 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	4b5c      	ldr	r3, [pc, #368]	@ (8002478 <ReadBaro+0x180>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b0c      	cmp	r3, #12
 800230e:	d908      	bls.n	8002322 <ReadBaro+0x2a>
		BMP280_Read_UTP(&raw_temperature, &raw_preassure);
 8002310:	495a      	ldr	r1, [pc, #360]	@ (800247c <ReadBaro+0x184>)
 8002312:	485b      	ldr	r0, [pc, #364]	@ (8002480 <ReadBaro+0x188>)
 8002314:	f7fe ff7c 	bl	8001210 <BMP280_Read_UTP>
		conversionTimer = HAL_GetTick();
 8002318:	f000 fb86 	bl	8002a28 <HAL_GetTick>
 800231c:	4603      	mov	r3, r0
 800231e:	4a56      	ldr	r2, [pc, #344]	@ (8002478 <ReadBaro+0x180>)
 8002320:	6013      	str	r3, [r2, #0]
	}

	if(HAL_GetTick() - lastBaroRead > BARO_UPDATE_TIME){
 8002322:	f000 fb81 	bl	8002a28 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	4b56      	ldr	r3, [pc, #344]	@ (8002484 <ReadBaro+0x18c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2bfa      	cmp	r3, #250	@ 0xfa
 8002330:	f240 8092 	bls.w	8002458 <ReadBaro+0x160>
		double baroElapsedTime = (HAL_GetTick() - lastBaroRead) / 1000.0f;	// get exact time since last read in Seconds
 8002334:	f000 fb78 	bl	8002a28 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	4b52      	ldr	r3, [pc, #328]	@ (8002484 <ReadBaro+0x18c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	ee07 3a90 	vmov	s15, r3
 8002344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002348:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8002488 <ReadBaro+0x190>
 800234c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002350:	ee16 0a90 	vmov	r0, s13
 8002354:	f7fe f8f0 	bl	8000538 <__aeabi_f2d>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		lastBaroRead = HAL_GetTick();
 8002360:	f000 fb62 	bl	8002a28 <HAL_GetTick>
 8002364:	4603      	mov	r3, r0
 8002366:	4a47      	ldr	r2, [pc, #284]	@ (8002484 <ReadBaro+0x18c>)
 8002368:	6013      	str	r3, [r2, #0]

		tmpBaro->temperature = BMP280_CalcT(raw_temperature) / 100.0;
 800236a:	4b45      	ldr	r3, [pc, #276]	@ (8002480 <ReadBaro+0x188>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe ff82 	bl	8001278 <BMP280_CalcT>
 8002374:	4603      	mov	r3, r0
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe f8cc 	bl	8000514 <__aeabi_i2d>
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	4b42      	ldr	r3, [pc, #264]	@ (800248c <ReadBaro+0x194>)
 8002382:	f7fe fa5b 	bl	800083c <__aeabi_ddiv>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	f7fe fbfb 	bl	8000b88 <__aeabi_d2f>
 8002392:	4602      	mov	r2, r0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	609a      	str	r2, [r3, #8]
		tmpBaro->preassure = BMP280_CalcP(raw_preassure) / 100000.0;
 8002398:	4b38      	ldr	r3, [pc, #224]	@ (800247c <ReadBaro+0x184>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe ffa7 	bl	80012f0 <BMP280_CalcP>
 80023a2:	4603      	mov	r3, r0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f8a5 	bl	80004f4 <__aeabi_ui2d>
 80023aa:	a32d      	add	r3, pc, #180	@ (adr r3, 8002460 <ReadBaro+0x168>)
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	f7fe fa44 	bl	800083c <__aeabi_ddiv>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7fe fbe4 	bl	8000b88 <__aeabi_d2f>
 80023c0:	4602      	mov	r2, r0
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	601a      	str	r2, [r3, #0]

		float r= tmpBaro->preassure / tmpBaro->preassureSealevel;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	edd3 6a00 	vldr	s13, [r3]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	ed93 7a04 	vldr	s14, [r3, #16]
 80023d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023d6:	edc7 7a05 	vstr	s15, [r7, #20]
		float newAltitude = (1.0 - pow(r,0.1902949f))*44330.77f;
 80023da:	6978      	ldr	r0, [r7, #20]
 80023dc:	f7fe f8ac 	bl	8000538 <__aeabi_f2d>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	ed9f 1b20 	vldr	d1, [pc, #128]	@ 8002468 <ReadBaro+0x170>
 80023e8:	ec43 2b10 	vmov	d0, r2, r3
 80023ec:	f005 f8f2 	bl	80075d4 <pow>
 80023f0:	ec53 2b10 	vmov	r2, r3, d0
 80023f4:	f04f 0000 	mov.w	r0, #0
 80023f8:	4925      	ldr	r1, [pc, #148]	@ (8002490 <ReadBaro+0x198>)
 80023fa:	f7fd ff3d 	bl	8000278 <__aeabi_dsub>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	a31a      	add	r3, pc, #104	@ (adr r3, 8002470 <ReadBaro+0x178>)
 8002408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240c:	f7fe f8ec 	bl	80005e8 <__aeabi_dmul>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	f7fe fbb6 	bl	8000b88 <__aeabi_d2f>
 800241c:	4603      	mov	r3, r0
 800241e:	613b      	str	r3, [r7, #16]

		float altitudeDelta = tmpBaro->altitude - newAltitude;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	ed93 7a01 	vldr	s14, [r3, #4]
 8002426:	edd7 7a04 	vldr	s15, [r7, #16]
 800242a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800242e:	edc7 7a03 	vstr	s15, [r7, #12]
		tmpBaro->verticalSpeed = (altitudeDelta / baroElapsedTime);
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f7fe f880 	bl	8000538 <__aeabi_f2d>
 8002438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800243c:	f7fe f9fe 	bl	800083c <__aeabi_ddiv>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	f7fe fb9e 	bl	8000b88 <__aeabi_d2f>
 800244c:	4602      	mov	r2, r0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	60da      	str	r2, [r3, #12]

		tmpBaro->altitude = newAltitude;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	605a      	str	r2, [r3, #4]
	}
}
 8002458:	bf00      	nop
 800245a:	3720      	adds	r7, #32
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	00000000 	.word	0x00000000
 8002464:	40f86a00 	.word	0x40f86a00
 8002468:	60000000 	.word	0x60000000
 800246c:	3fc85b95 	.word	0x3fc85b95
 8002470:	a0000000 	.word	0xa0000000
 8002474:	40e5a558 	.word	0x40e5a558
 8002478:	2000024c 	.word	0x2000024c
 800247c:	20000254 	.word	0x20000254
 8002480:	20000250 	.word	0x20000250
 8002484:	20000258 	.word	0x20000258
 8002488:	447a0000 	.word	0x447a0000
 800248c:	40590000 	.word	0x40590000
 8002490:	3ff00000 	.word	0x3ff00000

08002494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002498:	b672      	cpsid	i
}
 800249a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <Error_Handler+0x8>

080024a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	4b0f      	ldr	r3, [pc, #60]	@ (80024e4 <HAL_MspInit+0x44>)
 80024a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024aa:	4a0e      	ldr	r2, [pc, #56]	@ (80024e4 <HAL_MspInit+0x44>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80024b2:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <HAL_MspInit+0x44>)
 80024b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	4b09      	ldr	r3, [pc, #36]	@ (80024e4 <HAL_MspInit+0x44>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c2:	4a08      	ldr	r2, [pc, #32]	@ (80024e4 <HAL_MspInit+0x44>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ca:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <HAL_MspInit+0x44>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000

080024e8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b0ac      	sub	sp, #176	@ 0xb0
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	2288      	movs	r2, #136	@ 0x88
 8002506:	2100      	movs	r1, #0
 8002508:	4618      	mov	r0, r3
 800250a:	f004 fae1 	bl	8006ad0 <memset>
  if(hadc->Instance==ADC1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a27      	ldr	r2, [pc, #156]	@ (80025b0 <HAL_ADC_MspInit+0xc8>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d147      	bne.n	80025a8 <HAL_ADC_MspInit+0xc0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002518:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800251c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800251e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002522:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002526:	2302      	movs	r3, #2
 8002528:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800252a:	2301      	movs	r3, #1
 800252c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800252e:	2308      	movs	r3, #8
 8002530:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002532:	2307      	movs	r3, #7
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002536:	2302      	movs	r3, #2
 8002538:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800253a:	2302      	movs	r3, #2
 800253c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800253e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002542:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	4618      	mov	r0, r3
 800254a:	f002 fed9 	bl	8005300 <HAL_RCCEx_PeriphCLKConfig>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002554:	f7ff ff9e 	bl	8002494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002558:	4b16      	ldr	r3, [pc, #88]	@ (80025b4 <HAL_ADC_MspInit+0xcc>)
 800255a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255c:	4a15      	ldr	r2, [pc, #84]	@ (80025b4 <HAL_ADC_MspInit+0xcc>)
 800255e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002562:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002564:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <HAL_ADC_MspInit+0xcc>)
 8002566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002570:	4b10      	ldr	r3, [pc, #64]	@ (80025b4 <HAL_ADC_MspInit+0xcc>)
 8002572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002574:	4a0f      	ldr	r2, [pc, #60]	@ (80025b4 <HAL_ADC_MspInit+0xcc>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800257c:	4b0d      	ldr	r3, [pc, #52]	@ (80025b4 <HAL_ADC_MspInit+0xcc>)
 800257e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Analog_IN_A0_ADC1_IN5_Pin;
 8002588:	2301      	movs	r3, #1
 800258a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800258e:	230b      	movs	r3, #11
 8002590:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(Analog_IN_A0_ADC1_IN5_GPIO_Port, &GPIO_InitStruct);
 800259a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800259e:	4619      	mov	r1, r3
 80025a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025a4:	f001 fd54 	bl	8004050 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80025a8:	bf00      	nop
 80025aa:	37b0      	adds	r7, #176	@ 0xb0
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	50040000 	.word	0x50040000
 80025b4:	40021000 	.word	0x40021000

080025b8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b0ac      	sub	sp, #176	@ 0xb0
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	2288      	movs	r2, #136	@ 0x88
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f004 fa79 	bl	8006ad0 <memset>
  if(hi2c->Instance==I2C1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a21      	ldr	r2, [pc, #132]	@ (8002668 <HAL_I2C_MspInit+0xb0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d13b      	bne.n	8002660 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80025e8:	2340      	movs	r3, #64	@ 0x40
 80025ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025ec:	2300      	movs	r3, #0
 80025ee:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	4618      	mov	r0, r3
 80025f6:	f002 fe83 	bl	8005300 <HAL_RCCEx_PeriphCLKConfig>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002600:	f7ff ff48 	bl	8002494 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002604:	4b19      	ldr	r3, [pc, #100]	@ (800266c <HAL_I2C_MspInit+0xb4>)
 8002606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002608:	4a18      	ldr	r2, [pc, #96]	@ (800266c <HAL_I2C_MspInit+0xb4>)
 800260a:	f043 0302 	orr.w	r3, r3, #2
 800260e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002610:	4b16      	ldr	r3, [pc, #88]	@ (800266c <HAL_I2C_MspInit+0xb4>)
 8002612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800261c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002620:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002624:	2312      	movs	r3, #18
 8002626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002630:	2303      	movs	r3, #3
 8002632:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002636:	2304      	movs	r3, #4
 8002638:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002640:	4619      	mov	r1, r3
 8002642:	480b      	ldr	r0, [pc, #44]	@ (8002670 <HAL_I2C_MspInit+0xb8>)
 8002644:	f001 fd04 	bl	8004050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002648:	4b08      	ldr	r3, [pc, #32]	@ (800266c <HAL_I2C_MspInit+0xb4>)
 800264a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264c:	4a07      	ldr	r2, [pc, #28]	@ (800266c <HAL_I2C_MspInit+0xb4>)
 800264e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002652:	6593      	str	r3, [r2, #88]	@ 0x58
 8002654:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HAL_I2C_MspInit+0xb4>)
 8002656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002658:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002660:	bf00      	nop
 8002662:	37b0      	adds	r7, #176	@ 0xb0
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40005400 	.word	0x40005400
 800266c:	40021000 	.word	0x40021000
 8002670:	48000400 	.word	0x48000400

08002674 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b0ac      	sub	sp, #176	@ 0xb0
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	2288      	movs	r2, #136	@ 0x88
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f004 fa1b 	bl	8006ad0 <memset>
  if(huart->Instance==USART2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a21      	ldr	r2, [pc, #132]	@ (8002724 <HAL_UART_MspInit+0xb0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d13b      	bne.n	800271c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026a4:	2302      	movs	r3, #2
 80026a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80026a8:	2300      	movs	r3, #0
 80026aa:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	4618      	mov	r0, r3
 80026b2:	f002 fe25 	bl	8005300 <HAL_RCCEx_PeriphCLKConfig>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026bc:	f7ff feea 	bl	8002494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026c0:	4b19      	ldr	r3, [pc, #100]	@ (8002728 <HAL_UART_MspInit+0xb4>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c4:	4a18      	ldr	r2, [pc, #96]	@ (8002728 <HAL_UART_MspInit+0xb4>)
 80026c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80026cc:	4b16      	ldr	r3, [pc, #88]	@ (8002728 <HAL_UART_MspInit+0xb4>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d8:	4b13      	ldr	r3, [pc, #76]	@ (8002728 <HAL_UART_MspInit+0xb4>)
 80026da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026dc:	4a12      	ldr	r2, [pc, #72]	@ (8002728 <HAL_UART_MspInit+0xb4>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026e4:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <HAL_UART_MspInit+0xb4>)
 80026e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026f0:	230c      	movs	r3, #12
 80026f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002702:	2303      	movs	r3, #3
 8002704:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002708:	2307      	movs	r3, #7
 800270a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002712:	4619      	mov	r1, r3
 8002714:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002718:	f001 fc9a 	bl	8004050 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800271c:	bf00      	nop
 800271e:	37b0      	adds	r7, #176	@ 0xb0
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40004400 	.word	0x40004400
 8002728:	40021000 	.word	0x40021000

0800272c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <NMI_Handler+0x4>

08002734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002738:	bf00      	nop
 800273a:	e7fd      	b.n	8002738 <HardFault_Handler+0x4>

0800273c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002740:	bf00      	nop
 8002742:	e7fd      	b.n	8002740 <MemManage_Handler+0x4>

08002744 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <BusFault_Handler+0x4>

0800274c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002750:	bf00      	nop
 8002752:	e7fd      	b.n	8002750 <UsageFault_Handler+0x4>

08002754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002782:	f000 f93d 	bl	8002a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}

0800278a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	e00a      	b.n	80027b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800279c:	f3af 8000 	nop.w
 80027a0:	4601      	mov	r1, r0
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	60ba      	str	r2, [r7, #8]
 80027a8:	b2ca      	uxtb	r2, r1
 80027aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	3301      	adds	r3, #1
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	dbf0      	blt.n	800279c <_read+0x12>
  }

  return len;
 80027ba:	687b      	ldr	r3, [r7, #4]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	e009      	b.n	80027ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	60ba      	str	r2, [r7, #8]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	3301      	adds	r3, #1
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	dbf1      	blt.n	80027d6 <_write+0x12>
  }
  return len;
 80027f2:	687b      	ldr	r3, [r7, #4]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <_close>:

int _close(int file)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002824:	605a      	str	r2, [r3, #4]
  return 0;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <_isatty>:

int _isatty(int file)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800283c:	2301      	movs	r3, #1
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800284a:	b480      	push	{r7}
 800284c:	b085      	sub	sp, #20
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800286c:	4a14      	ldr	r2, [pc, #80]	@ (80028c0 <_sbrk+0x5c>)
 800286e:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <_sbrk+0x60>)
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002878:	4b13      	ldr	r3, [pc, #76]	@ (80028c8 <_sbrk+0x64>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d102      	bne.n	8002886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002880:	4b11      	ldr	r3, [pc, #68]	@ (80028c8 <_sbrk+0x64>)
 8002882:	4a12      	ldr	r2, [pc, #72]	@ (80028cc <_sbrk+0x68>)
 8002884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002886:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <_sbrk+0x64>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	429a      	cmp	r2, r3
 8002892:	d207      	bcs.n	80028a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002894:	f004 f96a 	bl	8006b6c <__errno>
 8002898:	4603      	mov	r3, r0
 800289a:	220c      	movs	r2, #12
 800289c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295
 80028a2:	e009      	b.n	80028b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a4:	4b08      	ldr	r3, [pc, #32]	@ (80028c8 <_sbrk+0x64>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028aa:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <_sbrk+0x64>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	4a05      	ldr	r2, [pc, #20]	@ (80028c8 <_sbrk+0x64>)
 80028b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028b6:	68fb      	ldr	r3, [r7, #12]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20018000 	.word	0x20018000
 80028c4:	00000400 	.word	0x00000400
 80028c8:	2000025c 	.word	0x2000025c
 80028cc:	200003b0 	.word	0x200003b0

080028d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028d4:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <SystemInit+0x20>)
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028da:	4a05      	ldr	r2, [pc, #20]	@ (80028f0 <SystemInit+0x20>)
 80028dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80028f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800292c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028f8:	f7ff ffea 	bl	80028d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028fc:	480c      	ldr	r0, [pc, #48]	@ (8002930 <LoopForever+0x6>)
  ldr r1, =_edata
 80028fe:	490d      	ldr	r1, [pc, #52]	@ (8002934 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002900:	4a0d      	ldr	r2, [pc, #52]	@ (8002938 <LoopForever+0xe>)
  movs r3, #0
 8002902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002904:	e002      	b.n	800290c <LoopCopyDataInit>

08002906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800290a:	3304      	adds	r3, #4

0800290c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800290c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800290e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002910:	d3f9      	bcc.n	8002906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002912:	4a0a      	ldr	r2, [pc, #40]	@ (800293c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002914:	4c0a      	ldr	r4, [pc, #40]	@ (8002940 <LoopForever+0x16>)
  movs r3, #0
 8002916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002918:	e001      	b.n	800291e <LoopFillZerobss>

0800291a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800291a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800291c:	3204      	adds	r2, #4

0800291e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800291e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002920:	d3fb      	bcc.n	800291a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002922:	f004 f929 	bl	8006b78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002926:	f7ff f95f 	bl	8001be8 <main>

0800292a <LoopForever>:

LoopForever:
    b LoopForever
 800292a:	e7fe      	b.n	800292a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800292c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002934:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002938:	080085c0 	.word	0x080085c0
  ldr r2, =_sbss
 800293c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002940:	200003b0 	.word	0x200003b0

08002944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002944:	e7fe      	b.n	8002944 <ADC1_2_IRQHandler>
	...

08002948 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002952:	4b0c      	ldr	r3, [pc, #48]	@ (8002984 <HAL_Init+0x3c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a0b      	ldr	r2, [pc, #44]	@ (8002984 <HAL_Init+0x3c>)
 8002958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800295c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800295e:	2003      	movs	r0, #3
 8002960:	f001 fb42 	bl	8003fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002964:	2000      	movs	r0, #0
 8002966:	f000 f80f 	bl	8002988 <HAL_InitTick>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d002      	beq.n	8002976 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	71fb      	strb	r3, [r7, #7]
 8002974:	e001      	b.n	800297a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002976:	f7ff fd93 	bl	80024a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800297a:	79fb      	ldrb	r3, [r7, #7]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40022000 	.word	0x40022000

08002988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002994:	4b17      	ldr	r3, [pc, #92]	@ (80029f4 <HAL_InitTick+0x6c>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d023      	beq.n	80029e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800299c:	4b16      	ldr	r3, [pc, #88]	@ (80029f8 <HAL_InitTick+0x70>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b14      	ldr	r3, [pc, #80]	@ (80029f4 <HAL_InitTick+0x6c>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	4619      	mov	r1, r3
 80029a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b2:	4618      	mov	r0, r3
 80029b4:	f001 fb3f 	bl	8004036 <HAL_SYSTICK_Config>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10f      	bne.n	80029de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b0f      	cmp	r3, #15
 80029c2:	d809      	bhi.n	80029d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c4:	2200      	movs	r2, #0
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f001 fb17 	bl	8003ffe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029d0:	4a0a      	ldr	r2, [pc, #40]	@ (80029fc <HAL_InitTick+0x74>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	e007      	b.n	80029e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
 80029dc:	e004      	b.n	80029e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
 80029e2:	e001      	b.n	80029e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000008 	.word	0x20000008
 80029f8:	20000000 	.word	0x20000000
 80029fc:	20000004 	.word	0x20000004

08002a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a04:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_IncTick+0x20>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <HAL_IncTick+0x24>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4413      	add	r3, r2
 8002a10:	4a04      	ldr	r2, [pc, #16]	@ (8002a24 <HAL_IncTick+0x24>)
 8002a12:	6013      	str	r3, [r2, #0]
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20000008 	.word	0x20000008
 8002a24:	20000260 	.word	0x20000260

08002a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a2c:	4b03      	ldr	r3, [pc, #12]	@ (8002a3c <HAL_GetTick+0x14>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000260 	.word	0x20000260

08002a40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	609a      	str	r2, [r3, #8]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3360      	adds	r3, #96	@ 0x60
 8002aba:	461a      	mov	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b08      	ldr	r3, [pc, #32]	@ (8002aec <LL_ADC_SetOffset+0x44>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ae0:	bf00      	nop
 8002ae2:	371c      	adds	r7, #28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	03fff000 	.word	0x03fff000

08002af0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3360      	adds	r3, #96	@ 0x60
 8002afe:	461a      	mov	r2, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3360      	adds	r3, #96	@ 0x60
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	431a      	orrs	r2, r3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b46:	bf00      	nop
 8002b48:	371c      	adds	r7, #28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3330      	adds	r3, #48	@ 0x30
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	4413      	add	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	211f      	movs	r1, #31
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	401a      	ands	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	0e9b      	lsrs	r3, r3, #26
 8002bb0:	f003 011f 	and.w	r1, r3, #31
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f003 031f 	and.w	r3, r3, #31
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bc4:	bf00      	nop
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	3314      	adds	r3, #20
 8002be0:	461a      	mov	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	0e5b      	lsrs	r3, r3, #25
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	4413      	add	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	0d1b      	lsrs	r3, r3, #20
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	2107      	movs	r1, #7
 8002bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	401a      	ands	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	0d1b      	lsrs	r3, r3, #20
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	fa01 f303 	lsl.w	r3, r1, r3
 8002c14:	431a      	orrs	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c40:	43db      	mvns	r3, r3
 8002c42:	401a      	ands	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f003 0318 	and.w	r3, r3, #24
 8002c4a:	4908      	ldr	r1, [pc, #32]	@ (8002c6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c4c:	40d9      	lsrs	r1, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	400b      	ands	r3, r1
 8002c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c56:	431a      	orrs	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	0007ffff 	.word	0x0007ffff

08002c70 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 031f 	and.w	r3, r3, #31
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002cb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6093      	str	r3, [r2, #8]
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ce0:	d101      	bne.n	8002ce6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002d04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d08:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d30:	d101      	bne.n	8002d36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d58:	f043 0201 	orr.w	r2, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <LL_ADC_IsEnabled+0x18>
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <LL_ADC_IsEnabled+0x1a>
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002da2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002da6:	f043 0204 	orr.w	r2, r3, #4
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d101      	bne.n	8002dd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d101      	bne.n	8002df8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b089      	sub	sp, #36	@ 0x24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e130      	b.n	8003084 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d109      	bne.n	8002e44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff fb59 	bl	80024e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff3f 	bl	8002ccc <LL_ADC_IsDeepPowerDownEnabled>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d004      	beq.n	8002e5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff25 	bl	8002ca8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff ff5a 	bl	8002d1c <LL_ADC_IsInternalRegulatorEnabled>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d115      	bne.n	8002e9a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff ff3e 	bl	8002cf4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e78:	4b84      	ldr	r3, [pc, #528]	@ (800308c <HAL_ADC_Init+0x284>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	099b      	lsrs	r3, r3, #6
 8002e7e:	4a84      	ldr	r2, [pc, #528]	@ (8003090 <HAL_ADC_Init+0x288>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	3301      	adds	r3, #1
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e8c:	e002      	b.n	8002e94 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3b01      	subs	r3, #1
 8002e92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f9      	bne.n	8002e8e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff ff3c 	bl	8002d1c <LL_ADC_IsInternalRegulatorEnabled>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10d      	bne.n	8002ec6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eae:	f043 0210 	orr.w	r2, r3, #16
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eba:	f043 0201 	orr.w	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff ff75 	bl	8002dba <LL_ADC_REG_IsConversionOngoing>
 8002ed0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f040 80c9 	bne.w	8003072 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 80c5 	bne.w	8003072 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002ef0:	f043 0202 	orr.w	r2, r3, #2
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff35 	bl	8002d6c <LL_ADC_IsEnabled>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d115      	bne.n	8002f34 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f08:	4862      	ldr	r0, [pc, #392]	@ (8003094 <HAL_ADC_Init+0x28c>)
 8002f0a:	f7ff ff2f 	bl	8002d6c <LL_ADC_IsEnabled>
 8002f0e:	4604      	mov	r4, r0
 8002f10:	4861      	ldr	r0, [pc, #388]	@ (8003098 <HAL_ADC_Init+0x290>)
 8002f12:	f7ff ff2b 	bl	8002d6c <LL_ADC_IsEnabled>
 8002f16:	4603      	mov	r3, r0
 8002f18:	431c      	orrs	r4, r3
 8002f1a:	4860      	ldr	r0, [pc, #384]	@ (800309c <HAL_ADC_Init+0x294>)
 8002f1c:	f7ff ff26 	bl	8002d6c <LL_ADC_IsEnabled>
 8002f20:	4603      	mov	r3, r0
 8002f22:	4323      	orrs	r3, r4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d105      	bne.n	8002f34 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	485c      	ldr	r0, [pc, #368]	@ (80030a0 <HAL_ADC_Init+0x298>)
 8002f30:	f7ff fd86 	bl	8002a40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	7e5b      	ldrb	r3, [r3, #25]
 8002f38:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f3e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002f44:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002f4a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f52:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d106      	bne.n	8002f70 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f66:	3b01      	subs	r3, #1
 8002f68:	045b      	lsls	r3, r3, #17
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d009      	beq.n	8002f8c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f84:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	4b44      	ldr	r3, [pc, #272]	@ (80030a4 <HAL_ADC_Init+0x29c>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	69b9      	ldr	r1, [r7, #24]
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff1b 	bl	8002de0 <LL_ADC_INJ_IsConversionOngoing>
 8002faa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d13d      	bne.n	800302e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d13a      	bne.n	800302e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fbc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002fc4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002fd4:	f023 0302 	bic.w	r3, r3, #2
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	69b9      	ldr	r1, [r7, #24]
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d118      	bne.n	800301e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002ff6:	f023 0304 	bic.w	r3, r3, #4
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003002:	4311      	orrs	r1, r2
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003008:	4311      	orrs	r1, r2
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800300e:	430a      	orrs	r2, r1
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	611a      	str	r2, [r3, #16]
 800301c:	e007      	b.n	800302e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0201 	bic.w	r2, r2, #1
 800302c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d10c      	bne.n	8003050 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303c:	f023 010f 	bic.w	r1, r3, #15
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	1e5a      	subs	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	631a      	str	r2, [r3, #48]	@ 0x30
 800304e:	e007      	b.n	8003060 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 020f 	bic.w	r2, r2, #15
 800305e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003064:	f023 0303 	bic.w	r3, r3, #3
 8003068:	f043 0201 	orr.w	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003070:	e007      	b.n	8003082 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003076:	f043 0210 	orr.w	r2, r3, #16
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003082:	7ffb      	ldrb	r3, [r7, #31]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3724      	adds	r7, #36	@ 0x24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd90      	pop	{r4, r7, pc}
 800308c:	20000000 	.word	0x20000000
 8003090:	053e2d63 	.word	0x053e2d63
 8003094:	50040000 	.word	0x50040000
 8003098:	50040100 	.word	0x50040100
 800309c:	50040200 	.word	0x50040200
 80030a0:	50040300 	.word	0x50040300
 80030a4:	fff0c007 	.word	0xfff0c007

080030a8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030b0:	4857      	ldr	r0, [pc, #348]	@ (8003210 <HAL_ADC_Start+0x168>)
 80030b2:	f7ff fddd 	bl	8002c70 <LL_ADC_GetMultimode>
 80030b6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fe7c 	bl	8002dba <LL_ADC_REG_IsConversionOngoing>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f040 809c 	bne.w	8003202 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_ADC_Start+0x30>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e097      	b.n	8003208 <HAL_ADC_Start+0x160>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fd73 	bl	8003bcc <ADC_Enable>
 80030e6:	4603      	mov	r3, r0
 80030e8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f040 8083 	bne.w	80031f8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030fa:	f023 0301 	bic.w	r3, r3, #1
 80030fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a42      	ldr	r2, [pc, #264]	@ (8003214 <HAL_ADC_Start+0x16c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d002      	beq.n	8003116 <HAL_ADC_Start+0x6e>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	e000      	b.n	8003118 <HAL_ADC_Start+0x70>
 8003116:	4b40      	ldr	r3, [pc, #256]	@ (8003218 <HAL_ADC_Start+0x170>)
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	4293      	cmp	r3, r2
 800311e:	d002      	beq.n	8003126 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d105      	bne.n	8003132 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003136:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800313a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800313e:	d106      	bne.n	800314e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003144:	f023 0206 	bic.w	r2, r3, #6
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	659a      	str	r2, [r3, #88]	@ 0x58
 800314c:	e002      	b.n	8003154 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	221c      	movs	r2, #28
 800315a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a2a      	ldr	r2, [pc, #168]	@ (8003214 <HAL_ADC_Start+0x16c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d002      	beq.n	8003174 <HAL_ADC_Start+0xcc>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	e000      	b.n	8003176 <HAL_ADC_Start+0xce>
 8003174:	4b28      	ldr	r3, [pc, #160]	@ (8003218 <HAL_ADC_Start+0x170>)
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	4293      	cmp	r3, r2
 800317c:	d008      	beq.n	8003190 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	2b05      	cmp	r3, #5
 8003188:	d002      	beq.n	8003190 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b09      	cmp	r3, #9
 800318e:	d114      	bne.n	80031ba <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d007      	beq.n	80031ae <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031a6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fded 	bl	8002d92 <LL_ADC_REG_StartConversion>
 80031b8:	e025      	b.n	8003206 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a12      	ldr	r2, [pc, #72]	@ (8003214 <HAL_ADC_Start+0x16c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d002      	beq.n	80031d6 <HAL_ADC_Start+0x12e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	e000      	b.n	80031d8 <HAL_ADC_Start+0x130>
 80031d6:	4b10      	ldr	r3, [pc, #64]	@ (8003218 <HAL_ADC_Start+0x170>)
 80031d8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00f      	beq.n	8003206 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	655a      	str	r2, [r3, #84]	@ 0x54
 80031f6:	e006      	b.n	8003206 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003200:	e001      	b.n	8003206 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003202:	2302      	movs	r3, #2
 8003204:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003206:	7dfb      	ldrb	r3, [r7, #23]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	50040300 	.word	0x50040300
 8003214:	50040100 	.word	0x50040100
 8003218:	50040000 	.word	0x50040000

0800321c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003226:	4866      	ldr	r0, [pc, #408]	@ (80033c0 <HAL_ADC_PollForConversion+0x1a4>)
 8003228:	f7ff fd22 	bl	8002c70 <LL_ADC_GetMultimode>
 800322c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	2b08      	cmp	r3, #8
 8003234:	d102      	bne.n	800323c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003236:	2308      	movs	r3, #8
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	e02a      	b.n	8003292 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b05      	cmp	r3, #5
 8003246:	d002      	beq.n	800324e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b09      	cmp	r3, #9
 800324c:	d111      	bne.n	8003272 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d007      	beq.n	800326c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0a4      	b.n	80033b6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800326c:	2304      	movs	r3, #4
 800326e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003270:	e00f      	b.n	8003292 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003272:	4853      	ldr	r0, [pc, #332]	@ (80033c0 <HAL_ADC_PollForConversion+0x1a4>)
 8003274:	f7ff fd0a 	bl	8002c8c <LL_ADC_GetMultiDMATransfer>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d007      	beq.n	800328e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003282:	f043 0220 	orr.w	r2, r3, #32
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e093      	b.n	80033b6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800328e:	2304      	movs	r3, #4
 8003290:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003292:	f7ff fbc9 	bl	8002a28 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003298:	e021      	b.n	80032de <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d01d      	beq.n	80032de <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80032a2:	f7ff fbc1 	bl	8002a28 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d302      	bcc.n	80032b8 <HAL_ADC_PollForConversion+0x9c>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d112      	bne.n	80032de <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10b      	bne.n	80032de <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ca:	f043 0204 	orr.w	r2, r3, #4
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e06b      	b.n	80033b6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0d6      	beq.n	800329a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fc28 	bl	8002b52 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01c      	beq.n	8003342 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	7e5b      	ldrb	r3, [r3, #25]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d118      	bne.n	8003342 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b08      	cmp	r3, #8
 800331c:	d111      	bne.n	8003342 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003322:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800332e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d105      	bne.n	8003342 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333a:	f043 0201 	orr.w	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1f      	ldr	r2, [pc, #124]	@ (80033c4 <HAL_ADC_PollForConversion+0x1a8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d002      	beq.n	8003352 <HAL_ADC_PollForConversion+0x136>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	e000      	b.n	8003354 <HAL_ADC_PollForConversion+0x138>
 8003352:	4b1d      	ldr	r3, [pc, #116]	@ (80033c8 <HAL_ADC_PollForConversion+0x1ac>)
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	4293      	cmp	r3, r2
 800335a:	d008      	beq.n	800336e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2b05      	cmp	r3, #5
 8003366:	d002      	beq.n	800336e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2b09      	cmp	r3, #9
 800336c:	d104      	bne.n	8003378 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	e00c      	b.n	8003392 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a11      	ldr	r2, [pc, #68]	@ (80033c4 <HAL_ADC_PollForConversion+0x1a8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d002      	beq.n	8003388 <HAL_ADC_PollForConversion+0x16c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	e000      	b.n	800338a <HAL_ADC_PollForConversion+0x16e>
 8003388:	4b0f      	ldr	r3, [pc, #60]	@ (80033c8 <HAL_ADC_PollForConversion+0x1ac>)
 800338a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	2b08      	cmp	r3, #8
 8003396:	d104      	bne.n	80033a2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2208      	movs	r2, #8
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e008      	b.n	80033b4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d103      	bne.n	80033b4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	220c      	movs	r2, #12
 80033b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3720      	adds	r7, #32
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	50040300 	.word	0x50040300
 80033c4:	50040100 	.word	0x50040100
 80033c8:	50040000 	.word	0x50040000

080033cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b0b6      	sub	sp, #216	@ 0xd8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_ADC_ConfigChannel+0x22>
 8003406:	2302      	movs	r3, #2
 8003408:	e3c9      	b.n	8003b9e <HAL_ADC_ConfigChannel+0x7b6>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fccf 	bl	8002dba <LL_ADC_REG_IsConversionOngoing>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	f040 83aa 	bne.w	8003b78 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b05      	cmp	r3, #5
 8003432:	d824      	bhi.n	800347e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	3b02      	subs	r3, #2
 800343a:	2b03      	cmp	r3, #3
 800343c:	d81b      	bhi.n	8003476 <HAL_ADC_ConfigChannel+0x8e>
 800343e:	a201      	add	r2, pc, #4	@ (adr r2, 8003444 <HAL_ADC_ConfigChannel+0x5c>)
 8003440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003444:	08003455 	.word	0x08003455
 8003448:	0800345d 	.word	0x0800345d
 800344c:	08003465 	.word	0x08003465
 8003450:	0800346d 	.word	0x0800346d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003454:	230c      	movs	r3, #12
 8003456:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800345a:	e010      	b.n	800347e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800345c:	2312      	movs	r3, #18
 800345e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003462:	e00c      	b.n	800347e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003464:	2318      	movs	r3, #24
 8003466:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800346a:	e008      	b.n	800347e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800346c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003474:	e003      	b.n	800347e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003476:	2306      	movs	r3, #6
 8003478:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800347c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800348c:	f7ff fb74 	bl	8002b78 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fc90 	bl	8002dba <LL_ADC_REG_IsConversionOngoing>
 800349a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fc9c 	bl	8002de0 <LL_ADC_INJ_IsConversionOngoing>
 80034a8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f040 81a4 	bne.w	80037fe <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f040 819f 	bne.w	80037fe <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6819      	ldr	r1, [r3, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	461a      	mov	r2, r3
 80034ce:	f7ff fb7f 	bl	8002bd0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d00a      	beq.n	800350a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6919      	ldr	r1, [r3, #16]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003504:	f7ff fad0 	bl	8002aa8 <LL_ADC_SetOffset>
 8003508:	e179      	b.n	80037fe <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff faed 	bl	8002af0 <LL_ADC_GetOffsetChannel>
 8003516:	4603      	mov	r3, r0
 8003518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x14e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2100      	movs	r1, #0
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff fae2 	bl	8002af0 <LL_ADC_GetOffsetChannel>
 800352c:	4603      	mov	r3, r0
 800352e:	0e9b      	lsrs	r3, r3, #26
 8003530:	f003 021f 	and.w	r2, r3, #31
 8003534:	e01e      	b.n	8003574 <HAL_ADC_ConfigChannel+0x18c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2100      	movs	r1, #0
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fad7 	bl	8002af0 <LL_ADC_GetOffsetChannel>
 8003542:	4603      	mov	r3, r0
 8003544:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800354c:	fa93 f3a3 	rbit	r3, r3
 8003550:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003554:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003558:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800355c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003564:	2320      	movs	r3, #32
 8003566:	e004      	b.n	8003572 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003568:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800356c:	fab3 f383 	clz	r3, r3
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357c:	2b00      	cmp	r3, #0
 800357e:	d105      	bne.n	800358c <HAL_ADC_ConfigChannel+0x1a4>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	0e9b      	lsrs	r3, r3, #26
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	e018      	b.n	80035be <HAL_ADC_ConfigChannel+0x1d6>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80035a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80035a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80035b0:	2320      	movs	r3, #32
 80035b2:	e004      	b.n	80035be <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80035b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035be:	429a      	cmp	r2, r3
 80035c0:	d106      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2200      	movs	r2, #0
 80035c8:	2100      	movs	r1, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff faa6 	bl	8002b1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2101      	movs	r1, #1
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff fa8a 	bl	8002af0 <LL_ADC_GetOffsetChannel>
 80035dc:	4603      	mov	r3, r0
 80035de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10a      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x214>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2101      	movs	r1, #1
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fa7f 	bl	8002af0 <LL_ADC_GetOffsetChannel>
 80035f2:	4603      	mov	r3, r0
 80035f4:	0e9b      	lsrs	r3, r3, #26
 80035f6:	f003 021f 	and.w	r2, r3, #31
 80035fa:	e01e      	b.n	800363a <HAL_ADC_ConfigChannel+0x252>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2101      	movs	r1, #1
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff fa74 	bl	8002af0 <LL_ADC_GetOffsetChannel>
 8003608:	4603      	mov	r3, r0
 800360a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800361a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800361e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003622:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800362a:	2320      	movs	r3, #32
 800362c:	e004      	b.n	8003638 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800362e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003642:	2b00      	cmp	r3, #0
 8003644:	d105      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x26a>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	0e9b      	lsrs	r3, r3, #26
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	e018      	b.n	8003684 <HAL_ADC_ConfigChannel+0x29c>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800365e:	fa93 f3a3 	rbit	r3, r3
 8003662:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003666:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800366a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800366e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003676:	2320      	movs	r3, #32
 8003678:	e004      	b.n	8003684 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800367a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800367e:	fab3 f383 	clz	r3, r3
 8003682:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003684:	429a      	cmp	r2, r3
 8003686:	d106      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2200      	movs	r2, #0
 800368e:	2101      	movs	r1, #1
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fa43 	bl	8002b1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2102      	movs	r1, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff fa27 	bl	8002af0 <LL_ADC_GetOffsetChannel>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10a      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x2da>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2102      	movs	r1, #2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff fa1c 	bl	8002af0 <LL_ADC_GetOffsetChannel>
 80036b8:	4603      	mov	r3, r0
 80036ba:	0e9b      	lsrs	r3, r3, #26
 80036bc:	f003 021f 	and.w	r2, r3, #31
 80036c0:	e01e      	b.n	8003700 <HAL_ADC_ConfigChannel+0x318>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2102      	movs	r1, #2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fa11 	bl	8002af0 <LL_ADC_GetOffsetChannel>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80036e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80036e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80036f0:	2320      	movs	r3, #32
 80036f2:	e004      	b.n	80036fe <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80036f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036f8:	fab3 f383 	clz	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003708:	2b00      	cmp	r3, #0
 800370a:	d105      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x330>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	0e9b      	lsrs	r3, r3, #26
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	e014      	b.n	8003742 <HAL_ADC_ConfigChannel+0x35a>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003720:	fa93 f3a3 	rbit	r3, r3
 8003724:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003726:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003728:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800372c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003734:	2320      	movs	r3, #32
 8003736:	e004      	b.n	8003742 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003738:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800373c:	fab3 f383 	clz	r3, r3
 8003740:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003742:	429a      	cmp	r2, r3
 8003744:	d106      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2200      	movs	r2, #0
 800374c:	2102      	movs	r1, #2
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff f9e4 	bl	8002b1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2103      	movs	r1, #3
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff f9c8 	bl	8002af0 <LL_ADC_GetOffsetChannel>
 8003760:	4603      	mov	r3, r0
 8003762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10a      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x398>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2103      	movs	r1, #3
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff f9bd 	bl	8002af0 <LL_ADC_GetOffsetChannel>
 8003776:	4603      	mov	r3, r0
 8003778:	0e9b      	lsrs	r3, r3, #26
 800377a:	f003 021f 	and.w	r2, r3, #31
 800377e:	e017      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x3c8>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2103      	movs	r1, #3
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff f9b2 	bl	8002af0 <LL_ADC_GetOffsetChannel>
 800378c:	4603      	mov	r3, r0
 800378e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003792:	fa93 f3a3 	rbit	r3, r3
 8003796:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800379a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800379c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80037a2:	2320      	movs	r3, #32
 80037a4:	e003      	b.n	80037ae <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80037a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037a8:	fab3 f383 	clz	r3, r3
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d105      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0x3e0>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	0e9b      	lsrs	r3, r3, #26
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	e011      	b.n	80037ec <HAL_ADC_ConfigChannel+0x404>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80037d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80037da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80037e0:	2320      	movs	r3, #32
 80037e2:	e003      	b.n	80037ec <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80037e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037e6:	fab3 f383 	clz	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d106      	bne.n	80037fe <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2200      	movs	r2, #0
 80037f6:	2103      	movs	r1, #3
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff f98f 	bl	8002b1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff fab2 	bl	8002d6c <LL_ADC_IsEnabled>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	f040 8140 	bne.w	8003a90 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6818      	ldr	r0, [r3, #0]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	6819      	ldr	r1, [r3, #0]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	461a      	mov	r2, r3
 800381e:	f7ff fa03 	bl	8002c28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	4a8f      	ldr	r2, [pc, #572]	@ (8003a64 <HAL_ADC_ConfigChannel+0x67c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	f040 8131 	bne.w	8003a90 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10b      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x46e>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	0e9b      	lsrs	r3, r3, #26
 8003844:	3301      	adds	r3, #1
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	2b09      	cmp	r3, #9
 800384c:	bf94      	ite	ls
 800384e:	2301      	movls	r3, #1
 8003850:	2300      	movhi	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	e019      	b.n	800388a <HAL_ADC_ConfigChannel+0x4a2>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800385e:	fa93 f3a3 	rbit	r3, r3
 8003862:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003866:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003868:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800386e:	2320      	movs	r3, #32
 8003870:	e003      	b.n	800387a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003872:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003874:	fab3 f383 	clz	r3, r3
 8003878:	b2db      	uxtb	r3, r3
 800387a:	3301      	adds	r3, #1
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	2b09      	cmp	r3, #9
 8003882:	bf94      	ite	ls
 8003884:	2301      	movls	r3, #1
 8003886:	2300      	movhi	r3, #0
 8003888:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800388a:	2b00      	cmp	r3, #0
 800388c:	d079      	beq.n	8003982 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003896:	2b00      	cmp	r3, #0
 8003898:	d107      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x4c2>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	0e9b      	lsrs	r3, r3, #26
 80038a0:	3301      	adds	r3, #1
 80038a2:	069b      	lsls	r3, r3, #26
 80038a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038a8:	e015      	b.n	80038d6 <HAL_ADC_ConfigChannel+0x4ee>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038b2:	fa93 f3a3 	rbit	r3, r3
 80038b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80038b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038ba:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80038bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80038c2:	2320      	movs	r3, #32
 80038c4:	e003      	b.n	80038ce <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80038c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038c8:	fab3 f383 	clz	r3, r3
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	3301      	adds	r3, #1
 80038d0:	069b      	lsls	r3, r3, #26
 80038d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x50e>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	0e9b      	lsrs	r3, r3, #26
 80038e8:	3301      	adds	r3, #1
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	2101      	movs	r1, #1
 80038f0:	fa01 f303 	lsl.w	r3, r1, r3
 80038f4:	e017      	b.n	8003926 <HAL_ADC_ConfigChannel+0x53e>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038fe:	fa93 f3a3 	rbit	r3, r3
 8003902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003906:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800390e:	2320      	movs	r3, #32
 8003910:	e003      	b.n	800391a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003912:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003914:	fab3 f383 	clz	r3, r3
 8003918:	b2db      	uxtb	r3, r3
 800391a:	3301      	adds	r3, #1
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	2101      	movs	r1, #1
 8003922:	fa01 f303 	lsl.w	r3, r1, r3
 8003926:	ea42 0103 	orr.w	r1, r2, r3
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10a      	bne.n	800394c <HAL_ADC_ConfigChannel+0x564>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	0e9b      	lsrs	r3, r3, #26
 800393c:	3301      	adds	r3, #1
 800393e:	f003 021f 	and.w	r2, r3, #31
 8003942:	4613      	mov	r3, r2
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	4413      	add	r3, r2
 8003948:	051b      	lsls	r3, r3, #20
 800394a:	e018      	b.n	800397e <HAL_ADC_ConfigChannel+0x596>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003954:	fa93 f3a3 	rbit	r3, r3
 8003958:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800395a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800395e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003964:	2320      	movs	r3, #32
 8003966:	e003      	b.n	8003970 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396a:	fab3 f383 	clz	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	3301      	adds	r3, #1
 8003972:	f003 021f 	and.w	r2, r3, #31
 8003976:	4613      	mov	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	4413      	add	r3, r2
 800397c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800397e:	430b      	orrs	r3, r1
 8003980:	e081      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398a:	2b00      	cmp	r3, #0
 800398c:	d107      	bne.n	800399e <HAL_ADC_ConfigChannel+0x5b6>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	0e9b      	lsrs	r3, r3, #26
 8003994:	3301      	adds	r3, #1
 8003996:	069b      	lsls	r3, r3, #26
 8003998:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800399c:	e015      	b.n	80039ca <HAL_ADC_ConfigChannel+0x5e2>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80039ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80039b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80039b6:	2320      	movs	r3, #32
 80039b8:	e003      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80039ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039bc:	fab3 f383 	clz	r3, r3
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	3301      	adds	r3, #1
 80039c4:	069b      	lsls	r3, r3, #26
 80039c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x602>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	0e9b      	lsrs	r3, r3, #26
 80039dc:	3301      	adds	r3, #1
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	2101      	movs	r1, #1
 80039e4:	fa01 f303 	lsl.w	r3, r1, r3
 80039e8:	e017      	b.n	8003a1a <HAL_ADC_ConfigChannel+0x632>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	61bb      	str	r3, [r7, #24]
  return result;
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003a02:	2320      	movs	r3, #32
 8003a04:	e003      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	fab3 f383 	clz	r3, r3
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	2101      	movs	r1, #1
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	ea42 0103 	orr.w	r1, r2, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10d      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x65e>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	0e9b      	lsrs	r3, r3, #26
 8003a30:	3301      	adds	r3, #1
 8003a32:	f003 021f 	and.w	r2, r3, #31
 8003a36:	4613      	mov	r3, r2
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3b1e      	subs	r3, #30
 8003a3e:	051b      	lsls	r3, r3, #20
 8003a40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a44:	e01e      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x69c>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	fa93 f3a3 	rbit	r3, r3
 8003a52:	60fb      	str	r3, [r7, #12]
  return result;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d104      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003a5e:	2320      	movs	r3, #32
 8003a60:	e006      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x688>
 8003a62:	bf00      	nop
 8003a64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	3301      	adds	r3, #1
 8003a72:	f003 021f 	and.w	r2, r3, #31
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3b1e      	subs	r3, #30
 8003a7e:	051b      	lsls	r3, r3, #20
 8003a80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a84:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	f7ff f8a0 	bl	8002bd0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4b44      	ldr	r3, [pc, #272]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d07a      	beq.n	8003b92 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a9c:	4843      	ldr	r0, [pc, #268]	@ (8003bac <HAL_ADC_ConfigChannel+0x7c4>)
 8003a9e:	f7fe fff5 	bl	8002a8c <LL_ADC_GetCommonPathInternalCh>
 8003aa2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a41      	ldr	r2, [pc, #260]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x7c8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d12c      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ab0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ab4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d126      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a3c      	ldr	r2, [pc, #240]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d004      	beq.n	8003ad0 <HAL_ADC_ConfigChannel+0x6e8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a3b      	ldr	r2, [pc, #236]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d15d      	bne.n	8003b8c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ad0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ad4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4834      	ldr	r0, [pc, #208]	@ (8003bac <HAL_ADC_ConfigChannel+0x7c4>)
 8003adc:	f7fe ffc3 	bl	8002a66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ae0:	4b36      	ldr	r3, [pc, #216]	@ (8003bbc <HAL_ADC_ConfigChannel+0x7d4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	099b      	lsrs	r3, r3, #6
 8003ae6:	4a36      	ldr	r2, [pc, #216]	@ (8003bc0 <HAL_ADC_ConfigChannel+0x7d8>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	099b      	lsrs	r3, r3, #6
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	4613      	mov	r3, r2
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003afa:	e002      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1f9      	bne.n	8003afc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b08:	e040      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d118      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d112      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a23      	ldr	r2, [pc, #140]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d004      	beq.n	8003b34 <HAL_ADC_ConfigChannel+0x74c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a22      	ldr	r2, [pc, #136]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d12d      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	481b      	ldr	r0, [pc, #108]	@ (8003bac <HAL_ADC_ConfigChannel+0x7c4>)
 8003b40:	f7fe ff91 	bl	8002a66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b44:	e024      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003bc8 <HAL_ADC_ConfigChannel+0x7e0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d120      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d11a      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a14      	ldr	r2, [pc, #80]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d115      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b6a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b6e:	4619      	mov	r1, r3
 8003b70:	480e      	ldr	r0, [pc, #56]	@ (8003bac <HAL_ADC_ConfigChannel+0x7c4>)
 8003b72:	f7fe ff78 	bl	8002a66 <LL_ADC_SetCommonPathInternalCh>
 8003b76:	e00c      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b7c:	f043 0220 	orr.w	r2, r3, #32
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003b8a:	e002      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b8c:	bf00      	nop
 8003b8e:	e000      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b9a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	37d8      	adds	r7, #216	@ 0xd8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	80080000 	.word	0x80080000
 8003bac:	50040300 	.word	0x50040300
 8003bb0:	c7520000 	.word	0xc7520000
 8003bb4:	50040000 	.word	0x50040000
 8003bb8:	50040200 	.word	0x50040200
 8003bbc:	20000000 	.word	0x20000000
 8003bc0:	053e2d63 	.word	0x053e2d63
 8003bc4:	cb840000 	.word	0xcb840000
 8003bc8:	80000001 	.word	0x80000001

08003bcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff f8c5 	bl	8002d6c <LL_ADC_IsEnabled>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d169      	bne.n	8003cbc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	4b36      	ldr	r3, [pc, #216]	@ (8003cc8 <ADC_Enable+0xfc>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00d      	beq.n	8003c12 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfa:	f043 0210 	orr.w	r2, r3, #16
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c06:	f043 0201 	orr.w	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e055      	b.n	8003cbe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff f894 	bl	8002d44 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c1c:	482b      	ldr	r0, [pc, #172]	@ (8003ccc <ADC_Enable+0x100>)
 8003c1e:	f7fe ff35 	bl	8002a8c <LL_ADC_GetCommonPathInternalCh>
 8003c22:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003c24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d013      	beq.n	8003c54 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c2c:	4b28      	ldr	r3, [pc, #160]	@ (8003cd0 <ADC_Enable+0x104>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	099b      	lsrs	r3, r3, #6
 8003c32:	4a28      	ldr	r2, [pc, #160]	@ (8003cd4 <ADC_Enable+0x108>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	099b      	lsrs	r3, r3, #6
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c46:	e002      	b.n	8003c4e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1f9      	bne.n	8003c48 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c54:	f7fe fee8 	bl	8002a28 <HAL_GetTick>
 8003c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c5a:	e028      	b.n	8003cae <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff f883 	bl	8002d6c <LL_ADC_IsEnabled>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d104      	bne.n	8003c76 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff f867 	bl	8002d44 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c76:	f7fe fed7 	bl	8002a28 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d914      	bls.n	8003cae <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d00d      	beq.n	8003cae <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c96:	f043 0210 	orr.w	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca2:	f043 0201 	orr.w	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e007      	b.n	8003cbe <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d1cf      	bne.n	8003c5c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	8000003f 	.word	0x8000003f
 8003ccc:	50040300 	.word	0x50040300
 8003cd0:	20000000 	.word	0x20000000
 8003cd4:	053e2d63 	.word	0x053e2d63

08003cd8 <LL_ADC_IsEnabled>:
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <LL_ADC_IsEnabled+0x18>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <LL_ADC_IsEnabled+0x1a>
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <LL_ADC_REG_IsConversionOngoing>:
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d101      	bne.n	8003d16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003d24:	b590      	push	{r4, r7, lr}
 8003d26:	b09f      	sub	sp, #124	@ 0x7c
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e093      	b.n	8003e6a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a47      	ldr	r2, [pc, #284]	@ (8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d102      	bne.n	8003d62 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d5c:	4b46      	ldr	r3, [pc, #280]	@ (8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	e001      	b.n	8003d66 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d62:	2300      	movs	r3, #0
 8003d64:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10b      	bne.n	8003d84 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d70:	f043 0220 	orr.w	r2, r3, #32
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e072      	b.n	8003e6a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff ffb9 	bl	8003cfe <LL_ADC_REG_IsConversionOngoing>
 8003d8c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff ffb3 	bl	8003cfe <LL_ADC_REG_IsConversionOngoing>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d154      	bne.n	8003e48 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003d9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d151      	bne.n	8003e48 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003da4:	4b35      	ldr	r3, [pc, #212]	@ (8003e7c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003da6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d02c      	beq.n	8003e0a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003db0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	6859      	ldr	r1, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003dc2:	035b      	lsls	r3, r3, #13
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dcc:	4829      	ldr	r0, [pc, #164]	@ (8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003dce:	f7ff ff83 	bl	8003cd8 <LL_ADC_IsEnabled>
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	4828      	ldr	r0, [pc, #160]	@ (8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003dd6:	f7ff ff7f 	bl	8003cd8 <LL_ADC_IsEnabled>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	431c      	orrs	r4, r3
 8003dde:	4828      	ldr	r0, [pc, #160]	@ (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003de0:	f7ff ff7a 	bl	8003cd8 <LL_ADC_IsEnabled>
 8003de4:	4603      	mov	r3, r0
 8003de6:	4323      	orrs	r3, r4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d137      	bne.n	8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003dec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003df4:	f023 030f 	bic.w	r3, r3, #15
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	6811      	ldr	r1, [r2, #0]
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	6892      	ldr	r2, [r2, #8]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	431a      	orrs	r2, r3
 8003e04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e06:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e08:	e028      	b.n	8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e14:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e16:	4817      	ldr	r0, [pc, #92]	@ (8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003e18:	f7ff ff5e 	bl	8003cd8 <LL_ADC_IsEnabled>
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	4816      	ldr	r0, [pc, #88]	@ (8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003e20:	f7ff ff5a 	bl	8003cd8 <LL_ADC_IsEnabled>
 8003e24:	4603      	mov	r3, r0
 8003e26:	431c      	orrs	r4, r3
 8003e28:	4815      	ldr	r0, [pc, #84]	@ (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003e2a:	f7ff ff55 	bl	8003cd8 <LL_ADC_IsEnabled>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4323      	orrs	r3, r4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d112      	bne.n	8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003e3e:	f023 030f 	bic.w	r3, r3, #15
 8003e42:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e44:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e46:	e009      	b.n	8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e4c:	f043 0220 	orr.w	r2, r3, #32
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003e5a:	e000      	b.n	8003e5e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e66:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	377c      	adds	r7, #124	@ 0x7c
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd90      	pop	{r4, r7, pc}
 8003e72:	bf00      	nop
 8003e74:	50040000 	.word	0x50040000
 8003e78:	50040100 	.word	0x50040100
 8003e7c:	50040300 	.word	0x50040300
 8003e80:	50040200 	.word	0x50040200

08003e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e94:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eb6:	4a04      	ldr	r2, [pc, #16]	@ (8003ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	60d3      	str	r3, [r2, #12]
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	e000ed00 	.word	0xe000ed00

08003ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ed0:	4b04      	ldr	r3, [pc, #16]	@ (8003ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	0a1b      	lsrs	r3, r3, #8
 8003ed6:	f003 0307 	and.w	r3, r3, #7
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	e000ed00 	.word	0xe000ed00

08003ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	6039      	str	r1, [r7, #0]
 8003ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	db0a      	blt.n	8003f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	490c      	ldr	r1, [pc, #48]	@ (8003f34 <__NVIC_SetPriority+0x4c>)
 8003f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f06:	0112      	lsls	r2, r2, #4
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f10:	e00a      	b.n	8003f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	4908      	ldr	r1, [pc, #32]	@ (8003f38 <__NVIC_SetPriority+0x50>)
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	3b04      	subs	r3, #4
 8003f20:	0112      	lsls	r2, r2, #4
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	440b      	add	r3, r1
 8003f26:	761a      	strb	r2, [r3, #24]
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	e000e100 	.word	0xe000e100
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b089      	sub	sp, #36	@ 0x24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f1c3 0307 	rsb	r3, r3, #7
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	bf28      	it	cs
 8003f5a:	2304      	movcs	r3, #4
 8003f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3304      	adds	r3, #4
 8003f62:	2b06      	cmp	r3, #6
 8003f64:	d902      	bls.n	8003f6c <NVIC_EncodePriority+0x30>
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	3b03      	subs	r3, #3
 8003f6a:	e000      	b.n	8003f6e <NVIC_EncodePriority+0x32>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43da      	mvns	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	401a      	ands	r2, r3
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f84:	f04f 31ff 	mov.w	r1, #4294967295
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8e:	43d9      	mvns	r1, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f94:	4313      	orrs	r3, r2
         );
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3724      	adds	r7, #36	@ 0x24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fb4:	d301      	bcc.n	8003fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e00f      	b.n	8003fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fba:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe4 <SysTick_Config+0x40>)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fc2:	210f      	movs	r1, #15
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc8:	f7ff ff8e 	bl	8003ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fcc:	4b05      	ldr	r3, [pc, #20]	@ (8003fe4 <SysTick_Config+0x40>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fd2:	4b04      	ldr	r3, [pc, #16]	@ (8003fe4 <SysTick_Config+0x40>)
 8003fd4:	2207      	movs	r2, #7
 8003fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	e000e010 	.word	0xe000e010

08003fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff ff47 	bl	8003e84 <__NVIC_SetPriorityGrouping>
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b086      	sub	sp, #24
 8004002:	af00      	add	r7, sp, #0
 8004004:	4603      	mov	r3, r0
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	607a      	str	r2, [r7, #4]
 800400a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004010:	f7ff ff5c 	bl	8003ecc <__NVIC_GetPriorityGrouping>
 8004014:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	6978      	ldr	r0, [r7, #20]
 800401c:	f7ff ff8e 	bl	8003f3c <NVIC_EncodePriority>
 8004020:	4602      	mov	r2, r0
 8004022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004026:	4611      	mov	r1, r2
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff ff5d 	bl	8003ee8 <__NVIC_SetPriority>
}
 800402e:	bf00      	nop
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff ffb0 	bl	8003fa4 <SysTick_Config>
 8004044:	4603      	mov	r3, r0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800405e:	e17f      	b.n	8004360 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	2101      	movs	r1, #1
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	fa01 f303 	lsl.w	r3, r1, r3
 800406c:	4013      	ands	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8171 	beq.w	800435a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	2b01      	cmp	r3, #1
 8004082:	d005      	beq.n	8004090 <HAL_GPIO_Init+0x40>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d130      	bne.n	80040f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	2203      	movs	r2, #3
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	43db      	mvns	r3, r3
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4013      	ands	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040c6:	2201      	movs	r2, #1
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4013      	ands	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	091b      	lsrs	r3, r3, #4
 80040dc:	f003 0201 	and.w	r2, r3, #1
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d118      	bne.n	8004130 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004102:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004104:	2201      	movs	r2, #1
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4013      	ands	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	08db      	lsrs	r3, r3, #3
 800411a:	f003 0201 	and.w	r2, r3, #1
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	2b03      	cmp	r3, #3
 800413a:	d017      	beq.n	800416c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	2203      	movs	r2, #3
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43db      	mvns	r3, r3
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4013      	ands	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d123      	bne.n	80041c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	08da      	lsrs	r2, r3, #3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3208      	adds	r2, #8
 8004180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004184:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	220f      	movs	r2, #15
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4013      	ands	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	08da      	lsrs	r2, r3, #3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3208      	adds	r2, #8
 80041ba:	6939      	ldr	r1, [r7, #16]
 80041bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	2203      	movs	r2, #3
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	43db      	mvns	r3, r3
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4013      	ands	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 0203 	and.w	r2, r3, #3
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80ac 	beq.w	800435a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004202:	4b5f      	ldr	r3, [pc, #380]	@ (8004380 <HAL_GPIO_Init+0x330>)
 8004204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004206:	4a5e      	ldr	r2, [pc, #376]	@ (8004380 <HAL_GPIO_Init+0x330>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	6613      	str	r3, [r2, #96]	@ 0x60
 800420e:	4b5c      	ldr	r3, [pc, #368]	@ (8004380 <HAL_GPIO_Init+0x330>)
 8004210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800421a:	4a5a      	ldr	r2, [pc, #360]	@ (8004384 <HAL_GPIO_Init+0x334>)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	089b      	lsrs	r3, r3, #2
 8004220:	3302      	adds	r3, #2
 8004222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004226:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	220f      	movs	r2, #15
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43db      	mvns	r3, r3
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4013      	ands	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004244:	d025      	beq.n	8004292 <HAL_GPIO_Init+0x242>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a4f      	ldr	r2, [pc, #316]	@ (8004388 <HAL_GPIO_Init+0x338>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d01f      	beq.n	800428e <HAL_GPIO_Init+0x23e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a4e      	ldr	r2, [pc, #312]	@ (800438c <HAL_GPIO_Init+0x33c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d019      	beq.n	800428a <HAL_GPIO_Init+0x23a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a4d      	ldr	r2, [pc, #308]	@ (8004390 <HAL_GPIO_Init+0x340>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d013      	beq.n	8004286 <HAL_GPIO_Init+0x236>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a4c      	ldr	r2, [pc, #304]	@ (8004394 <HAL_GPIO_Init+0x344>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00d      	beq.n	8004282 <HAL_GPIO_Init+0x232>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a4b      	ldr	r2, [pc, #300]	@ (8004398 <HAL_GPIO_Init+0x348>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d007      	beq.n	800427e <HAL_GPIO_Init+0x22e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a4a      	ldr	r2, [pc, #296]	@ (800439c <HAL_GPIO_Init+0x34c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d101      	bne.n	800427a <HAL_GPIO_Init+0x22a>
 8004276:	2306      	movs	r3, #6
 8004278:	e00c      	b.n	8004294 <HAL_GPIO_Init+0x244>
 800427a:	2307      	movs	r3, #7
 800427c:	e00a      	b.n	8004294 <HAL_GPIO_Init+0x244>
 800427e:	2305      	movs	r3, #5
 8004280:	e008      	b.n	8004294 <HAL_GPIO_Init+0x244>
 8004282:	2304      	movs	r3, #4
 8004284:	e006      	b.n	8004294 <HAL_GPIO_Init+0x244>
 8004286:	2303      	movs	r3, #3
 8004288:	e004      	b.n	8004294 <HAL_GPIO_Init+0x244>
 800428a:	2302      	movs	r3, #2
 800428c:	e002      	b.n	8004294 <HAL_GPIO_Init+0x244>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <HAL_GPIO_Init+0x244>
 8004292:	2300      	movs	r3, #0
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	f002 0203 	and.w	r2, r2, #3
 800429a:	0092      	lsls	r2, r2, #2
 800429c:	4093      	lsls	r3, r2
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042a4:	4937      	ldr	r1, [pc, #220]	@ (8004384 <HAL_GPIO_Init+0x334>)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	089b      	lsrs	r3, r3, #2
 80042aa:	3302      	adds	r3, #2
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042b2:	4b3b      	ldr	r3, [pc, #236]	@ (80043a0 <HAL_GPIO_Init+0x350>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	43db      	mvns	r3, r3
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4013      	ands	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042d6:	4a32      	ldr	r2, [pc, #200]	@ (80043a0 <HAL_GPIO_Init+0x350>)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042dc:	4b30      	ldr	r3, [pc, #192]	@ (80043a0 <HAL_GPIO_Init+0x350>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	43db      	mvns	r3, r3
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4013      	ands	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004300:	4a27      	ldr	r2, [pc, #156]	@ (80043a0 <HAL_GPIO_Init+0x350>)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004306:	4b26      	ldr	r3, [pc, #152]	@ (80043a0 <HAL_GPIO_Init+0x350>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	43db      	mvns	r3, r3
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4013      	ands	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800432a:	4a1d      	ldr	r2, [pc, #116]	@ (80043a0 <HAL_GPIO_Init+0x350>)
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004330:	4b1b      	ldr	r3, [pc, #108]	@ (80043a0 <HAL_GPIO_Init+0x350>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	43db      	mvns	r3, r3
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4013      	ands	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004354:	4a12      	ldr	r2, [pc, #72]	@ (80043a0 <HAL_GPIO_Init+0x350>)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	3301      	adds	r3, #1
 800435e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	fa22 f303 	lsr.w	r3, r2, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	f47f ae78 	bne.w	8004060 <HAL_GPIO_Init+0x10>
  }
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000
 8004384:	40010000 	.word	0x40010000
 8004388:	48000400 	.word	0x48000400
 800438c:	48000800 	.word	0x48000800
 8004390:	48000c00 	.word	0x48000c00
 8004394:	48001000 	.word	0x48001000
 8004398:	48001400 	.word	0x48001400
 800439c:	48001800 	.word	0x48001800
 80043a0:	40010400 	.word	0x40010400

080043a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	807b      	strh	r3, [r7, #2]
 80043b0:	4613      	mov	r3, r2
 80043b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043b4:	787b      	ldrb	r3, [r7, #1]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043ba:	887a      	ldrh	r2, [r7, #2]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043c0:	e002      	b.n	80043c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043c2:	887a      	ldrh	r2, [r7, #2]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e08d      	b.n	8004502 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fe f8dc 	bl	80025b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2224      	movs	r2, #36	@ 0x24
 8004404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0201 	bic.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004424:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004434:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d107      	bne.n	800444e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800444a:	609a      	str	r2, [r3, #8]
 800444c:	e006      	b.n	800445c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800445a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d108      	bne.n	8004476 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004472:	605a      	str	r2, [r3, #4]
 8004474:	e007      	b.n	8004486 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004484:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004494:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004498:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691a      	ldr	r2, [r3, #16]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69d9      	ldr	r1, [r3, #28]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1a      	ldr	r2, [r3, #32]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b20      	cmp	r3, #32
 800451e:	d138      	bne.n	8004592 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800452a:	2302      	movs	r3, #2
 800452c:	e032      	b.n	8004594 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2224      	movs	r2, #36	@ 0x24
 800453a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0201 	bic.w	r2, r2, #1
 800454c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800455c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0201 	orr.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e000      	b.n	8004594 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004592:	2302      	movs	r3, #2
  }
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d139      	bne.n	800462a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e033      	b.n	800462c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2224      	movs	r2, #36	@ 0x24
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0201 	bic.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80045f2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0201 	orr.w	r2, r2, #1
 8004614:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	e000      	b.n	800462c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800462a:	2302      	movs	r3, #2
  }
}
 800462c:	4618      	mov	r0, r3
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800463c:	4b04      	ldr	r3, [pc, #16]	@ (8004650 <HAL_PWREx_GetVoltageRange+0x18>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004644:	4618      	mov	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40007000 	.word	0x40007000

08004654 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004662:	d130      	bne.n	80046c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004664:	4b23      	ldr	r3, [pc, #140]	@ (80046f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800466c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004670:	d038      	beq.n	80046e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004672:	4b20      	ldr	r3, [pc, #128]	@ (80046f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800467a:	4a1e      	ldr	r2, [pc, #120]	@ (80046f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800467c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004680:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004682:	4b1d      	ldr	r3, [pc, #116]	@ (80046f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2232      	movs	r2, #50	@ 0x32
 8004688:	fb02 f303 	mul.w	r3, r2, r3
 800468c:	4a1b      	ldr	r2, [pc, #108]	@ (80046fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800468e:	fba2 2303 	umull	r2, r3, r2, r3
 8004692:	0c9b      	lsrs	r3, r3, #18
 8004694:	3301      	adds	r3, #1
 8004696:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004698:	e002      	b.n	80046a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3b01      	subs	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046a0:	4b14      	ldr	r3, [pc, #80]	@ (80046f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ac:	d102      	bne.n	80046b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f2      	bne.n	800469a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046b4:	4b0f      	ldr	r3, [pc, #60]	@ (80046f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046c0:	d110      	bne.n	80046e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e00f      	b.n	80046e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80046c6:	4b0b      	ldr	r3, [pc, #44]	@ (80046f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046d2:	d007      	beq.n	80046e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80046d4:	4b07      	ldr	r3, [pc, #28]	@ (80046f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046dc:	4a05      	ldr	r2, [pc, #20]	@ (80046f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40007000 	.word	0x40007000
 80046f8:	20000000 	.word	0x20000000
 80046fc:	431bde83 	.word	0x431bde83

08004700 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e3ca      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004712:	4b97      	ldr	r3, [pc, #604]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800471c:	4b94      	ldr	r3, [pc, #592]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 80e4 	beq.w	80048fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <HAL_RCC_OscConfig+0x4a>
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b0c      	cmp	r3, #12
 800473e:	f040 808b 	bne.w	8004858 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b01      	cmp	r3, #1
 8004746:	f040 8087 	bne.w	8004858 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800474a:	4b89      	ldr	r3, [pc, #548]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d005      	beq.n	8004762 <HAL_RCC_OscConfig+0x62>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e3a2      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1a      	ldr	r2, [r3, #32]
 8004766:	4b82      	ldr	r3, [pc, #520]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d004      	beq.n	800477c <HAL_RCC_OscConfig+0x7c>
 8004772:	4b7f      	ldr	r3, [pc, #508]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800477a:	e005      	b.n	8004788 <HAL_RCC_OscConfig+0x88>
 800477c:	4b7c      	ldr	r3, [pc, #496]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 800477e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004782:	091b      	lsrs	r3, r3, #4
 8004784:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004788:	4293      	cmp	r3, r2
 800478a:	d223      	bcs.n	80047d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fd55 	bl	8005240 <RCC_SetFlashLatencyFromMSIRange>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e383      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047a0:	4b73      	ldr	r3, [pc, #460]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a72      	ldr	r2, [pc, #456]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80047a6:	f043 0308 	orr.w	r3, r3, #8
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	4b70      	ldr	r3, [pc, #448]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	496d      	ldr	r1, [pc, #436]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047be:	4b6c      	ldr	r3, [pc, #432]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	021b      	lsls	r3, r3, #8
 80047cc:	4968      	ldr	r1, [pc, #416]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	604b      	str	r3, [r1, #4]
 80047d2:	e025      	b.n	8004820 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047d4:	4b66      	ldr	r3, [pc, #408]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a65      	ldr	r2, [pc, #404]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80047da:	f043 0308 	orr.w	r3, r3, #8
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	4b63      	ldr	r3, [pc, #396]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	4960      	ldr	r1, [pc, #384]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047f2:	4b5f      	ldr	r3, [pc, #380]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	021b      	lsls	r3, r3, #8
 8004800:	495b      	ldr	r1, [pc, #364]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 8004802:	4313      	orrs	r3, r2
 8004804:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fd15 	bl	8005240 <RCC_SetFlashLatencyFromMSIRange>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e343      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004820:	f000 fc4a 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 8004824:	4602      	mov	r2, r0
 8004826:	4b52      	ldr	r3, [pc, #328]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	f003 030f 	and.w	r3, r3, #15
 8004830:	4950      	ldr	r1, [pc, #320]	@ (8004974 <HAL_RCC_OscConfig+0x274>)
 8004832:	5ccb      	ldrb	r3, [r1, r3]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
 800483c:	4a4e      	ldr	r2, [pc, #312]	@ (8004978 <HAL_RCC_OscConfig+0x278>)
 800483e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004840:	4b4e      	ldr	r3, [pc, #312]	@ (800497c <HAL_RCC_OscConfig+0x27c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f7fe f89f 	bl	8002988 <HAL_InitTick>
 800484a:	4603      	mov	r3, r0
 800484c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d052      	beq.n	80048fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	e327      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d032      	beq.n	80048c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004860:	4b43      	ldr	r3, [pc, #268]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a42      	ldr	r2, [pc, #264]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800486c:	f7fe f8dc 	bl	8002a28 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004874:	f7fe f8d8 	bl	8002a28 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e310      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004886:	4b3a      	ldr	r3, [pc, #232]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0f0      	beq.n	8004874 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004892:	4b37      	ldr	r3, [pc, #220]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a36      	ldr	r2, [pc, #216]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 8004898:	f043 0308 	orr.w	r3, r3, #8
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	4b34      	ldr	r3, [pc, #208]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	4931      	ldr	r1, [pc, #196]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	021b      	lsls	r3, r3, #8
 80048be:	492c      	ldr	r1, [pc, #176]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]
 80048c4:	e01a      	b.n	80048fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80048c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a29      	ldr	r2, [pc, #164]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048d2:	f7fe f8a9 	bl	8002a28 <HAL_GetTick>
 80048d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048d8:	e008      	b.n	80048ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048da:	f7fe f8a5 	bl	8002a28 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e2dd      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048ec:	4b20      	ldr	r3, [pc, #128]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1f0      	bne.n	80048da <HAL_RCC_OscConfig+0x1da>
 80048f8:	e000      	b.n	80048fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d074      	beq.n	80049f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	2b08      	cmp	r3, #8
 800490c:	d005      	beq.n	800491a <HAL_RCC_OscConfig+0x21a>
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b0c      	cmp	r3, #12
 8004912:	d10e      	bne.n	8004932 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2b03      	cmp	r3, #3
 8004918:	d10b      	bne.n	8004932 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800491a:	4b15      	ldr	r3, [pc, #84]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d064      	beq.n	80049f0 <HAL_RCC_OscConfig+0x2f0>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d160      	bne.n	80049f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e2ba      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800493a:	d106      	bne.n	800494a <HAL_RCC_OscConfig+0x24a>
 800493c:	4b0c      	ldr	r3, [pc, #48]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a0b      	ldr	r2, [pc, #44]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 8004942:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	e026      	b.n	8004998 <HAL_RCC_OscConfig+0x298>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004952:	d115      	bne.n	8004980 <HAL_RCC_OscConfig+0x280>
 8004954:	4b06      	ldr	r3, [pc, #24]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a05      	ldr	r2, [pc, #20]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 800495a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	4b03      	ldr	r3, [pc, #12]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a02      	ldr	r2, [pc, #8]	@ (8004970 <HAL_RCC_OscConfig+0x270>)
 8004966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	e014      	b.n	8004998 <HAL_RCC_OscConfig+0x298>
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000
 8004974:	080084f4 	.word	0x080084f4
 8004978:	20000000 	.word	0x20000000
 800497c:	20000004 	.word	0x20000004
 8004980:	4ba0      	ldr	r3, [pc, #640]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a9f      	ldr	r2, [pc, #636]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	4b9d      	ldr	r3, [pc, #628]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a9c      	ldr	r2, [pc, #624]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d013      	beq.n	80049c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fe f842 	bl	8002a28 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a8:	f7fe f83e 	bl	8002a28 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	@ 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e276      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ba:	4b92      	ldr	r3, [pc, #584]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0x2a8>
 80049c6:	e014      	b.n	80049f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fe f82e 	bl	8002a28 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049d0:	f7fe f82a 	bl	8002a28 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b64      	cmp	r3, #100	@ 0x64
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e262      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049e2:	4b88      	ldr	r3, [pc, #544]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x2d0>
 80049ee:	e000      	b.n	80049f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d060      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_OscConfig+0x310>
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b0c      	cmp	r3, #12
 8004a08:	d119      	bne.n	8004a3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d116      	bne.n	8004a3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a10:	4b7c      	ldr	r3, [pc, #496]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_OscConfig+0x328>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e23f      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a28:	4b76      	ldr	r3, [pc, #472]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	061b      	lsls	r3, r3, #24
 8004a36:	4973      	ldr	r1, [pc, #460]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a3c:	e040      	b.n	8004ac0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d023      	beq.n	8004a8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a46:	4b6f      	ldr	r3, [pc, #444]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a6e      	ldr	r2, [pc, #440]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a52:	f7fd ffe9 	bl	8002a28 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a5a:	f7fd ffe5 	bl	8002a28 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e21d      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a6c:	4b65      	ldr	r3, [pc, #404]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0f0      	beq.n	8004a5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a78:	4b62      	ldr	r3, [pc, #392]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	061b      	lsls	r3, r3, #24
 8004a86:	495f      	ldr	r1, [pc, #380]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	604b      	str	r3, [r1, #4]
 8004a8c:	e018      	b.n	8004ac0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a8e:	4b5d      	ldr	r3, [pc, #372]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a5c      	ldr	r2, [pc, #368]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004a94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9a:	f7fd ffc5 	bl	8002a28 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa2:	f7fd ffc1 	bl	8002a28 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e1f9      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ab4:	4b53      	ldr	r3, [pc, #332]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f0      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d03c      	beq.n	8004b46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01c      	beq.n	8004b0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ada:	4a4a      	ldr	r2, [pc, #296]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae4:	f7fd ffa0 	bl	8002a28 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aec:	f7fd ff9c 	bl	8002a28 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e1d4      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004afe:	4b41      	ldr	r3, [pc, #260]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0ef      	beq.n	8004aec <HAL_RCC_OscConfig+0x3ec>
 8004b0c:	e01b      	b.n	8004b46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b14:	4a3b      	ldr	r2, [pc, #236]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004b16:	f023 0301 	bic.w	r3, r3, #1
 8004b1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1e:	f7fd ff83 	bl	8002a28 <HAL_GetTick>
 8004b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b26:	f7fd ff7f 	bl	8002a28 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e1b7      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b38:	4b32      	ldr	r3, [pc, #200]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1ef      	bne.n	8004b26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 80a6 	beq.w	8004ca0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b54:	2300      	movs	r3, #0
 8004b56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b58:	4b2a      	ldr	r3, [pc, #168]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10d      	bne.n	8004b80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b64:	4b27      	ldr	r3, [pc, #156]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b68:	4a26      	ldr	r2, [pc, #152]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b70:	4b24      	ldr	r3, [pc, #144]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b78:	60bb      	str	r3, [r7, #8]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b80:	4b21      	ldr	r3, [pc, #132]	@ (8004c08 <HAL_RCC_OscConfig+0x508>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d118      	bne.n	8004bbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8004c08 <HAL_RCC_OscConfig+0x508>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1d      	ldr	r2, [pc, #116]	@ (8004c08 <HAL_RCC_OscConfig+0x508>)
 8004b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b98:	f7fd ff46 	bl	8002a28 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba0:	f7fd ff42 	bl	8002a28 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e17a      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bb2:	4b15      	ldr	r3, [pc, #84]	@ (8004c08 <HAL_RCC_OscConfig+0x508>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d108      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x4d8>
 8004bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bd6:	e029      	b.n	8004c2c <HAL_RCC_OscConfig+0x52c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	2b05      	cmp	r3, #5
 8004bde:	d115      	bne.n	8004c0c <HAL_RCC_OscConfig+0x50c>
 8004be0:	4b08      	ldr	r3, [pc, #32]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be6:	4a07      	ldr	r2, [pc, #28]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004be8:	f043 0304 	orr.w	r3, r3, #4
 8004bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bf0:	4b04      	ldr	r3, [pc, #16]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf6:	4a03      	ldr	r2, [pc, #12]	@ (8004c04 <HAL_RCC_OscConfig+0x504>)
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c00:	e014      	b.n	8004c2c <HAL_RCC_OscConfig+0x52c>
 8004c02:	bf00      	nop
 8004c04:	40021000 	.word	0x40021000
 8004c08:	40007000 	.word	0x40007000
 8004c0c:	4b9c      	ldr	r3, [pc, #624]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c12:	4a9b      	ldr	r2, [pc, #620]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c1c:	4b98      	ldr	r3, [pc, #608]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c22:	4a97      	ldr	r2, [pc, #604]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004c24:	f023 0304 	bic.w	r3, r3, #4
 8004c28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d016      	beq.n	8004c62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c34:	f7fd fef8 	bl	8002a28 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c3a:	e00a      	b.n	8004c52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3c:	f7fd fef4 	bl	8002a28 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e12a      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c52:	4b8b      	ldr	r3, [pc, #556]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0ed      	beq.n	8004c3c <HAL_RCC_OscConfig+0x53c>
 8004c60:	e015      	b.n	8004c8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c62:	f7fd fee1 	bl	8002a28 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c68:	e00a      	b.n	8004c80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6a:	f7fd fedd 	bl	8002a28 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e113      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c80:	4b7f      	ldr	r3, [pc, #508]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1ed      	bne.n	8004c6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c8e:	7ffb      	ldrb	r3, [r7, #31]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d105      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c94:	4b7a      	ldr	r3, [pc, #488]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c98:	4a79      	ldr	r2, [pc, #484]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004c9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c9e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80fe 	beq.w	8004ea6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	f040 80d0 	bne.w	8004e54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004cb4:	4b72      	ldr	r3, [pc, #456]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f003 0203 	and.w	r2, r3, #3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d130      	bne.n	8004d2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d127      	bne.n	8004d2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d11f      	bne.n	8004d2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004cf4:	2a07      	cmp	r2, #7
 8004cf6:	bf14      	ite	ne
 8004cf8:	2201      	movne	r2, #1
 8004cfa:	2200      	moveq	r2, #0
 8004cfc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d113      	bne.n	8004d2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0c:	085b      	lsrs	r3, r3, #1
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d109      	bne.n	8004d2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d20:	085b      	lsrs	r3, r3, #1
 8004d22:	3b01      	subs	r3, #1
 8004d24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d06e      	beq.n	8004e08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	2b0c      	cmp	r3, #12
 8004d2e:	d069      	beq.n	8004e04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d30:	4b53      	ldr	r3, [pc, #332]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d105      	bne.n	8004d48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004d3c:	4b50      	ldr	r3, [pc, #320]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0ad      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d4c:	4b4c      	ldr	r3, [pc, #304]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a4b      	ldr	r2, [pc, #300]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d58:	f7fd fe66 	bl	8002a28 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d60:	f7fd fe62 	bl	8002a28 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e09a      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d72:	4b43      	ldr	r3, [pc, #268]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d7e:	4b40      	ldr	r3, [pc, #256]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	4b40      	ldr	r3, [pc, #256]	@ (8004e84 <HAL_RCC_OscConfig+0x784>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004d8e:	3a01      	subs	r2, #1
 8004d90:	0112      	lsls	r2, r2, #4
 8004d92:	4311      	orrs	r1, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d98:	0212      	lsls	r2, r2, #8
 8004d9a:	4311      	orrs	r1, r2
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004da0:	0852      	lsrs	r2, r2, #1
 8004da2:	3a01      	subs	r2, #1
 8004da4:	0552      	lsls	r2, r2, #21
 8004da6:	4311      	orrs	r1, r2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004dac:	0852      	lsrs	r2, r2, #1
 8004dae:	3a01      	subs	r2, #1
 8004db0:	0652      	lsls	r2, r2, #25
 8004db2:	4311      	orrs	r1, r2
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004db8:	0912      	lsrs	r2, r2, #4
 8004dba:	0452      	lsls	r2, r2, #17
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	4930      	ldr	r1, [pc, #192]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004dca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	4a2a      	ldr	r2, [pc, #168]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004dd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004dda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ddc:	f7fd fe24 	bl	8002a28 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de4:	f7fd fe20 	bl	8002a28 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e058      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004df6:	4b22      	ldr	r3, [pc, #136]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0f0      	beq.n	8004de4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e02:	e050      	b.n	8004ea6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e04f      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e08:	4b1d      	ldr	r3, [pc, #116]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d148      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e14:	4b1a      	ldr	r3, [pc, #104]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a19      	ldr	r2, [pc, #100]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004e1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e20:	4b17      	ldr	r3, [pc, #92]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	4a16      	ldr	r2, [pc, #88]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004e26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e2c:	f7fd fdfc 	bl	8002a28 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e34:	f7fd fdf8 	bl	8002a28 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e030      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e46:	4b0e      	ldr	r3, [pc, #56]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0x734>
 8004e52:	e028      	b.n	8004ea6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	2b0c      	cmp	r3, #12
 8004e58:	d023      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5a:	4b09      	ldr	r3, [pc, #36]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a08      	ldr	r2, [pc, #32]	@ (8004e80 <HAL_RCC_OscConfig+0x780>)
 8004e60:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e66:	f7fd fddf 	bl	8002a28 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e6c:	e00c      	b.n	8004e88 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6e:	f7fd fddb 	bl	8002a28 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d905      	bls.n	8004e88 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e013      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
 8004e80:	40021000 	.word	0x40021000
 8004e84:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e88:	4b09      	ldr	r3, [pc, #36]	@ (8004eb0 <HAL_RCC_OscConfig+0x7b0>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1ec      	bne.n	8004e6e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e94:	4b06      	ldr	r3, [pc, #24]	@ (8004eb0 <HAL_RCC_OscConfig+0x7b0>)
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	4905      	ldr	r1, [pc, #20]	@ (8004eb0 <HAL_RCC_OscConfig+0x7b0>)
 8004e9a:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <HAL_RCC_OscConfig+0x7b4>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	60cb      	str	r3, [r1, #12]
 8004ea0:	e001      	b.n	8004ea6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	feeefffc 	.word	0xfeeefffc

08004eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0e7      	b.n	800509c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ecc:	4b75      	ldr	r3, [pc, #468]	@ (80050a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d910      	bls.n	8004efc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eda:	4b72      	ldr	r3, [pc, #456]	@ (80050a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f023 0207 	bic.w	r2, r3, #7
 8004ee2:	4970      	ldr	r1, [pc, #448]	@ (80050a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eea:	4b6e      	ldr	r3, [pc, #440]	@ (80050a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d001      	beq.n	8004efc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e0cf      	b.n	800509c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d010      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	4b66      	ldr	r3, [pc, #408]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d908      	bls.n	8004f2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f18:	4b63      	ldr	r3, [pc, #396]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	4960      	ldr	r1, [pc, #384]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d04c      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d107      	bne.n	8004f4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f3e:	4b5a      	ldr	r3, [pc, #360]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d121      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e0a6      	b.n	800509c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d107      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f56:	4b54      	ldr	r3, [pc, #336]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d115      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e09a      	b.n	800509c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d107      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f6e:	4b4e      	ldr	r3, [pc, #312]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d109      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e08e      	b.n	800509c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f7e:	4b4a      	ldr	r3, [pc, #296]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e086      	b.n	800509c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f8e:	4b46      	ldr	r3, [pc, #280]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f023 0203 	bic.w	r2, r3, #3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	4943      	ldr	r1, [pc, #268]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa0:	f7fd fd42 	bl	8002a28 <HAL_GetTick>
 8004fa4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa6:	e00a      	b.n	8004fbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa8:	f7fd fd3e 	bl	8002a28 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e06e      	b.n	800509c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fbe:	4b3a      	ldr	r3, [pc, #232]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 020c 	and.w	r2, r3, #12
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d1eb      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d010      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	4b31      	ldr	r3, [pc, #196]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d208      	bcs.n	8004ffe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fec:	4b2e      	ldr	r3, [pc, #184]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	492b      	ldr	r1, [pc, #172]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ffe:	4b29      	ldr	r3, [pc, #164]	@ (80050a4 <HAL_RCC_ClockConfig+0x1ec>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d210      	bcs.n	800502e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500c:	4b25      	ldr	r3, [pc, #148]	@ (80050a4 <HAL_RCC_ClockConfig+0x1ec>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f023 0207 	bic.w	r2, r3, #7
 8005014:	4923      	ldr	r1, [pc, #140]	@ (80050a4 <HAL_RCC_ClockConfig+0x1ec>)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	4313      	orrs	r3, r2
 800501a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800501c:	4b21      	ldr	r3, [pc, #132]	@ (80050a4 <HAL_RCC_ClockConfig+0x1ec>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d001      	beq.n	800502e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e036      	b.n	800509c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	d008      	beq.n	800504c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800503a:	4b1b      	ldr	r3, [pc, #108]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	4918      	ldr	r1, [pc, #96]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005048:	4313      	orrs	r3, r2
 800504a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0308 	and.w	r3, r3, #8
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005058:	4b13      	ldr	r3, [pc, #76]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	4910      	ldr	r1, [pc, #64]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005068:	4313      	orrs	r3, r2
 800506a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800506c:	f000 f824 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 8005070:	4602      	mov	r2, r0
 8005072:	4b0d      	ldr	r3, [pc, #52]	@ (80050a8 <HAL_RCC_ClockConfig+0x1f0>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	091b      	lsrs	r3, r3, #4
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	490b      	ldr	r1, [pc, #44]	@ (80050ac <HAL_RCC_ClockConfig+0x1f4>)
 800507e:	5ccb      	ldrb	r3, [r1, r3]
 8005080:	f003 031f 	and.w	r3, r3, #31
 8005084:	fa22 f303 	lsr.w	r3, r2, r3
 8005088:	4a09      	ldr	r2, [pc, #36]	@ (80050b0 <HAL_RCC_ClockConfig+0x1f8>)
 800508a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800508c:	4b09      	ldr	r3, [pc, #36]	@ (80050b4 <HAL_RCC_ClockConfig+0x1fc>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f7fd fc79 	bl	8002988 <HAL_InitTick>
 8005096:	4603      	mov	r3, r0
 8005098:	72fb      	strb	r3, [r7, #11]

  return status;
 800509a:	7afb      	ldrb	r3, [r7, #11]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40022000 	.word	0x40022000
 80050a8:	40021000 	.word	0x40021000
 80050ac:	080084f4 	.word	0x080084f4
 80050b0:	20000000 	.word	0x20000000
 80050b4:	20000004 	.word	0x20000004

080050b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b089      	sub	sp, #36	@ 0x24
 80050bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	2300      	movs	r3, #0
 80050c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050c6:	4b3e      	ldr	r3, [pc, #248]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 030c 	and.w	r3, r3, #12
 80050ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050d0:	4b3b      	ldr	r3, [pc, #236]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_RCC_GetSysClockFreq+0x34>
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b0c      	cmp	r3, #12
 80050e4:	d121      	bne.n	800512a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d11e      	bne.n	800512a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050ec:	4b34      	ldr	r3, [pc, #208]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050f8:	4b31      	ldr	r3, [pc, #196]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80050fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050fe:	0a1b      	lsrs	r3, r3, #8
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	61fb      	str	r3, [r7, #28]
 8005106:	e005      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005108:	4b2d      	ldr	r3, [pc, #180]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005114:	4a2b      	ldr	r2, [pc, #172]	@ (80051c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800511c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10d      	bne.n	8005140 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005128:	e00a      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b04      	cmp	r3, #4
 800512e:	d102      	bne.n	8005136 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005130:	4b25      	ldr	r3, [pc, #148]	@ (80051c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005132:	61bb      	str	r3, [r7, #24]
 8005134:	e004      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b08      	cmp	r3, #8
 800513a:	d101      	bne.n	8005140 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800513c:	4b23      	ldr	r3, [pc, #140]	@ (80051cc <HAL_RCC_GetSysClockFreq+0x114>)
 800513e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	2b0c      	cmp	r3, #12
 8005144:	d134      	bne.n	80051b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005146:	4b1e      	ldr	r3, [pc, #120]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d003      	beq.n	800515e <HAL_RCC_GetSysClockFreq+0xa6>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b03      	cmp	r3, #3
 800515a:	d003      	beq.n	8005164 <HAL_RCC_GetSysClockFreq+0xac>
 800515c:	e005      	b.n	800516a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800515e:	4b1a      	ldr	r3, [pc, #104]	@ (80051c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005160:	617b      	str	r3, [r7, #20]
      break;
 8005162:	e005      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005164:	4b19      	ldr	r3, [pc, #100]	@ (80051cc <HAL_RCC_GetSysClockFreq+0x114>)
 8005166:	617b      	str	r3, [r7, #20]
      break;
 8005168:	e002      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	617b      	str	r3, [r7, #20]
      break;
 800516e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005170:	4b13      	ldr	r3, [pc, #76]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	3301      	adds	r3, #1
 800517c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800517e:	4b10      	ldr	r3, [pc, #64]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	0a1b      	lsrs	r3, r3, #8
 8005184:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	fb03 f202 	mul.w	r2, r3, r2
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	fbb2 f3f3 	udiv	r3, r2, r3
 8005194:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005196:	4b0a      	ldr	r3, [pc, #40]	@ (80051c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	0e5b      	lsrs	r3, r3, #25
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	3301      	adds	r3, #1
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80051b0:	69bb      	ldr	r3, [r7, #24]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3724      	adds	r7, #36	@ 0x24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40021000 	.word	0x40021000
 80051c4:	0800850c 	.word	0x0800850c
 80051c8:	00f42400 	.word	0x00f42400
 80051cc:	007a1200 	.word	0x007a1200

080051d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051d4:	4b03      	ldr	r3, [pc, #12]	@ (80051e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80051d6:	681b      	ldr	r3, [r3, #0]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000000 	.word	0x20000000

080051e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051ec:	f7ff fff0 	bl	80051d0 <HAL_RCC_GetHCLKFreq>
 80051f0:	4602      	mov	r2, r0
 80051f2:	4b06      	ldr	r3, [pc, #24]	@ (800520c <HAL_RCC_GetPCLK1Freq+0x24>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	0a1b      	lsrs	r3, r3, #8
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	4904      	ldr	r1, [pc, #16]	@ (8005210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051fe:	5ccb      	ldrb	r3, [r1, r3]
 8005200:	f003 031f 	and.w	r3, r3, #31
 8005204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005208:	4618      	mov	r0, r3
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40021000 	.word	0x40021000
 8005210:	08008504 	.word	0x08008504

08005214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005218:	f7ff ffda 	bl	80051d0 <HAL_RCC_GetHCLKFreq>
 800521c:	4602      	mov	r2, r0
 800521e:	4b06      	ldr	r3, [pc, #24]	@ (8005238 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	0adb      	lsrs	r3, r3, #11
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	4904      	ldr	r1, [pc, #16]	@ (800523c <HAL_RCC_GetPCLK2Freq+0x28>)
 800522a:	5ccb      	ldrb	r3, [r1, r3]
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005234:	4618      	mov	r0, r3
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40021000 	.word	0x40021000
 800523c:	08008504 	.word	0x08008504

08005240 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005248:	2300      	movs	r3, #0
 800524a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800524c:	4b2a      	ldr	r3, [pc, #168]	@ (80052f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800524e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005258:	f7ff f9ee 	bl	8004638 <HAL_PWREx_GetVoltageRange>
 800525c:	6178      	str	r0, [r7, #20]
 800525e:	e014      	b.n	800528a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005260:	4b25      	ldr	r3, [pc, #148]	@ (80052f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005264:	4a24      	ldr	r2, [pc, #144]	@ (80052f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800526a:	6593      	str	r3, [r2, #88]	@ 0x58
 800526c:	4b22      	ldr	r3, [pc, #136]	@ (80052f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800526e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005278:	f7ff f9de 	bl	8004638 <HAL_PWREx_GetVoltageRange>
 800527c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800527e:	4b1e      	ldr	r3, [pc, #120]	@ (80052f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005282:	4a1d      	ldr	r2, [pc, #116]	@ (80052f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005284:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005288:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005290:	d10b      	bne.n	80052aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b80      	cmp	r3, #128	@ 0x80
 8005296:	d919      	bls.n	80052cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2ba0      	cmp	r3, #160	@ 0xa0
 800529c:	d902      	bls.n	80052a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800529e:	2302      	movs	r3, #2
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	e013      	b.n	80052cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052a4:	2301      	movs	r3, #1
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	e010      	b.n	80052cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b80      	cmp	r3, #128	@ 0x80
 80052ae:	d902      	bls.n	80052b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80052b0:	2303      	movs	r3, #3
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	e00a      	b.n	80052cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b80      	cmp	r3, #128	@ 0x80
 80052ba:	d102      	bne.n	80052c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052bc:	2302      	movs	r3, #2
 80052be:	613b      	str	r3, [r7, #16]
 80052c0:	e004      	b.n	80052cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b70      	cmp	r3, #112	@ 0x70
 80052c6:	d101      	bne.n	80052cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052c8:	2301      	movs	r3, #1
 80052ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052cc:	4b0b      	ldr	r3, [pc, #44]	@ (80052fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f023 0207 	bic.w	r2, r3, #7
 80052d4:	4909      	ldr	r1, [pc, #36]	@ (80052fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80052dc:	4b07      	ldr	r3, [pc, #28]	@ (80052fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d001      	beq.n	80052ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40021000 	.word	0x40021000
 80052fc:	40022000 	.word	0x40022000

08005300 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005308:	2300      	movs	r3, #0
 800530a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800530c:	2300      	movs	r3, #0
 800530e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005318:	2b00      	cmp	r3, #0
 800531a:	d041      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005320:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005324:	d02a      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005326:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800532a:	d824      	bhi.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800532c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005330:	d008      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005332:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005336:	d81e      	bhi.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800533c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005340:	d010      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005342:	e018      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005344:	4b86      	ldr	r3, [pc, #536]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	4a85      	ldr	r2, [pc, #532]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800534a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800534e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005350:	e015      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3304      	adds	r3, #4
 8005356:	2100      	movs	r1, #0
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fabb 	bl	80058d4 <RCCEx_PLLSAI1_Config>
 800535e:	4603      	mov	r3, r0
 8005360:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005362:	e00c      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3320      	adds	r3, #32
 8005368:	2100      	movs	r1, #0
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fba6 	bl	8005abc <RCCEx_PLLSAI2_Config>
 8005370:	4603      	mov	r3, r0
 8005372:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005374:	e003      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	74fb      	strb	r3, [r7, #19]
      break;
 800537a:	e000      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800537c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800537e:	7cfb      	ldrb	r3, [r7, #19]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10b      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005384:	4b76      	ldr	r3, [pc, #472]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005392:	4973      	ldr	r1, [pc, #460]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800539a:	e001      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539c:	7cfb      	ldrb	r3, [r7, #19]
 800539e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d041      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80053b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80053b4:	d02a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80053b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80053ba:	d824      	bhi.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053c0:	d008      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053c6:	d81e      	bhi.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80053cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053d0:	d010      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80053d2:	e018      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053d4:	4b62      	ldr	r3, [pc, #392]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	4a61      	ldr	r2, [pc, #388]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053e0:	e015      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3304      	adds	r3, #4
 80053e6:	2100      	movs	r1, #0
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fa73 	bl	80058d4 <RCCEx_PLLSAI1_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053f2:	e00c      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3320      	adds	r3, #32
 80053f8:	2100      	movs	r1, #0
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fb5e 	bl	8005abc <RCCEx_PLLSAI2_Config>
 8005400:	4603      	mov	r3, r0
 8005402:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005404:	e003      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	74fb      	strb	r3, [r7, #19]
      break;
 800540a:	e000      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800540c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800540e:	7cfb      	ldrb	r3, [r7, #19]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10b      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005414:	4b52      	ldr	r3, [pc, #328]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005422:	494f      	ldr	r1, [pc, #316]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005424:	4313      	orrs	r3, r2
 8005426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800542a:	e001      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542c:	7cfb      	ldrb	r3, [r7, #19]
 800542e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 80a0 	beq.w	800557e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800543e:	2300      	movs	r3, #0
 8005440:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005442:	4b47      	ldr	r3, [pc, #284]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005452:	2300      	movs	r3, #0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00d      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005458:	4b41      	ldr	r3, [pc, #260]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800545a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545c:	4a40      	ldr	r2, [pc, #256]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800545e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005462:	6593      	str	r3, [r2, #88]	@ 0x58
 8005464:	4b3e      	ldr	r3, [pc, #248]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005470:	2301      	movs	r3, #1
 8005472:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005474:	4b3b      	ldr	r3, [pc, #236]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a3a      	ldr	r2, [pc, #232]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800547a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800547e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005480:	f7fd fad2 	bl	8002a28 <HAL_GetTick>
 8005484:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005486:	e009      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005488:	f7fd face 	bl	8002a28 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d902      	bls.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	74fb      	strb	r3, [r7, #19]
        break;
 800549a:	e005      	b.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800549c:	4b31      	ldr	r3, [pc, #196]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0ef      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80054a8:	7cfb      	ldrb	r3, [r7, #19]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d15c      	bne.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01f      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d019      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054cc:	4b24      	ldr	r3, [pc, #144]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054d8:	4b21      	ldr	r3, [pc, #132]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054de:	4a20      	ldr	r2, [pc, #128]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054f8:	4a19      	ldr	r2, [pc, #100]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d016      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550a:	f7fd fa8d 	bl	8002a28 <HAL_GetTick>
 800550e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005510:	e00b      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005512:	f7fd fa89 	bl	8002a28 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005520:	4293      	cmp	r3, r2
 8005522:	d902      	bls.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	74fb      	strb	r3, [r7, #19]
            break;
 8005528:	e006      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800552a:	4b0d      	ldr	r3, [pc, #52]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800552c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0ec      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005538:	7cfb      	ldrb	r3, [r7, #19]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10c      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800553e:	4b08      	ldr	r3, [pc, #32]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005544:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800554e:	4904      	ldr	r1, [pc, #16]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005556:	e009      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005558:	7cfb      	ldrb	r3, [r7, #19]
 800555a:	74bb      	strb	r3, [r7, #18]
 800555c:	e006      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800555e:	bf00      	nop
 8005560:	40021000 	.word	0x40021000
 8005564:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005568:	7cfb      	ldrb	r3, [r7, #19]
 800556a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800556c:	7c7b      	ldrb	r3, [r7, #17]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d105      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005572:	4b9e      	ldr	r3, [pc, #632]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005576:	4a9d      	ldr	r2, [pc, #628]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005578:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800557c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800558a:	4b98      	ldr	r3, [pc, #608]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800558c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005590:	f023 0203 	bic.w	r2, r3, #3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005598:	4994      	ldr	r1, [pc, #592]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055ac:	4b8f      	ldr	r3, [pc, #572]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b2:	f023 020c 	bic.w	r2, r3, #12
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ba:	498c      	ldr	r1, [pc, #560]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055ce:	4b87      	ldr	r3, [pc, #540]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055dc:	4983      	ldr	r1, [pc, #524]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055f0:	4b7e      	ldr	r3, [pc, #504]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fe:	497b      	ldr	r1, [pc, #492]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0310 	and.w	r3, r3, #16
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005612:	4b76      	ldr	r3, [pc, #472]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005618:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005620:	4972      	ldr	r1, [pc, #456]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0320 	and.w	r3, r3, #32
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005634:	4b6d      	ldr	r3, [pc, #436]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005642:	496a      	ldr	r1, [pc, #424]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005656:	4b65      	ldr	r3, [pc, #404]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800565c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005664:	4961      	ldr	r1, [pc, #388]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005678:	4b5c      	ldr	r3, [pc, #368]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800567a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800567e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005686:	4959      	ldr	r1, [pc, #356]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005688:	4313      	orrs	r3, r2
 800568a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800569a:	4b54      	ldr	r3, [pc, #336]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a8:	4950      	ldr	r1, [pc, #320]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056bc:	4b4b      	ldr	r3, [pc, #300]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ca:	4948      	ldr	r1, [pc, #288]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056de:	4b43      	ldr	r3, [pc, #268]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ec:	493f      	ldr	r1, [pc, #252]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d028      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005700:	4b3a      	ldr	r3, [pc, #232]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005706:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800570e:	4937      	ldr	r1, [pc, #220]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800571a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800571e:	d106      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005720:	4b32      	ldr	r3, [pc, #200]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	4a31      	ldr	r2, [pc, #196]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800572a:	60d3      	str	r3, [r2, #12]
 800572c:	e011      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005732:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005736:	d10c      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3304      	adds	r3, #4
 800573c:	2101      	movs	r1, #1
 800573e:	4618      	mov	r0, r3
 8005740:	f000 f8c8 	bl	80058d4 <RCCEx_PLLSAI1_Config>
 8005744:	4603      	mov	r3, r0
 8005746:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005748:	7cfb      	ldrb	r3, [r7, #19]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800574e:	7cfb      	ldrb	r3, [r7, #19]
 8005750:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d028      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800575e:	4b23      	ldr	r3, [pc, #140]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005764:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576c:	491f      	ldr	r1, [pc, #124]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005778:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800577c:	d106      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800577e:	4b1b      	ldr	r3, [pc, #108]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	4a1a      	ldr	r2, [pc, #104]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005784:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005788:	60d3      	str	r3, [r2, #12]
 800578a:	e011      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005790:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005794:	d10c      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3304      	adds	r3, #4
 800579a:	2101      	movs	r1, #1
 800579c:	4618      	mov	r0, r3
 800579e:	f000 f899 	bl	80058d4 <RCCEx_PLLSAI1_Config>
 80057a2:	4603      	mov	r3, r0
 80057a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057a6:	7cfb      	ldrb	r3, [r7, #19]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80057ac:	7cfb      	ldrb	r3, [r7, #19]
 80057ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d02b      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057bc:	4b0b      	ldr	r3, [pc, #44]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ca:	4908      	ldr	r1, [pc, #32]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057da:	d109      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057dc:	4b03      	ldr	r3, [pc, #12]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	4a02      	ldr	r2, [pc, #8]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057e6:	60d3      	str	r3, [r2, #12]
 80057e8:	e014      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80057ea:	bf00      	nop
 80057ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057f8:	d10c      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3304      	adds	r3, #4
 80057fe:	2101      	movs	r1, #1
 8005800:	4618      	mov	r0, r3
 8005802:	f000 f867 	bl	80058d4 <RCCEx_PLLSAI1_Config>
 8005806:	4603      	mov	r3, r0
 8005808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800580a:	7cfb      	ldrb	r3, [r7, #19]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005810:	7cfb      	ldrb	r3, [r7, #19]
 8005812:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d02f      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005820:	4b2b      	ldr	r3, [pc, #172]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005826:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800582e:	4928      	ldr	r1, [pc, #160]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800583a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800583e:	d10d      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3304      	adds	r3, #4
 8005844:	2102      	movs	r1, #2
 8005846:	4618      	mov	r0, r3
 8005848:	f000 f844 	bl	80058d4 <RCCEx_PLLSAI1_Config>
 800584c:	4603      	mov	r3, r0
 800584e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005850:	7cfb      	ldrb	r3, [r7, #19]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d014      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005856:	7cfb      	ldrb	r3, [r7, #19]
 8005858:	74bb      	strb	r3, [r7, #18]
 800585a:	e011      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005860:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005864:	d10c      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3320      	adds	r3, #32
 800586a:	2102      	movs	r1, #2
 800586c:	4618      	mov	r0, r3
 800586e:	f000 f925 	bl	8005abc <RCCEx_PLLSAI2_Config>
 8005872:	4603      	mov	r3, r0
 8005874:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005876:	7cfb      	ldrb	r3, [r7, #19]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800587c:	7cfb      	ldrb	r3, [r7, #19]
 800587e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800588c:	4b10      	ldr	r3, [pc, #64]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005892:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800589a:	490d      	ldr	r1, [pc, #52]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00b      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058ae:	4b08      	ldr	r3, [pc, #32]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058be:	4904      	ldr	r1, [pc, #16]	@ (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80058c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40021000 	.word	0x40021000

080058d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058e2:	4b75      	ldr	r3, [pc, #468]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f003 0303 	and.w	r3, r3, #3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d018      	beq.n	8005920 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058ee:	4b72      	ldr	r3, [pc, #456]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f003 0203 	and.w	r2, r3, #3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d10d      	bne.n	800591a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
       ||
 8005902:	2b00      	cmp	r3, #0
 8005904:	d009      	beq.n	800591a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005906:	4b6c      	ldr	r3, [pc, #432]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	091b      	lsrs	r3, r3, #4
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
       ||
 8005916:	429a      	cmp	r2, r3
 8005918:	d047      	beq.n	80059aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	73fb      	strb	r3, [r7, #15]
 800591e:	e044      	b.n	80059aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b03      	cmp	r3, #3
 8005926:	d018      	beq.n	800595a <RCCEx_PLLSAI1_Config+0x86>
 8005928:	2b03      	cmp	r3, #3
 800592a:	d825      	bhi.n	8005978 <RCCEx_PLLSAI1_Config+0xa4>
 800592c:	2b01      	cmp	r3, #1
 800592e:	d002      	beq.n	8005936 <RCCEx_PLLSAI1_Config+0x62>
 8005930:	2b02      	cmp	r3, #2
 8005932:	d009      	beq.n	8005948 <RCCEx_PLLSAI1_Config+0x74>
 8005934:	e020      	b.n	8005978 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005936:	4b60      	ldr	r3, [pc, #384]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d11d      	bne.n	800597e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005946:	e01a      	b.n	800597e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005948:	4b5b      	ldr	r3, [pc, #364]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005950:	2b00      	cmp	r3, #0
 8005952:	d116      	bne.n	8005982 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005958:	e013      	b.n	8005982 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800595a:	4b57      	ldr	r3, [pc, #348]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10f      	bne.n	8005986 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005966:	4b54      	ldr	r3, [pc, #336]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d109      	bne.n	8005986 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005976:	e006      	b.n	8005986 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	73fb      	strb	r3, [r7, #15]
      break;
 800597c:	e004      	b.n	8005988 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800597e:	bf00      	nop
 8005980:	e002      	b.n	8005988 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005982:	bf00      	nop
 8005984:	e000      	b.n	8005988 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005986:	bf00      	nop
    }

    if(status == HAL_OK)
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10d      	bne.n	80059aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800598e:	4b4a      	ldr	r3, [pc, #296]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6819      	ldr	r1, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	3b01      	subs	r3, #1
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	430b      	orrs	r3, r1
 80059a4:	4944      	ldr	r1, [pc, #272]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d17d      	bne.n	8005aac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80059b0:	4b41      	ldr	r3, [pc, #260]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a40      	ldr	r2, [pc, #256]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80059ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059bc:	f7fd f834 	bl	8002a28 <HAL_GetTick>
 80059c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059c2:	e009      	b.n	80059d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059c4:	f7fd f830 	bl	8002a28 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d902      	bls.n	80059d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	73fb      	strb	r3, [r7, #15]
        break;
 80059d6:	e005      	b.n	80059e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059d8:	4b37      	ldr	r3, [pc, #220]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1ef      	bne.n	80059c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059e4:	7bfb      	ldrb	r3, [r7, #15]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d160      	bne.n	8005aac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d111      	bne.n	8005a14 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059f0:	4b31      	ldr	r3, [pc, #196]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80059f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6892      	ldr	r2, [r2, #8]
 8005a00:	0211      	lsls	r1, r2, #8
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	68d2      	ldr	r2, [r2, #12]
 8005a06:	0912      	lsrs	r2, r2, #4
 8005a08:	0452      	lsls	r2, r2, #17
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	492a      	ldr	r1, [pc, #168]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	610b      	str	r3, [r1, #16]
 8005a12:	e027      	b.n	8005a64 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d112      	bne.n	8005a40 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a1a:	4b27      	ldr	r3, [pc, #156]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005a22:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6892      	ldr	r2, [r2, #8]
 8005a2a:	0211      	lsls	r1, r2, #8
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6912      	ldr	r2, [r2, #16]
 8005a30:	0852      	lsrs	r2, r2, #1
 8005a32:	3a01      	subs	r2, #1
 8005a34:	0552      	lsls	r2, r2, #21
 8005a36:	430a      	orrs	r2, r1
 8005a38:	491f      	ldr	r1, [pc, #124]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	610b      	str	r3, [r1, #16]
 8005a3e:	e011      	b.n	8005a64 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a40:	4b1d      	ldr	r3, [pc, #116]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6892      	ldr	r2, [r2, #8]
 8005a50:	0211      	lsls	r1, r2, #8
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	6952      	ldr	r2, [r2, #20]
 8005a56:	0852      	lsrs	r2, r2, #1
 8005a58:	3a01      	subs	r2, #1
 8005a5a:	0652      	lsls	r2, r2, #25
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	4916      	ldr	r1, [pc, #88]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a64:	4b14      	ldr	r3, [pc, #80]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a13      	ldr	r2, [pc, #76]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a70:	f7fc ffda 	bl	8002a28 <HAL_GetTick>
 8005a74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a76:	e009      	b.n	8005a8c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a78:	f7fc ffd6 	bl	8002a28 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d902      	bls.n	8005a8c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	73fb      	strb	r3, [r7, #15]
          break;
 8005a8a:	e005      	b.n	8005a98 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0ef      	beq.n	8005a78 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d106      	bne.n	8005aac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a9e:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aa0:	691a      	ldr	r2, [r3, #16]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	4904      	ldr	r1, [pc, #16]	@ (8005ab8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	40021000 	.word	0x40021000

08005abc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005aca:	4b6a      	ldr	r3, [pc, #424]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d018      	beq.n	8005b08 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ad6:	4b67      	ldr	r3, [pc, #412]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f003 0203 	and.w	r2, r3, #3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d10d      	bne.n	8005b02 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
       ||
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d009      	beq.n	8005b02 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005aee:	4b61      	ldr	r3, [pc, #388]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	091b      	lsrs	r3, r3, #4
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
       ||
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d047      	beq.n	8005b92 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	73fb      	strb	r3, [r7, #15]
 8005b06:	e044      	b.n	8005b92 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	d018      	beq.n	8005b42 <RCCEx_PLLSAI2_Config+0x86>
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d825      	bhi.n	8005b60 <RCCEx_PLLSAI2_Config+0xa4>
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d002      	beq.n	8005b1e <RCCEx_PLLSAI2_Config+0x62>
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d009      	beq.n	8005b30 <RCCEx_PLLSAI2_Config+0x74>
 8005b1c:	e020      	b.n	8005b60 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b1e:	4b55      	ldr	r3, [pc, #340]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d11d      	bne.n	8005b66 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b2e:	e01a      	b.n	8005b66 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b30:	4b50      	ldr	r3, [pc, #320]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d116      	bne.n	8005b6a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b40:	e013      	b.n	8005b6a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b42:	4b4c      	ldr	r3, [pc, #304]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10f      	bne.n	8005b6e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b4e:	4b49      	ldr	r3, [pc, #292]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d109      	bne.n	8005b6e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b5e:	e006      	b.n	8005b6e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	73fb      	strb	r3, [r7, #15]
      break;
 8005b64:	e004      	b.n	8005b70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b66:	bf00      	nop
 8005b68:	e002      	b.n	8005b70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b6a:	bf00      	nop
 8005b6c:	e000      	b.n	8005b70 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10d      	bne.n	8005b92 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b76:	4b3f      	ldr	r3, [pc, #252]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6819      	ldr	r1, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	430b      	orrs	r3, r1
 8005b8c:	4939      	ldr	r1, [pc, #228]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d167      	bne.n	8005c68 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b98:	4b36      	ldr	r3, [pc, #216]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a35      	ldr	r2, [pc, #212]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ba2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ba4:	f7fc ff40 	bl	8002a28 <HAL_GetTick>
 8005ba8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005baa:	e009      	b.n	8005bc0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bac:	f7fc ff3c 	bl	8002a28 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d902      	bls.n	8005bc0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	73fb      	strb	r3, [r7, #15]
        break;
 8005bbe:	e005      	b.n	8005bcc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1ef      	bne.n	8005bac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d14a      	bne.n	8005c68 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d111      	bne.n	8005bfc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bd8:	4b26      	ldr	r3, [pc, #152]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005be0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6892      	ldr	r2, [r2, #8]
 8005be8:	0211      	lsls	r1, r2, #8
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	68d2      	ldr	r2, [r2, #12]
 8005bee:	0912      	lsrs	r2, r2, #4
 8005bf0:	0452      	lsls	r2, r2, #17
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	491f      	ldr	r1, [pc, #124]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	614b      	str	r3, [r1, #20]
 8005bfa:	e011      	b.n	8005c20 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005c04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	6892      	ldr	r2, [r2, #8]
 8005c0c:	0211      	lsls	r1, r2, #8
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6912      	ldr	r2, [r2, #16]
 8005c12:	0852      	lsrs	r2, r2, #1
 8005c14:	3a01      	subs	r2, #1
 8005c16:	0652      	lsls	r2, r2, #25
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	4916      	ldr	r1, [pc, #88]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c20:	4b14      	ldr	r3, [pc, #80]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a13      	ldr	r2, [pc, #76]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c2c:	f7fc fefc 	bl	8002a28 <HAL_GetTick>
 8005c30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c32:	e009      	b.n	8005c48 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c34:	f7fc fef8 	bl	8002a28 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d902      	bls.n	8005c48 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	73fb      	strb	r3, [r7, #15]
          break;
 8005c46:	e005      	b.n	8005c54 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c48:	4b0a      	ldr	r3, [pc, #40]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0ef      	beq.n	8005c34 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d106      	bne.n	8005c68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c5a:	4b06      	ldr	r3, [pc, #24]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c5c:	695a      	ldr	r2, [r3, #20]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	4904      	ldr	r1, [pc, #16]	@ (8005c74 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	40021000 	.word	0x40021000

08005c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e040      	b.n	8005d0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7fc fcea 	bl	8002674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2224      	movs	r2, #36	@ 0x24
 8005ca4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0201 	bic.w	r2, r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fae0 	bl	8006284 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f825 	bl	8005d14 <UART_SetConfig>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e01b      	b.n	8005d0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ce2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fb5f 	bl	80063c8 <UART_CheckIdleState>
 8005d0a:	4603      	mov	r3, r0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d18:	b08a      	sub	sp, #40	@ 0x28
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	431a      	orrs	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	4ba4      	ldr	r3, [pc, #656]	@ (8005fd4 <UART_SetConfig+0x2c0>)
 8005d44:	4013      	ands	r3, r2
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	6812      	ldr	r2, [r2, #0]
 8005d4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d4c:	430b      	orrs	r3, r1
 8005d4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a99      	ldr	r2, [pc, #612]	@ (8005fd8 <UART_SetConfig+0x2c4>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d004      	beq.n	8005d80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d90:	430a      	orrs	r2, r1
 8005d92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a90      	ldr	r2, [pc, #576]	@ (8005fdc <UART_SetConfig+0x2c8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d126      	bne.n	8005dec <UART_SetConfig+0xd8>
 8005d9e:	4b90      	ldr	r3, [pc, #576]	@ (8005fe0 <UART_SetConfig+0x2cc>)
 8005da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da4:	f003 0303 	and.w	r3, r3, #3
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d81b      	bhi.n	8005de4 <UART_SetConfig+0xd0>
 8005dac:	a201      	add	r2, pc, #4	@ (adr r2, 8005db4 <UART_SetConfig+0xa0>)
 8005dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db2:	bf00      	nop
 8005db4:	08005dc5 	.word	0x08005dc5
 8005db8:	08005dd5 	.word	0x08005dd5
 8005dbc:	08005dcd 	.word	0x08005dcd
 8005dc0:	08005ddd 	.word	0x08005ddd
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dca:	e116      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dd2:	e112      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005dd4:	2304      	movs	r3, #4
 8005dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dda:	e10e      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005ddc:	2308      	movs	r3, #8
 8005dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de2:	e10a      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005de4:	2310      	movs	r3, #16
 8005de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dea:	e106      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a7c      	ldr	r2, [pc, #496]	@ (8005fe4 <UART_SetConfig+0x2d0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d138      	bne.n	8005e68 <UART_SetConfig+0x154>
 8005df6:	4b7a      	ldr	r3, [pc, #488]	@ (8005fe0 <UART_SetConfig+0x2cc>)
 8005df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dfc:	f003 030c 	and.w	r3, r3, #12
 8005e00:	2b0c      	cmp	r3, #12
 8005e02:	d82d      	bhi.n	8005e60 <UART_SetConfig+0x14c>
 8005e04:	a201      	add	r2, pc, #4	@ (adr r2, 8005e0c <UART_SetConfig+0xf8>)
 8005e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0a:	bf00      	nop
 8005e0c:	08005e41 	.word	0x08005e41
 8005e10:	08005e61 	.word	0x08005e61
 8005e14:	08005e61 	.word	0x08005e61
 8005e18:	08005e61 	.word	0x08005e61
 8005e1c:	08005e51 	.word	0x08005e51
 8005e20:	08005e61 	.word	0x08005e61
 8005e24:	08005e61 	.word	0x08005e61
 8005e28:	08005e61 	.word	0x08005e61
 8005e2c:	08005e49 	.word	0x08005e49
 8005e30:	08005e61 	.word	0x08005e61
 8005e34:	08005e61 	.word	0x08005e61
 8005e38:	08005e61 	.word	0x08005e61
 8005e3c:	08005e59 	.word	0x08005e59
 8005e40:	2300      	movs	r3, #0
 8005e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e46:	e0d8      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e4e:	e0d4      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005e50:	2304      	movs	r3, #4
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e56:	e0d0      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005e58:	2308      	movs	r3, #8
 8005e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e5e:	e0cc      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005e60:	2310      	movs	r3, #16
 8005e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e66:	e0c8      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a5e      	ldr	r2, [pc, #376]	@ (8005fe8 <UART_SetConfig+0x2d4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d125      	bne.n	8005ebe <UART_SetConfig+0x1aa>
 8005e72:	4b5b      	ldr	r3, [pc, #364]	@ (8005fe0 <UART_SetConfig+0x2cc>)
 8005e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e7c:	2b30      	cmp	r3, #48	@ 0x30
 8005e7e:	d016      	beq.n	8005eae <UART_SetConfig+0x19a>
 8005e80:	2b30      	cmp	r3, #48	@ 0x30
 8005e82:	d818      	bhi.n	8005eb6 <UART_SetConfig+0x1a2>
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	d00a      	beq.n	8005e9e <UART_SetConfig+0x18a>
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d814      	bhi.n	8005eb6 <UART_SetConfig+0x1a2>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <UART_SetConfig+0x182>
 8005e90:	2b10      	cmp	r3, #16
 8005e92:	d008      	beq.n	8005ea6 <UART_SetConfig+0x192>
 8005e94:	e00f      	b.n	8005eb6 <UART_SetConfig+0x1a2>
 8005e96:	2300      	movs	r3, #0
 8005e98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e9c:	e0ad      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ea4:	e0a9      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005ea6:	2304      	movs	r3, #4
 8005ea8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eac:	e0a5      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005eae:	2308      	movs	r3, #8
 8005eb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eb4:	e0a1      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005eb6:	2310      	movs	r3, #16
 8005eb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ebc:	e09d      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a4a      	ldr	r2, [pc, #296]	@ (8005fec <UART_SetConfig+0x2d8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d125      	bne.n	8005f14 <UART_SetConfig+0x200>
 8005ec8:	4b45      	ldr	r3, [pc, #276]	@ (8005fe0 <UART_SetConfig+0x2cc>)
 8005eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ece:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005ed2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ed4:	d016      	beq.n	8005f04 <UART_SetConfig+0x1f0>
 8005ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ed8:	d818      	bhi.n	8005f0c <UART_SetConfig+0x1f8>
 8005eda:	2b80      	cmp	r3, #128	@ 0x80
 8005edc:	d00a      	beq.n	8005ef4 <UART_SetConfig+0x1e0>
 8005ede:	2b80      	cmp	r3, #128	@ 0x80
 8005ee0:	d814      	bhi.n	8005f0c <UART_SetConfig+0x1f8>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <UART_SetConfig+0x1d8>
 8005ee6:	2b40      	cmp	r3, #64	@ 0x40
 8005ee8:	d008      	beq.n	8005efc <UART_SetConfig+0x1e8>
 8005eea:	e00f      	b.n	8005f0c <UART_SetConfig+0x1f8>
 8005eec:	2300      	movs	r3, #0
 8005eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ef2:	e082      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005efa:	e07e      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005efc:	2304      	movs	r3, #4
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f02:	e07a      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005f04:	2308      	movs	r3, #8
 8005f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f0a:	e076      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f12:	e072      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a35      	ldr	r2, [pc, #212]	@ (8005ff0 <UART_SetConfig+0x2dc>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d12a      	bne.n	8005f74 <UART_SetConfig+0x260>
 8005f1e:	4b30      	ldr	r3, [pc, #192]	@ (8005fe0 <UART_SetConfig+0x2cc>)
 8005f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f2c:	d01a      	beq.n	8005f64 <UART_SetConfig+0x250>
 8005f2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f32:	d81b      	bhi.n	8005f6c <UART_SetConfig+0x258>
 8005f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f38:	d00c      	beq.n	8005f54 <UART_SetConfig+0x240>
 8005f3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f3e:	d815      	bhi.n	8005f6c <UART_SetConfig+0x258>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <UART_SetConfig+0x238>
 8005f44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f48:	d008      	beq.n	8005f5c <UART_SetConfig+0x248>
 8005f4a:	e00f      	b.n	8005f6c <UART_SetConfig+0x258>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f52:	e052      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005f54:	2302      	movs	r3, #2
 8005f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f5a:	e04e      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f62:	e04a      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005f64:	2308      	movs	r3, #8
 8005f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f6a:	e046      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005f6c:	2310      	movs	r3, #16
 8005f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f72:	e042      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a17      	ldr	r2, [pc, #92]	@ (8005fd8 <UART_SetConfig+0x2c4>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d13a      	bne.n	8005ff4 <UART_SetConfig+0x2e0>
 8005f7e:	4b18      	ldr	r3, [pc, #96]	@ (8005fe0 <UART_SetConfig+0x2cc>)
 8005f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f8c:	d01a      	beq.n	8005fc4 <UART_SetConfig+0x2b0>
 8005f8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f92:	d81b      	bhi.n	8005fcc <UART_SetConfig+0x2b8>
 8005f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f98:	d00c      	beq.n	8005fb4 <UART_SetConfig+0x2a0>
 8005f9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f9e:	d815      	bhi.n	8005fcc <UART_SetConfig+0x2b8>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <UART_SetConfig+0x298>
 8005fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fa8:	d008      	beq.n	8005fbc <UART_SetConfig+0x2a8>
 8005faa:	e00f      	b.n	8005fcc <UART_SetConfig+0x2b8>
 8005fac:	2300      	movs	r3, #0
 8005fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fb2:	e022      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fba:	e01e      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005fbc:	2304      	movs	r3, #4
 8005fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fc2:	e01a      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005fc4:	2308      	movs	r3, #8
 8005fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fca:	e016      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005fcc:	2310      	movs	r3, #16
 8005fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fd2:	e012      	b.n	8005ffa <UART_SetConfig+0x2e6>
 8005fd4:	efff69f3 	.word	0xefff69f3
 8005fd8:	40008000 	.word	0x40008000
 8005fdc:	40013800 	.word	0x40013800
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	40004400 	.word	0x40004400
 8005fe8:	40004800 	.word	0x40004800
 8005fec:	40004c00 	.word	0x40004c00
 8005ff0:	40005000 	.word	0x40005000
 8005ff4:	2310      	movs	r3, #16
 8005ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a9f      	ldr	r2, [pc, #636]	@ (800627c <UART_SetConfig+0x568>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d17a      	bne.n	80060fa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006004:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006008:	2b08      	cmp	r3, #8
 800600a:	d824      	bhi.n	8006056 <UART_SetConfig+0x342>
 800600c:	a201      	add	r2, pc, #4	@ (adr r2, 8006014 <UART_SetConfig+0x300>)
 800600e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006012:	bf00      	nop
 8006014:	08006039 	.word	0x08006039
 8006018:	08006057 	.word	0x08006057
 800601c:	08006041 	.word	0x08006041
 8006020:	08006057 	.word	0x08006057
 8006024:	08006047 	.word	0x08006047
 8006028:	08006057 	.word	0x08006057
 800602c:	08006057 	.word	0x08006057
 8006030:	08006057 	.word	0x08006057
 8006034:	0800604f 	.word	0x0800604f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006038:	f7ff f8d6 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 800603c:	61f8      	str	r0, [r7, #28]
        break;
 800603e:	e010      	b.n	8006062 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006040:	4b8f      	ldr	r3, [pc, #572]	@ (8006280 <UART_SetConfig+0x56c>)
 8006042:	61fb      	str	r3, [r7, #28]
        break;
 8006044:	e00d      	b.n	8006062 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006046:	f7ff f837 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 800604a:	61f8      	str	r0, [r7, #28]
        break;
 800604c:	e009      	b.n	8006062 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800604e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006052:	61fb      	str	r3, [r7, #28]
        break;
 8006054:	e005      	b.n	8006062 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006060:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 80fb 	beq.w	8006260 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	4613      	mov	r3, r2
 8006070:	005b      	lsls	r3, r3, #1
 8006072:	4413      	add	r3, r2
 8006074:	69fa      	ldr	r2, [r7, #28]
 8006076:	429a      	cmp	r2, r3
 8006078:	d305      	bcc.n	8006086 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006080:	69fa      	ldr	r2, [r7, #28]
 8006082:	429a      	cmp	r2, r3
 8006084:	d903      	bls.n	800608e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800608c:	e0e8      	b.n	8006260 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	2200      	movs	r2, #0
 8006092:	461c      	mov	r4, r3
 8006094:	4615      	mov	r5, r2
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	f04f 0300 	mov.w	r3, #0
 800609e:	022b      	lsls	r3, r5, #8
 80060a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80060a4:	0222      	lsls	r2, r4, #8
 80060a6:	68f9      	ldr	r1, [r7, #12]
 80060a8:	6849      	ldr	r1, [r1, #4]
 80060aa:	0849      	lsrs	r1, r1, #1
 80060ac:	2000      	movs	r0, #0
 80060ae:	4688      	mov	r8, r1
 80060b0:	4681      	mov	r9, r0
 80060b2:	eb12 0a08 	adds.w	sl, r2, r8
 80060b6:	eb43 0b09 	adc.w	fp, r3, r9
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	603b      	str	r3, [r7, #0]
 80060c2:	607a      	str	r2, [r7, #4]
 80060c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060c8:	4650      	mov	r0, sl
 80060ca:	4659      	mov	r1, fp
 80060cc:	f7fa fdfc 	bl	8000cc8 <__aeabi_uldivmod>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4613      	mov	r3, r2
 80060d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060de:	d308      	bcc.n	80060f2 <UART_SetConfig+0x3de>
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060e6:	d204      	bcs.n	80060f2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	60da      	str	r2, [r3, #12]
 80060f0:	e0b6      	b.n	8006260 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80060f8:	e0b2      	b.n	8006260 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006102:	d15e      	bne.n	80061c2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006104:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006108:	2b08      	cmp	r3, #8
 800610a:	d828      	bhi.n	800615e <UART_SetConfig+0x44a>
 800610c:	a201      	add	r2, pc, #4	@ (adr r2, 8006114 <UART_SetConfig+0x400>)
 800610e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006112:	bf00      	nop
 8006114:	08006139 	.word	0x08006139
 8006118:	08006141 	.word	0x08006141
 800611c:	08006149 	.word	0x08006149
 8006120:	0800615f 	.word	0x0800615f
 8006124:	0800614f 	.word	0x0800614f
 8006128:	0800615f 	.word	0x0800615f
 800612c:	0800615f 	.word	0x0800615f
 8006130:	0800615f 	.word	0x0800615f
 8006134:	08006157 	.word	0x08006157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006138:	f7ff f856 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 800613c:	61f8      	str	r0, [r7, #28]
        break;
 800613e:	e014      	b.n	800616a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006140:	f7ff f868 	bl	8005214 <HAL_RCC_GetPCLK2Freq>
 8006144:	61f8      	str	r0, [r7, #28]
        break;
 8006146:	e010      	b.n	800616a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006148:	4b4d      	ldr	r3, [pc, #308]	@ (8006280 <UART_SetConfig+0x56c>)
 800614a:	61fb      	str	r3, [r7, #28]
        break;
 800614c:	e00d      	b.n	800616a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800614e:	f7fe ffb3 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 8006152:	61f8      	str	r0, [r7, #28]
        break;
 8006154:	e009      	b.n	800616a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800615a:	61fb      	str	r3, [r7, #28]
        break;
 800615c:	e005      	b.n	800616a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006168:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d077      	beq.n	8006260 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	005a      	lsls	r2, r3, #1
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	085b      	lsrs	r3, r3, #1
 800617a:	441a      	add	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	fbb2 f3f3 	udiv	r3, r2, r3
 8006184:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	2b0f      	cmp	r3, #15
 800618a:	d916      	bls.n	80061ba <UART_SetConfig+0x4a6>
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006192:	d212      	bcs.n	80061ba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	b29b      	uxth	r3, r3
 8006198:	f023 030f 	bic.w	r3, r3, #15
 800619c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	085b      	lsrs	r3, r3, #1
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	8afb      	ldrh	r3, [r7, #22]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	8afa      	ldrh	r2, [r7, #22]
 80061b6:	60da      	str	r2, [r3, #12]
 80061b8:	e052      	b.n	8006260 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80061c0:	e04e      	b.n	8006260 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80061c6:	2b08      	cmp	r3, #8
 80061c8:	d827      	bhi.n	800621a <UART_SetConfig+0x506>
 80061ca:	a201      	add	r2, pc, #4	@ (adr r2, 80061d0 <UART_SetConfig+0x4bc>)
 80061cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d0:	080061f5 	.word	0x080061f5
 80061d4:	080061fd 	.word	0x080061fd
 80061d8:	08006205 	.word	0x08006205
 80061dc:	0800621b 	.word	0x0800621b
 80061e0:	0800620b 	.word	0x0800620b
 80061e4:	0800621b 	.word	0x0800621b
 80061e8:	0800621b 	.word	0x0800621b
 80061ec:	0800621b 	.word	0x0800621b
 80061f0:	08006213 	.word	0x08006213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061f4:	f7fe fff8 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 80061f8:	61f8      	str	r0, [r7, #28]
        break;
 80061fa:	e014      	b.n	8006226 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061fc:	f7ff f80a 	bl	8005214 <HAL_RCC_GetPCLK2Freq>
 8006200:	61f8      	str	r0, [r7, #28]
        break;
 8006202:	e010      	b.n	8006226 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006204:	4b1e      	ldr	r3, [pc, #120]	@ (8006280 <UART_SetConfig+0x56c>)
 8006206:	61fb      	str	r3, [r7, #28]
        break;
 8006208:	e00d      	b.n	8006226 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800620a:	f7fe ff55 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 800620e:	61f8      	str	r0, [r7, #28]
        break;
 8006210:	e009      	b.n	8006226 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006216:	61fb      	str	r3, [r7, #28]
        break;
 8006218:	e005      	b.n	8006226 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006224:	bf00      	nop
    }

    if (pclk != 0U)
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d019      	beq.n	8006260 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	085a      	lsrs	r2, r3, #1
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	441a      	add	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	fbb2 f3f3 	udiv	r3, r2, r3
 800623e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	2b0f      	cmp	r3, #15
 8006244:	d909      	bls.n	800625a <UART_SetConfig+0x546>
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800624c:	d205      	bcs.n	800625a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	b29a      	uxth	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60da      	str	r2, [r3, #12]
 8006258:	e002      	b.n	8006260 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800626c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006270:	4618      	mov	r0, r3
 8006272:	3728      	adds	r7, #40	@ 0x28
 8006274:	46bd      	mov	sp, r7
 8006276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800627a:	bf00      	nop
 800627c:	40008000 	.word	0x40008000
 8006280:	00f42400 	.word	0x00f42400

08006284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006290:	f003 0308 	and.w	r3, r3, #8
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00a      	beq.n	80062ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f6:	f003 0304 	and.w	r3, r3, #4
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006318:	f003 0310 	and.w	r3, r3, #16
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00a      	beq.n	8006336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633a:	f003 0320 	and.w	r3, r3, #32
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d01a      	beq.n	800639a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006382:	d10a      	bne.n	800639a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	430a      	orrs	r2, r1
 8006398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	605a      	str	r2, [r3, #4]
  }
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b098      	sub	sp, #96	@ 0x60
 80063cc:	af02      	add	r7, sp, #8
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063d8:	f7fc fb26 	bl	8002a28 <HAL_GetTick>
 80063dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0308 	and.w	r3, r3, #8
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d12e      	bne.n	800644a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063f4:	2200      	movs	r2, #0
 80063f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f88c 	bl	8006518 <UART_WaitOnFlagUntilTimeout>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d021      	beq.n	800644a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800641a:	653b      	str	r3, [r7, #80]	@ 0x50
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006424:	647b      	str	r3, [r7, #68]	@ 0x44
 8006426:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800642a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e6      	bne.n	8006406 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2220      	movs	r2, #32
 800643c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e062      	b.n	8006510 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b04      	cmp	r3, #4
 8006456:	d149      	bne.n	80064ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006458:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006460:	2200      	movs	r2, #0
 8006462:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f856 	bl	8006518 <UART_WaitOnFlagUntilTimeout>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d03c      	beq.n	80064ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	623b      	str	r3, [r7, #32]
   return(result);
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006490:	633b      	str	r3, [r7, #48]	@ 0x30
 8006492:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800649e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e6      	bne.n	8006472 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	3308      	adds	r3, #8
 80064aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0301 	bic.w	r3, r3, #1
 80064ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3308      	adds	r3, #8
 80064c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064c4:	61fa      	str	r2, [r7, #28]
 80064c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	69b9      	ldr	r1, [r7, #24]
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	617b      	str	r3, [r7, #20]
   return(result);
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e5      	bne.n	80064a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e011      	b.n	8006510 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2220      	movs	r2, #32
 80064f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3758      	adds	r7, #88	@ 0x58
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	603b      	str	r3, [r7, #0]
 8006524:	4613      	mov	r3, r2
 8006526:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006528:	e04f      	b.n	80065ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006530:	d04b      	beq.n	80065ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006532:	f7fc fa79 	bl	8002a28 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	429a      	cmp	r2, r3
 8006540:	d302      	bcc.n	8006548 <UART_WaitOnFlagUntilTimeout+0x30>
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e04e      	b.n	80065ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b00      	cmp	r3, #0
 8006558:	d037      	beq.n	80065ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2b80      	cmp	r3, #128	@ 0x80
 800655e:	d034      	beq.n	80065ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2b40      	cmp	r3, #64	@ 0x40
 8006564:	d031      	beq.n	80065ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	f003 0308 	and.w	r3, r3, #8
 8006570:	2b08      	cmp	r3, #8
 8006572:	d110      	bne.n	8006596 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2208      	movs	r2, #8
 800657a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 f838 	bl	80065f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2208      	movs	r2, #8
 8006586:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e029      	b.n	80065ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065a4:	d111      	bne.n	80065ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 f81e 	bl	80065f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e00f      	b.n	80065ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69da      	ldr	r2, [r3, #28]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	4013      	ands	r3, r2
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	bf0c      	ite	eq
 80065da:	2301      	moveq	r3, #1
 80065dc:	2300      	movne	r3, #0
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	461a      	mov	r2, r3
 80065e2:	79fb      	ldrb	r3, [r7, #7]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d0a0      	beq.n	800652a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065f2:	b480      	push	{r7}
 80065f4:	b095      	sub	sp, #84	@ 0x54
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800660e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	461a      	mov	r2, r3
 8006616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006618:	643b      	str	r3, [r7, #64]	@ 0x40
 800661a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800661e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006620:	e841 2300 	strex	r3, r2, [r1]
 8006624:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e6      	bne.n	80065fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3308      	adds	r3, #8
 8006632:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	61fb      	str	r3, [r7, #28]
   return(result);
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	f023 0301 	bic.w	r3, r3, #1
 8006642:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3308      	adds	r3, #8
 800664a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800664c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800664e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e5      	bne.n	800662c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006664:	2b01      	cmp	r3, #1
 8006666:	d118      	bne.n	800669a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	60bb      	str	r3, [r7, #8]
   return(result);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f023 0310 	bic.w	r3, r3, #16
 800667c:	647b      	str	r3, [r7, #68]	@ 0x44
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	461a      	mov	r2, r3
 8006684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006686:	61bb      	str	r3, [r7, #24]
 8006688:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	6979      	ldr	r1, [r7, #20]
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	613b      	str	r3, [r7, #16]
   return(result);
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e6      	bne.n	8006668 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2220      	movs	r2, #32
 800669e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80066ae:	bf00      	nop
 80066b0:	3754      	adds	r7, #84	@ 0x54
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
	...

080066bc <std>:
 80066bc:	2300      	movs	r3, #0
 80066be:	b510      	push	{r4, lr}
 80066c0:	4604      	mov	r4, r0
 80066c2:	e9c0 3300 	strd	r3, r3, [r0]
 80066c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066ca:	6083      	str	r3, [r0, #8]
 80066cc:	8181      	strh	r1, [r0, #12]
 80066ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80066d0:	81c2      	strh	r2, [r0, #14]
 80066d2:	6183      	str	r3, [r0, #24]
 80066d4:	4619      	mov	r1, r3
 80066d6:	2208      	movs	r2, #8
 80066d8:	305c      	adds	r0, #92	@ 0x5c
 80066da:	f000 f9f9 	bl	8006ad0 <memset>
 80066de:	4b0d      	ldr	r3, [pc, #52]	@ (8006714 <std+0x58>)
 80066e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80066e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006718 <std+0x5c>)
 80066e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066e6:	4b0d      	ldr	r3, [pc, #52]	@ (800671c <std+0x60>)
 80066e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006720 <std+0x64>)
 80066ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80066ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006724 <std+0x68>)
 80066f0:	6224      	str	r4, [r4, #32]
 80066f2:	429c      	cmp	r4, r3
 80066f4:	d006      	beq.n	8006704 <std+0x48>
 80066f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066fa:	4294      	cmp	r4, r2
 80066fc:	d002      	beq.n	8006704 <std+0x48>
 80066fe:	33d0      	adds	r3, #208	@ 0xd0
 8006700:	429c      	cmp	r4, r3
 8006702:	d105      	bne.n	8006710 <std+0x54>
 8006704:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800670c:	f000 ba58 	b.w	8006bc0 <__retarget_lock_init_recursive>
 8006710:	bd10      	pop	{r4, pc}
 8006712:	bf00      	nop
 8006714:	08006921 	.word	0x08006921
 8006718:	08006943 	.word	0x08006943
 800671c:	0800697b 	.word	0x0800697b
 8006720:	0800699f 	.word	0x0800699f
 8006724:	20000264 	.word	0x20000264

08006728 <stdio_exit_handler>:
 8006728:	4a02      	ldr	r2, [pc, #8]	@ (8006734 <stdio_exit_handler+0xc>)
 800672a:	4903      	ldr	r1, [pc, #12]	@ (8006738 <stdio_exit_handler+0x10>)
 800672c:	4803      	ldr	r0, [pc, #12]	@ (800673c <stdio_exit_handler+0x14>)
 800672e:	f000 b869 	b.w	8006804 <_fwalk_sglue>
 8006732:	bf00      	nop
 8006734:	2000000c 	.word	0x2000000c
 8006738:	0800745d 	.word	0x0800745d
 800673c:	2000001c 	.word	0x2000001c

08006740 <cleanup_stdio>:
 8006740:	6841      	ldr	r1, [r0, #4]
 8006742:	4b0c      	ldr	r3, [pc, #48]	@ (8006774 <cleanup_stdio+0x34>)
 8006744:	4299      	cmp	r1, r3
 8006746:	b510      	push	{r4, lr}
 8006748:	4604      	mov	r4, r0
 800674a:	d001      	beq.n	8006750 <cleanup_stdio+0x10>
 800674c:	f000 fe86 	bl	800745c <_fflush_r>
 8006750:	68a1      	ldr	r1, [r4, #8]
 8006752:	4b09      	ldr	r3, [pc, #36]	@ (8006778 <cleanup_stdio+0x38>)
 8006754:	4299      	cmp	r1, r3
 8006756:	d002      	beq.n	800675e <cleanup_stdio+0x1e>
 8006758:	4620      	mov	r0, r4
 800675a:	f000 fe7f 	bl	800745c <_fflush_r>
 800675e:	68e1      	ldr	r1, [r4, #12]
 8006760:	4b06      	ldr	r3, [pc, #24]	@ (800677c <cleanup_stdio+0x3c>)
 8006762:	4299      	cmp	r1, r3
 8006764:	d004      	beq.n	8006770 <cleanup_stdio+0x30>
 8006766:	4620      	mov	r0, r4
 8006768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800676c:	f000 be76 	b.w	800745c <_fflush_r>
 8006770:	bd10      	pop	{r4, pc}
 8006772:	bf00      	nop
 8006774:	20000264 	.word	0x20000264
 8006778:	200002cc 	.word	0x200002cc
 800677c:	20000334 	.word	0x20000334

08006780 <global_stdio_init.part.0>:
 8006780:	b510      	push	{r4, lr}
 8006782:	4b0b      	ldr	r3, [pc, #44]	@ (80067b0 <global_stdio_init.part.0+0x30>)
 8006784:	4c0b      	ldr	r4, [pc, #44]	@ (80067b4 <global_stdio_init.part.0+0x34>)
 8006786:	4a0c      	ldr	r2, [pc, #48]	@ (80067b8 <global_stdio_init.part.0+0x38>)
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	4620      	mov	r0, r4
 800678c:	2200      	movs	r2, #0
 800678e:	2104      	movs	r1, #4
 8006790:	f7ff ff94 	bl	80066bc <std>
 8006794:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006798:	2201      	movs	r2, #1
 800679a:	2109      	movs	r1, #9
 800679c:	f7ff ff8e 	bl	80066bc <std>
 80067a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067a4:	2202      	movs	r2, #2
 80067a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067aa:	2112      	movs	r1, #18
 80067ac:	f7ff bf86 	b.w	80066bc <std>
 80067b0:	2000039c 	.word	0x2000039c
 80067b4:	20000264 	.word	0x20000264
 80067b8:	08006729 	.word	0x08006729

080067bc <__sfp_lock_acquire>:
 80067bc:	4801      	ldr	r0, [pc, #4]	@ (80067c4 <__sfp_lock_acquire+0x8>)
 80067be:	f000 ba00 	b.w	8006bc2 <__retarget_lock_acquire_recursive>
 80067c2:	bf00      	nop
 80067c4:	200003a5 	.word	0x200003a5

080067c8 <__sfp_lock_release>:
 80067c8:	4801      	ldr	r0, [pc, #4]	@ (80067d0 <__sfp_lock_release+0x8>)
 80067ca:	f000 b9fb 	b.w	8006bc4 <__retarget_lock_release_recursive>
 80067ce:	bf00      	nop
 80067d0:	200003a5 	.word	0x200003a5

080067d4 <__sinit>:
 80067d4:	b510      	push	{r4, lr}
 80067d6:	4604      	mov	r4, r0
 80067d8:	f7ff fff0 	bl	80067bc <__sfp_lock_acquire>
 80067dc:	6a23      	ldr	r3, [r4, #32]
 80067de:	b11b      	cbz	r3, 80067e8 <__sinit+0x14>
 80067e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067e4:	f7ff bff0 	b.w	80067c8 <__sfp_lock_release>
 80067e8:	4b04      	ldr	r3, [pc, #16]	@ (80067fc <__sinit+0x28>)
 80067ea:	6223      	str	r3, [r4, #32]
 80067ec:	4b04      	ldr	r3, [pc, #16]	@ (8006800 <__sinit+0x2c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1f5      	bne.n	80067e0 <__sinit+0xc>
 80067f4:	f7ff ffc4 	bl	8006780 <global_stdio_init.part.0>
 80067f8:	e7f2      	b.n	80067e0 <__sinit+0xc>
 80067fa:	bf00      	nop
 80067fc:	08006741 	.word	0x08006741
 8006800:	2000039c 	.word	0x2000039c

08006804 <_fwalk_sglue>:
 8006804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006808:	4607      	mov	r7, r0
 800680a:	4688      	mov	r8, r1
 800680c:	4614      	mov	r4, r2
 800680e:	2600      	movs	r6, #0
 8006810:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006814:	f1b9 0901 	subs.w	r9, r9, #1
 8006818:	d505      	bpl.n	8006826 <_fwalk_sglue+0x22>
 800681a:	6824      	ldr	r4, [r4, #0]
 800681c:	2c00      	cmp	r4, #0
 800681e:	d1f7      	bne.n	8006810 <_fwalk_sglue+0xc>
 8006820:	4630      	mov	r0, r6
 8006822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006826:	89ab      	ldrh	r3, [r5, #12]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d907      	bls.n	800683c <_fwalk_sglue+0x38>
 800682c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006830:	3301      	adds	r3, #1
 8006832:	d003      	beq.n	800683c <_fwalk_sglue+0x38>
 8006834:	4629      	mov	r1, r5
 8006836:	4638      	mov	r0, r7
 8006838:	47c0      	blx	r8
 800683a:	4306      	orrs	r6, r0
 800683c:	3568      	adds	r5, #104	@ 0x68
 800683e:	e7e9      	b.n	8006814 <_fwalk_sglue+0x10>

08006840 <iprintf>:
 8006840:	b40f      	push	{r0, r1, r2, r3}
 8006842:	b507      	push	{r0, r1, r2, lr}
 8006844:	4906      	ldr	r1, [pc, #24]	@ (8006860 <iprintf+0x20>)
 8006846:	ab04      	add	r3, sp, #16
 8006848:	6808      	ldr	r0, [r1, #0]
 800684a:	f853 2b04 	ldr.w	r2, [r3], #4
 800684e:	6881      	ldr	r1, [r0, #8]
 8006850:	9301      	str	r3, [sp, #4]
 8006852:	f000 fadb 	bl	8006e0c <_vfiprintf_r>
 8006856:	b003      	add	sp, #12
 8006858:	f85d eb04 	ldr.w	lr, [sp], #4
 800685c:	b004      	add	sp, #16
 800685e:	4770      	bx	lr
 8006860:	20000018 	.word	0x20000018

08006864 <_puts_r>:
 8006864:	6a03      	ldr	r3, [r0, #32]
 8006866:	b570      	push	{r4, r5, r6, lr}
 8006868:	6884      	ldr	r4, [r0, #8]
 800686a:	4605      	mov	r5, r0
 800686c:	460e      	mov	r6, r1
 800686e:	b90b      	cbnz	r3, 8006874 <_puts_r+0x10>
 8006870:	f7ff ffb0 	bl	80067d4 <__sinit>
 8006874:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006876:	07db      	lsls	r3, r3, #31
 8006878:	d405      	bmi.n	8006886 <_puts_r+0x22>
 800687a:	89a3      	ldrh	r3, [r4, #12]
 800687c:	0598      	lsls	r0, r3, #22
 800687e:	d402      	bmi.n	8006886 <_puts_r+0x22>
 8006880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006882:	f000 f99e 	bl	8006bc2 <__retarget_lock_acquire_recursive>
 8006886:	89a3      	ldrh	r3, [r4, #12]
 8006888:	0719      	lsls	r1, r3, #28
 800688a:	d502      	bpl.n	8006892 <_puts_r+0x2e>
 800688c:	6923      	ldr	r3, [r4, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d135      	bne.n	80068fe <_puts_r+0x9a>
 8006892:	4621      	mov	r1, r4
 8006894:	4628      	mov	r0, r5
 8006896:	f000 f8c5 	bl	8006a24 <__swsetup_r>
 800689a:	b380      	cbz	r0, 80068fe <_puts_r+0x9a>
 800689c:	f04f 35ff 	mov.w	r5, #4294967295
 80068a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068a2:	07da      	lsls	r2, r3, #31
 80068a4:	d405      	bmi.n	80068b2 <_puts_r+0x4e>
 80068a6:	89a3      	ldrh	r3, [r4, #12]
 80068a8:	059b      	lsls	r3, r3, #22
 80068aa:	d402      	bmi.n	80068b2 <_puts_r+0x4e>
 80068ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068ae:	f000 f989 	bl	8006bc4 <__retarget_lock_release_recursive>
 80068b2:	4628      	mov	r0, r5
 80068b4:	bd70      	pop	{r4, r5, r6, pc}
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	da04      	bge.n	80068c4 <_puts_r+0x60>
 80068ba:	69a2      	ldr	r2, [r4, #24]
 80068bc:	429a      	cmp	r2, r3
 80068be:	dc17      	bgt.n	80068f0 <_puts_r+0x8c>
 80068c0:	290a      	cmp	r1, #10
 80068c2:	d015      	beq.n	80068f0 <_puts_r+0x8c>
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	6022      	str	r2, [r4, #0]
 80068ca:	7019      	strb	r1, [r3, #0]
 80068cc:	68a3      	ldr	r3, [r4, #8]
 80068ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068d2:	3b01      	subs	r3, #1
 80068d4:	60a3      	str	r3, [r4, #8]
 80068d6:	2900      	cmp	r1, #0
 80068d8:	d1ed      	bne.n	80068b6 <_puts_r+0x52>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	da11      	bge.n	8006902 <_puts_r+0x9e>
 80068de:	4622      	mov	r2, r4
 80068e0:	210a      	movs	r1, #10
 80068e2:	4628      	mov	r0, r5
 80068e4:	f000 f85f 	bl	80069a6 <__swbuf_r>
 80068e8:	3001      	adds	r0, #1
 80068ea:	d0d7      	beq.n	800689c <_puts_r+0x38>
 80068ec:	250a      	movs	r5, #10
 80068ee:	e7d7      	b.n	80068a0 <_puts_r+0x3c>
 80068f0:	4622      	mov	r2, r4
 80068f2:	4628      	mov	r0, r5
 80068f4:	f000 f857 	bl	80069a6 <__swbuf_r>
 80068f8:	3001      	adds	r0, #1
 80068fa:	d1e7      	bne.n	80068cc <_puts_r+0x68>
 80068fc:	e7ce      	b.n	800689c <_puts_r+0x38>
 80068fe:	3e01      	subs	r6, #1
 8006900:	e7e4      	b.n	80068cc <_puts_r+0x68>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	6022      	str	r2, [r4, #0]
 8006908:	220a      	movs	r2, #10
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	e7ee      	b.n	80068ec <_puts_r+0x88>
	...

08006910 <puts>:
 8006910:	4b02      	ldr	r3, [pc, #8]	@ (800691c <puts+0xc>)
 8006912:	4601      	mov	r1, r0
 8006914:	6818      	ldr	r0, [r3, #0]
 8006916:	f7ff bfa5 	b.w	8006864 <_puts_r>
 800691a:	bf00      	nop
 800691c:	20000018 	.word	0x20000018

08006920 <__sread>:
 8006920:	b510      	push	{r4, lr}
 8006922:	460c      	mov	r4, r1
 8006924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006928:	f000 f8fc 	bl	8006b24 <_read_r>
 800692c:	2800      	cmp	r0, #0
 800692e:	bfab      	itete	ge
 8006930:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006932:	89a3      	ldrhlt	r3, [r4, #12]
 8006934:	181b      	addge	r3, r3, r0
 8006936:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800693a:	bfac      	ite	ge
 800693c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800693e:	81a3      	strhlt	r3, [r4, #12]
 8006940:	bd10      	pop	{r4, pc}

08006942 <__swrite>:
 8006942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006946:	461f      	mov	r7, r3
 8006948:	898b      	ldrh	r3, [r1, #12]
 800694a:	05db      	lsls	r3, r3, #23
 800694c:	4605      	mov	r5, r0
 800694e:	460c      	mov	r4, r1
 8006950:	4616      	mov	r6, r2
 8006952:	d505      	bpl.n	8006960 <__swrite+0x1e>
 8006954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006958:	2302      	movs	r3, #2
 800695a:	2200      	movs	r2, #0
 800695c:	f000 f8d0 	bl	8006b00 <_lseek_r>
 8006960:	89a3      	ldrh	r3, [r4, #12]
 8006962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006966:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800696a:	81a3      	strh	r3, [r4, #12]
 800696c:	4632      	mov	r2, r6
 800696e:	463b      	mov	r3, r7
 8006970:	4628      	mov	r0, r5
 8006972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006976:	f000 b8e7 	b.w	8006b48 <_write_r>

0800697a <__sseek>:
 800697a:	b510      	push	{r4, lr}
 800697c:	460c      	mov	r4, r1
 800697e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006982:	f000 f8bd 	bl	8006b00 <_lseek_r>
 8006986:	1c43      	adds	r3, r0, #1
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	bf15      	itete	ne
 800698c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800698e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006992:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006996:	81a3      	strheq	r3, [r4, #12]
 8006998:	bf18      	it	ne
 800699a:	81a3      	strhne	r3, [r4, #12]
 800699c:	bd10      	pop	{r4, pc}

0800699e <__sclose>:
 800699e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a2:	f000 b89d 	b.w	8006ae0 <_close_r>

080069a6 <__swbuf_r>:
 80069a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a8:	460e      	mov	r6, r1
 80069aa:	4614      	mov	r4, r2
 80069ac:	4605      	mov	r5, r0
 80069ae:	b118      	cbz	r0, 80069b8 <__swbuf_r+0x12>
 80069b0:	6a03      	ldr	r3, [r0, #32]
 80069b2:	b90b      	cbnz	r3, 80069b8 <__swbuf_r+0x12>
 80069b4:	f7ff ff0e 	bl	80067d4 <__sinit>
 80069b8:	69a3      	ldr	r3, [r4, #24]
 80069ba:	60a3      	str	r3, [r4, #8]
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	071a      	lsls	r2, r3, #28
 80069c0:	d501      	bpl.n	80069c6 <__swbuf_r+0x20>
 80069c2:	6923      	ldr	r3, [r4, #16]
 80069c4:	b943      	cbnz	r3, 80069d8 <__swbuf_r+0x32>
 80069c6:	4621      	mov	r1, r4
 80069c8:	4628      	mov	r0, r5
 80069ca:	f000 f82b 	bl	8006a24 <__swsetup_r>
 80069ce:	b118      	cbz	r0, 80069d8 <__swbuf_r+0x32>
 80069d0:	f04f 37ff 	mov.w	r7, #4294967295
 80069d4:	4638      	mov	r0, r7
 80069d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	6922      	ldr	r2, [r4, #16]
 80069dc:	1a98      	subs	r0, r3, r2
 80069de:	6963      	ldr	r3, [r4, #20]
 80069e0:	b2f6      	uxtb	r6, r6
 80069e2:	4283      	cmp	r3, r0
 80069e4:	4637      	mov	r7, r6
 80069e6:	dc05      	bgt.n	80069f4 <__swbuf_r+0x4e>
 80069e8:	4621      	mov	r1, r4
 80069ea:	4628      	mov	r0, r5
 80069ec:	f000 fd36 	bl	800745c <_fflush_r>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d1ed      	bne.n	80069d0 <__swbuf_r+0x2a>
 80069f4:	68a3      	ldr	r3, [r4, #8]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	60a3      	str	r3, [r4, #8]
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	6022      	str	r2, [r4, #0]
 8006a00:	701e      	strb	r6, [r3, #0]
 8006a02:	6962      	ldr	r2, [r4, #20]
 8006a04:	1c43      	adds	r3, r0, #1
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d004      	beq.n	8006a14 <__swbuf_r+0x6e>
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	07db      	lsls	r3, r3, #31
 8006a0e:	d5e1      	bpl.n	80069d4 <__swbuf_r+0x2e>
 8006a10:	2e0a      	cmp	r6, #10
 8006a12:	d1df      	bne.n	80069d4 <__swbuf_r+0x2e>
 8006a14:	4621      	mov	r1, r4
 8006a16:	4628      	mov	r0, r5
 8006a18:	f000 fd20 	bl	800745c <_fflush_r>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d0d9      	beq.n	80069d4 <__swbuf_r+0x2e>
 8006a20:	e7d6      	b.n	80069d0 <__swbuf_r+0x2a>
	...

08006a24 <__swsetup_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	4b29      	ldr	r3, [pc, #164]	@ (8006acc <__swsetup_r+0xa8>)
 8006a28:	4605      	mov	r5, r0
 8006a2a:	6818      	ldr	r0, [r3, #0]
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	b118      	cbz	r0, 8006a38 <__swsetup_r+0x14>
 8006a30:	6a03      	ldr	r3, [r0, #32]
 8006a32:	b90b      	cbnz	r3, 8006a38 <__swsetup_r+0x14>
 8006a34:	f7ff fece 	bl	80067d4 <__sinit>
 8006a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a3c:	0719      	lsls	r1, r3, #28
 8006a3e:	d422      	bmi.n	8006a86 <__swsetup_r+0x62>
 8006a40:	06da      	lsls	r2, r3, #27
 8006a42:	d407      	bmi.n	8006a54 <__swsetup_r+0x30>
 8006a44:	2209      	movs	r2, #9
 8006a46:	602a      	str	r2, [r5, #0]
 8006a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a4c:	81a3      	strh	r3, [r4, #12]
 8006a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a52:	e033      	b.n	8006abc <__swsetup_r+0x98>
 8006a54:	0758      	lsls	r0, r3, #29
 8006a56:	d512      	bpl.n	8006a7e <__swsetup_r+0x5a>
 8006a58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a5a:	b141      	cbz	r1, 8006a6e <__swsetup_r+0x4a>
 8006a5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a60:	4299      	cmp	r1, r3
 8006a62:	d002      	beq.n	8006a6a <__swsetup_r+0x46>
 8006a64:	4628      	mov	r0, r5
 8006a66:	f000 f8af 	bl	8006bc8 <_free_r>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a6e:	89a3      	ldrh	r3, [r4, #12]
 8006a70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a74:	81a3      	strh	r3, [r4, #12]
 8006a76:	2300      	movs	r3, #0
 8006a78:	6063      	str	r3, [r4, #4]
 8006a7a:	6923      	ldr	r3, [r4, #16]
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	f043 0308 	orr.w	r3, r3, #8
 8006a84:	81a3      	strh	r3, [r4, #12]
 8006a86:	6923      	ldr	r3, [r4, #16]
 8006a88:	b94b      	cbnz	r3, 8006a9e <__swsetup_r+0x7a>
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a94:	d003      	beq.n	8006a9e <__swsetup_r+0x7a>
 8006a96:	4621      	mov	r1, r4
 8006a98:	4628      	mov	r0, r5
 8006a9a:	f000 fd2d 	bl	80074f8 <__smakebuf_r>
 8006a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa2:	f013 0201 	ands.w	r2, r3, #1
 8006aa6:	d00a      	beq.n	8006abe <__swsetup_r+0x9a>
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	60a2      	str	r2, [r4, #8]
 8006aac:	6962      	ldr	r2, [r4, #20]
 8006aae:	4252      	negs	r2, r2
 8006ab0:	61a2      	str	r2, [r4, #24]
 8006ab2:	6922      	ldr	r2, [r4, #16]
 8006ab4:	b942      	cbnz	r2, 8006ac8 <__swsetup_r+0xa4>
 8006ab6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006aba:	d1c5      	bne.n	8006a48 <__swsetup_r+0x24>
 8006abc:	bd38      	pop	{r3, r4, r5, pc}
 8006abe:	0799      	lsls	r1, r3, #30
 8006ac0:	bf58      	it	pl
 8006ac2:	6962      	ldrpl	r2, [r4, #20]
 8006ac4:	60a2      	str	r2, [r4, #8]
 8006ac6:	e7f4      	b.n	8006ab2 <__swsetup_r+0x8e>
 8006ac8:	2000      	movs	r0, #0
 8006aca:	e7f7      	b.n	8006abc <__swsetup_r+0x98>
 8006acc:	20000018 	.word	0x20000018

08006ad0 <memset>:
 8006ad0:	4402      	add	r2, r0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d100      	bne.n	8006ada <memset+0xa>
 8006ad8:	4770      	bx	lr
 8006ada:	f803 1b01 	strb.w	r1, [r3], #1
 8006ade:	e7f9      	b.n	8006ad4 <memset+0x4>

08006ae0 <_close_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4d06      	ldr	r5, [pc, #24]	@ (8006afc <_close_r+0x1c>)
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	4608      	mov	r0, r1
 8006aea:	602b      	str	r3, [r5, #0]
 8006aec:	f7fb fe86 	bl	80027fc <_close>
 8006af0:	1c43      	adds	r3, r0, #1
 8006af2:	d102      	bne.n	8006afa <_close_r+0x1a>
 8006af4:	682b      	ldr	r3, [r5, #0]
 8006af6:	b103      	cbz	r3, 8006afa <_close_r+0x1a>
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	bd38      	pop	{r3, r4, r5, pc}
 8006afc:	200003a0 	.word	0x200003a0

08006b00 <_lseek_r>:
 8006b00:	b538      	push	{r3, r4, r5, lr}
 8006b02:	4d07      	ldr	r5, [pc, #28]	@ (8006b20 <_lseek_r+0x20>)
 8006b04:	4604      	mov	r4, r0
 8006b06:	4608      	mov	r0, r1
 8006b08:	4611      	mov	r1, r2
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	602a      	str	r2, [r5, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f7fb fe9b 	bl	800284a <_lseek>
 8006b14:	1c43      	adds	r3, r0, #1
 8006b16:	d102      	bne.n	8006b1e <_lseek_r+0x1e>
 8006b18:	682b      	ldr	r3, [r5, #0]
 8006b1a:	b103      	cbz	r3, 8006b1e <_lseek_r+0x1e>
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	bd38      	pop	{r3, r4, r5, pc}
 8006b20:	200003a0 	.word	0x200003a0

08006b24 <_read_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	4d07      	ldr	r5, [pc, #28]	@ (8006b44 <_read_r+0x20>)
 8006b28:	4604      	mov	r4, r0
 8006b2a:	4608      	mov	r0, r1
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	2200      	movs	r2, #0
 8006b30:	602a      	str	r2, [r5, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	f7fb fe29 	bl	800278a <_read>
 8006b38:	1c43      	adds	r3, r0, #1
 8006b3a:	d102      	bne.n	8006b42 <_read_r+0x1e>
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	b103      	cbz	r3, 8006b42 <_read_r+0x1e>
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	bd38      	pop	{r3, r4, r5, pc}
 8006b44:	200003a0 	.word	0x200003a0

08006b48 <_write_r>:
 8006b48:	b538      	push	{r3, r4, r5, lr}
 8006b4a:	4d07      	ldr	r5, [pc, #28]	@ (8006b68 <_write_r+0x20>)
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	4608      	mov	r0, r1
 8006b50:	4611      	mov	r1, r2
 8006b52:	2200      	movs	r2, #0
 8006b54:	602a      	str	r2, [r5, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	f7fb fe34 	bl	80027c4 <_write>
 8006b5c:	1c43      	adds	r3, r0, #1
 8006b5e:	d102      	bne.n	8006b66 <_write_r+0x1e>
 8006b60:	682b      	ldr	r3, [r5, #0]
 8006b62:	b103      	cbz	r3, 8006b66 <_write_r+0x1e>
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	bd38      	pop	{r3, r4, r5, pc}
 8006b68:	200003a0 	.word	0x200003a0

08006b6c <__errno>:
 8006b6c:	4b01      	ldr	r3, [pc, #4]	@ (8006b74 <__errno+0x8>)
 8006b6e:	6818      	ldr	r0, [r3, #0]
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	20000018 	.word	0x20000018

08006b78 <__libc_init_array>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	4d0d      	ldr	r5, [pc, #52]	@ (8006bb0 <__libc_init_array+0x38>)
 8006b7c:	4c0d      	ldr	r4, [pc, #52]	@ (8006bb4 <__libc_init_array+0x3c>)
 8006b7e:	1b64      	subs	r4, r4, r5
 8006b80:	10a4      	asrs	r4, r4, #2
 8006b82:	2600      	movs	r6, #0
 8006b84:	42a6      	cmp	r6, r4
 8006b86:	d109      	bne.n	8006b9c <__libc_init_array+0x24>
 8006b88:	4d0b      	ldr	r5, [pc, #44]	@ (8006bb8 <__libc_init_array+0x40>)
 8006b8a:	4c0c      	ldr	r4, [pc, #48]	@ (8006bbc <__libc_init_array+0x44>)
 8006b8c:	f001 fc82 	bl	8008494 <_init>
 8006b90:	1b64      	subs	r4, r4, r5
 8006b92:	10a4      	asrs	r4, r4, #2
 8006b94:	2600      	movs	r6, #0
 8006b96:	42a6      	cmp	r6, r4
 8006b98:	d105      	bne.n	8006ba6 <__libc_init_array+0x2e>
 8006b9a:	bd70      	pop	{r4, r5, r6, pc}
 8006b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba0:	4798      	blx	r3
 8006ba2:	3601      	adds	r6, #1
 8006ba4:	e7ee      	b.n	8006b84 <__libc_init_array+0xc>
 8006ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006baa:	4798      	blx	r3
 8006bac:	3601      	adds	r6, #1
 8006bae:	e7f2      	b.n	8006b96 <__libc_init_array+0x1e>
 8006bb0:	080085b8 	.word	0x080085b8
 8006bb4:	080085b8 	.word	0x080085b8
 8006bb8:	080085b8 	.word	0x080085b8
 8006bbc:	080085bc 	.word	0x080085bc

08006bc0 <__retarget_lock_init_recursive>:
 8006bc0:	4770      	bx	lr

08006bc2 <__retarget_lock_acquire_recursive>:
 8006bc2:	4770      	bx	lr

08006bc4 <__retarget_lock_release_recursive>:
 8006bc4:	4770      	bx	lr
	...

08006bc8 <_free_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4605      	mov	r5, r0
 8006bcc:	2900      	cmp	r1, #0
 8006bce:	d041      	beq.n	8006c54 <_free_r+0x8c>
 8006bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bd4:	1f0c      	subs	r4, r1, #4
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	bfb8      	it	lt
 8006bda:	18e4      	addlt	r4, r4, r3
 8006bdc:	f000 f8e0 	bl	8006da0 <__malloc_lock>
 8006be0:	4a1d      	ldr	r2, [pc, #116]	@ (8006c58 <_free_r+0x90>)
 8006be2:	6813      	ldr	r3, [r2, #0]
 8006be4:	b933      	cbnz	r3, 8006bf4 <_free_r+0x2c>
 8006be6:	6063      	str	r3, [r4, #4]
 8006be8:	6014      	str	r4, [r2, #0]
 8006bea:	4628      	mov	r0, r5
 8006bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bf0:	f000 b8dc 	b.w	8006dac <__malloc_unlock>
 8006bf4:	42a3      	cmp	r3, r4
 8006bf6:	d908      	bls.n	8006c0a <_free_r+0x42>
 8006bf8:	6820      	ldr	r0, [r4, #0]
 8006bfa:	1821      	adds	r1, r4, r0
 8006bfc:	428b      	cmp	r3, r1
 8006bfe:	bf01      	itttt	eq
 8006c00:	6819      	ldreq	r1, [r3, #0]
 8006c02:	685b      	ldreq	r3, [r3, #4]
 8006c04:	1809      	addeq	r1, r1, r0
 8006c06:	6021      	streq	r1, [r4, #0]
 8006c08:	e7ed      	b.n	8006be6 <_free_r+0x1e>
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	b10b      	cbz	r3, 8006c14 <_free_r+0x4c>
 8006c10:	42a3      	cmp	r3, r4
 8006c12:	d9fa      	bls.n	8006c0a <_free_r+0x42>
 8006c14:	6811      	ldr	r1, [r2, #0]
 8006c16:	1850      	adds	r0, r2, r1
 8006c18:	42a0      	cmp	r0, r4
 8006c1a:	d10b      	bne.n	8006c34 <_free_r+0x6c>
 8006c1c:	6820      	ldr	r0, [r4, #0]
 8006c1e:	4401      	add	r1, r0
 8006c20:	1850      	adds	r0, r2, r1
 8006c22:	4283      	cmp	r3, r0
 8006c24:	6011      	str	r1, [r2, #0]
 8006c26:	d1e0      	bne.n	8006bea <_free_r+0x22>
 8006c28:	6818      	ldr	r0, [r3, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	6053      	str	r3, [r2, #4]
 8006c2e:	4408      	add	r0, r1
 8006c30:	6010      	str	r0, [r2, #0]
 8006c32:	e7da      	b.n	8006bea <_free_r+0x22>
 8006c34:	d902      	bls.n	8006c3c <_free_r+0x74>
 8006c36:	230c      	movs	r3, #12
 8006c38:	602b      	str	r3, [r5, #0]
 8006c3a:	e7d6      	b.n	8006bea <_free_r+0x22>
 8006c3c:	6820      	ldr	r0, [r4, #0]
 8006c3e:	1821      	adds	r1, r4, r0
 8006c40:	428b      	cmp	r3, r1
 8006c42:	bf04      	itt	eq
 8006c44:	6819      	ldreq	r1, [r3, #0]
 8006c46:	685b      	ldreq	r3, [r3, #4]
 8006c48:	6063      	str	r3, [r4, #4]
 8006c4a:	bf04      	itt	eq
 8006c4c:	1809      	addeq	r1, r1, r0
 8006c4e:	6021      	streq	r1, [r4, #0]
 8006c50:	6054      	str	r4, [r2, #4]
 8006c52:	e7ca      	b.n	8006bea <_free_r+0x22>
 8006c54:	bd38      	pop	{r3, r4, r5, pc}
 8006c56:	bf00      	nop
 8006c58:	200003ac 	.word	0x200003ac

08006c5c <sbrk_aligned>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	4e0f      	ldr	r6, [pc, #60]	@ (8006c9c <sbrk_aligned+0x40>)
 8006c60:	460c      	mov	r4, r1
 8006c62:	6831      	ldr	r1, [r6, #0]
 8006c64:	4605      	mov	r5, r0
 8006c66:	b911      	cbnz	r1, 8006c6e <sbrk_aligned+0x12>
 8006c68:	f000 fca4 	bl	80075b4 <_sbrk_r>
 8006c6c:	6030      	str	r0, [r6, #0]
 8006c6e:	4621      	mov	r1, r4
 8006c70:	4628      	mov	r0, r5
 8006c72:	f000 fc9f 	bl	80075b4 <_sbrk_r>
 8006c76:	1c43      	adds	r3, r0, #1
 8006c78:	d103      	bne.n	8006c82 <sbrk_aligned+0x26>
 8006c7a:	f04f 34ff 	mov.w	r4, #4294967295
 8006c7e:	4620      	mov	r0, r4
 8006c80:	bd70      	pop	{r4, r5, r6, pc}
 8006c82:	1cc4      	adds	r4, r0, #3
 8006c84:	f024 0403 	bic.w	r4, r4, #3
 8006c88:	42a0      	cmp	r0, r4
 8006c8a:	d0f8      	beq.n	8006c7e <sbrk_aligned+0x22>
 8006c8c:	1a21      	subs	r1, r4, r0
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f000 fc90 	bl	80075b4 <_sbrk_r>
 8006c94:	3001      	adds	r0, #1
 8006c96:	d1f2      	bne.n	8006c7e <sbrk_aligned+0x22>
 8006c98:	e7ef      	b.n	8006c7a <sbrk_aligned+0x1e>
 8006c9a:	bf00      	nop
 8006c9c:	200003a8 	.word	0x200003a8

08006ca0 <_malloc_r>:
 8006ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca4:	1ccd      	adds	r5, r1, #3
 8006ca6:	f025 0503 	bic.w	r5, r5, #3
 8006caa:	3508      	adds	r5, #8
 8006cac:	2d0c      	cmp	r5, #12
 8006cae:	bf38      	it	cc
 8006cb0:	250c      	movcc	r5, #12
 8006cb2:	2d00      	cmp	r5, #0
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	db01      	blt.n	8006cbc <_malloc_r+0x1c>
 8006cb8:	42a9      	cmp	r1, r5
 8006cba:	d904      	bls.n	8006cc6 <_malloc_r+0x26>
 8006cbc:	230c      	movs	r3, #12
 8006cbe:	6033      	str	r3, [r6, #0]
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d9c <_malloc_r+0xfc>
 8006cca:	f000 f869 	bl	8006da0 <__malloc_lock>
 8006cce:	f8d8 3000 	ldr.w	r3, [r8]
 8006cd2:	461c      	mov	r4, r3
 8006cd4:	bb44      	cbnz	r4, 8006d28 <_malloc_r+0x88>
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	4630      	mov	r0, r6
 8006cda:	f7ff ffbf 	bl	8006c5c <sbrk_aligned>
 8006cde:	1c43      	adds	r3, r0, #1
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	d158      	bne.n	8006d96 <_malloc_r+0xf6>
 8006ce4:	f8d8 4000 	ldr.w	r4, [r8]
 8006ce8:	4627      	mov	r7, r4
 8006cea:	2f00      	cmp	r7, #0
 8006cec:	d143      	bne.n	8006d76 <_malloc_r+0xd6>
 8006cee:	2c00      	cmp	r4, #0
 8006cf0:	d04b      	beq.n	8006d8a <_malloc_r+0xea>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	4639      	mov	r1, r7
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	eb04 0903 	add.w	r9, r4, r3
 8006cfc:	f000 fc5a 	bl	80075b4 <_sbrk_r>
 8006d00:	4581      	cmp	r9, r0
 8006d02:	d142      	bne.n	8006d8a <_malloc_r+0xea>
 8006d04:	6821      	ldr	r1, [r4, #0]
 8006d06:	1a6d      	subs	r5, r5, r1
 8006d08:	4629      	mov	r1, r5
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	f7ff ffa6 	bl	8006c5c <sbrk_aligned>
 8006d10:	3001      	adds	r0, #1
 8006d12:	d03a      	beq.n	8006d8a <_malloc_r+0xea>
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	442b      	add	r3, r5
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	bb62      	cbnz	r2, 8006d7c <_malloc_r+0xdc>
 8006d22:	f8c8 7000 	str.w	r7, [r8]
 8006d26:	e00f      	b.n	8006d48 <_malloc_r+0xa8>
 8006d28:	6822      	ldr	r2, [r4, #0]
 8006d2a:	1b52      	subs	r2, r2, r5
 8006d2c:	d420      	bmi.n	8006d70 <_malloc_r+0xd0>
 8006d2e:	2a0b      	cmp	r2, #11
 8006d30:	d917      	bls.n	8006d62 <_malloc_r+0xc2>
 8006d32:	1961      	adds	r1, r4, r5
 8006d34:	42a3      	cmp	r3, r4
 8006d36:	6025      	str	r5, [r4, #0]
 8006d38:	bf18      	it	ne
 8006d3a:	6059      	strne	r1, [r3, #4]
 8006d3c:	6863      	ldr	r3, [r4, #4]
 8006d3e:	bf08      	it	eq
 8006d40:	f8c8 1000 	streq.w	r1, [r8]
 8006d44:	5162      	str	r2, [r4, r5]
 8006d46:	604b      	str	r3, [r1, #4]
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f000 f82f 	bl	8006dac <__malloc_unlock>
 8006d4e:	f104 000b 	add.w	r0, r4, #11
 8006d52:	1d23      	adds	r3, r4, #4
 8006d54:	f020 0007 	bic.w	r0, r0, #7
 8006d58:	1ac2      	subs	r2, r0, r3
 8006d5a:	bf1c      	itt	ne
 8006d5c:	1a1b      	subne	r3, r3, r0
 8006d5e:	50a3      	strne	r3, [r4, r2]
 8006d60:	e7af      	b.n	8006cc2 <_malloc_r+0x22>
 8006d62:	6862      	ldr	r2, [r4, #4]
 8006d64:	42a3      	cmp	r3, r4
 8006d66:	bf0c      	ite	eq
 8006d68:	f8c8 2000 	streq.w	r2, [r8]
 8006d6c:	605a      	strne	r2, [r3, #4]
 8006d6e:	e7eb      	b.n	8006d48 <_malloc_r+0xa8>
 8006d70:	4623      	mov	r3, r4
 8006d72:	6864      	ldr	r4, [r4, #4]
 8006d74:	e7ae      	b.n	8006cd4 <_malloc_r+0x34>
 8006d76:	463c      	mov	r4, r7
 8006d78:	687f      	ldr	r7, [r7, #4]
 8006d7a:	e7b6      	b.n	8006cea <_malloc_r+0x4a>
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	42a3      	cmp	r3, r4
 8006d82:	d1fb      	bne.n	8006d7c <_malloc_r+0xdc>
 8006d84:	2300      	movs	r3, #0
 8006d86:	6053      	str	r3, [r2, #4]
 8006d88:	e7de      	b.n	8006d48 <_malloc_r+0xa8>
 8006d8a:	230c      	movs	r3, #12
 8006d8c:	6033      	str	r3, [r6, #0]
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f000 f80c 	bl	8006dac <__malloc_unlock>
 8006d94:	e794      	b.n	8006cc0 <_malloc_r+0x20>
 8006d96:	6005      	str	r5, [r0, #0]
 8006d98:	e7d6      	b.n	8006d48 <_malloc_r+0xa8>
 8006d9a:	bf00      	nop
 8006d9c:	200003ac 	.word	0x200003ac

08006da0 <__malloc_lock>:
 8006da0:	4801      	ldr	r0, [pc, #4]	@ (8006da8 <__malloc_lock+0x8>)
 8006da2:	f7ff bf0e 	b.w	8006bc2 <__retarget_lock_acquire_recursive>
 8006da6:	bf00      	nop
 8006da8:	200003a4 	.word	0x200003a4

08006dac <__malloc_unlock>:
 8006dac:	4801      	ldr	r0, [pc, #4]	@ (8006db4 <__malloc_unlock+0x8>)
 8006dae:	f7ff bf09 	b.w	8006bc4 <__retarget_lock_release_recursive>
 8006db2:	bf00      	nop
 8006db4:	200003a4 	.word	0x200003a4

08006db8 <__sfputc_r>:
 8006db8:	6893      	ldr	r3, [r2, #8]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	b410      	push	{r4}
 8006dc0:	6093      	str	r3, [r2, #8]
 8006dc2:	da08      	bge.n	8006dd6 <__sfputc_r+0x1e>
 8006dc4:	6994      	ldr	r4, [r2, #24]
 8006dc6:	42a3      	cmp	r3, r4
 8006dc8:	db01      	blt.n	8006dce <__sfputc_r+0x16>
 8006dca:	290a      	cmp	r1, #10
 8006dcc:	d103      	bne.n	8006dd6 <__sfputc_r+0x1e>
 8006dce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dd2:	f7ff bde8 	b.w	80069a6 <__swbuf_r>
 8006dd6:	6813      	ldr	r3, [r2, #0]
 8006dd8:	1c58      	adds	r0, r3, #1
 8006dda:	6010      	str	r0, [r2, #0]
 8006ddc:	7019      	strb	r1, [r3, #0]
 8006dde:	4608      	mov	r0, r1
 8006de0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <__sfputs_r>:
 8006de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de8:	4606      	mov	r6, r0
 8006dea:	460f      	mov	r7, r1
 8006dec:	4614      	mov	r4, r2
 8006dee:	18d5      	adds	r5, r2, r3
 8006df0:	42ac      	cmp	r4, r5
 8006df2:	d101      	bne.n	8006df8 <__sfputs_r+0x12>
 8006df4:	2000      	movs	r0, #0
 8006df6:	e007      	b.n	8006e08 <__sfputs_r+0x22>
 8006df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dfc:	463a      	mov	r2, r7
 8006dfe:	4630      	mov	r0, r6
 8006e00:	f7ff ffda 	bl	8006db8 <__sfputc_r>
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	d1f3      	bne.n	8006df0 <__sfputs_r+0xa>
 8006e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e0c <_vfiprintf_r>:
 8006e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e10:	460d      	mov	r5, r1
 8006e12:	b09d      	sub	sp, #116	@ 0x74
 8006e14:	4614      	mov	r4, r2
 8006e16:	4698      	mov	r8, r3
 8006e18:	4606      	mov	r6, r0
 8006e1a:	b118      	cbz	r0, 8006e24 <_vfiprintf_r+0x18>
 8006e1c:	6a03      	ldr	r3, [r0, #32]
 8006e1e:	b90b      	cbnz	r3, 8006e24 <_vfiprintf_r+0x18>
 8006e20:	f7ff fcd8 	bl	80067d4 <__sinit>
 8006e24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e26:	07d9      	lsls	r1, r3, #31
 8006e28:	d405      	bmi.n	8006e36 <_vfiprintf_r+0x2a>
 8006e2a:	89ab      	ldrh	r3, [r5, #12]
 8006e2c:	059a      	lsls	r2, r3, #22
 8006e2e:	d402      	bmi.n	8006e36 <_vfiprintf_r+0x2a>
 8006e30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e32:	f7ff fec6 	bl	8006bc2 <__retarget_lock_acquire_recursive>
 8006e36:	89ab      	ldrh	r3, [r5, #12]
 8006e38:	071b      	lsls	r3, r3, #28
 8006e3a:	d501      	bpl.n	8006e40 <_vfiprintf_r+0x34>
 8006e3c:	692b      	ldr	r3, [r5, #16]
 8006e3e:	b99b      	cbnz	r3, 8006e68 <_vfiprintf_r+0x5c>
 8006e40:	4629      	mov	r1, r5
 8006e42:	4630      	mov	r0, r6
 8006e44:	f7ff fdee 	bl	8006a24 <__swsetup_r>
 8006e48:	b170      	cbz	r0, 8006e68 <_vfiprintf_r+0x5c>
 8006e4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e4c:	07dc      	lsls	r4, r3, #31
 8006e4e:	d504      	bpl.n	8006e5a <_vfiprintf_r+0x4e>
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295
 8006e54:	b01d      	add	sp, #116	@ 0x74
 8006e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5a:	89ab      	ldrh	r3, [r5, #12]
 8006e5c:	0598      	lsls	r0, r3, #22
 8006e5e:	d4f7      	bmi.n	8006e50 <_vfiprintf_r+0x44>
 8006e60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e62:	f7ff feaf 	bl	8006bc4 <__retarget_lock_release_recursive>
 8006e66:	e7f3      	b.n	8006e50 <_vfiprintf_r+0x44>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e6c:	2320      	movs	r3, #32
 8006e6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e72:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e76:	2330      	movs	r3, #48	@ 0x30
 8006e78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007028 <_vfiprintf_r+0x21c>
 8006e7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e80:	f04f 0901 	mov.w	r9, #1
 8006e84:	4623      	mov	r3, r4
 8006e86:	469a      	mov	sl, r3
 8006e88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e8c:	b10a      	cbz	r2, 8006e92 <_vfiprintf_r+0x86>
 8006e8e:	2a25      	cmp	r2, #37	@ 0x25
 8006e90:	d1f9      	bne.n	8006e86 <_vfiprintf_r+0x7a>
 8006e92:	ebba 0b04 	subs.w	fp, sl, r4
 8006e96:	d00b      	beq.n	8006eb0 <_vfiprintf_r+0xa4>
 8006e98:	465b      	mov	r3, fp
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f7ff ffa1 	bl	8006de6 <__sfputs_r>
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	f000 80a7 	beq.w	8006ff8 <_vfiprintf_r+0x1ec>
 8006eaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006eac:	445a      	add	r2, fp
 8006eae:	9209      	str	r2, [sp, #36]	@ 0x24
 8006eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 809f 	beq.w	8006ff8 <_vfiprintf_r+0x1ec>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ec4:	f10a 0a01 	add.w	sl, sl, #1
 8006ec8:	9304      	str	r3, [sp, #16]
 8006eca:	9307      	str	r3, [sp, #28]
 8006ecc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ed0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ed2:	4654      	mov	r4, sl
 8006ed4:	2205      	movs	r2, #5
 8006ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eda:	4853      	ldr	r0, [pc, #332]	@ (8007028 <_vfiprintf_r+0x21c>)
 8006edc:	f7f9 f978 	bl	80001d0 <memchr>
 8006ee0:	9a04      	ldr	r2, [sp, #16]
 8006ee2:	b9d8      	cbnz	r0, 8006f1c <_vfiprintf_r+0x110>
 8006ee4:	06d1      	lsls	r1, r2, #27
 8006ee6:	bf44      	itt	mi
 8006ee8:	2320      	movmi	r3, #32
 8006eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006eee:	0713      	lsls	r3, r2, #28
 8006ef0:	bf44      	itt	mi
 8006ef2:	232b      	movmi	r3, #43	@ 0x2b
 8006ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8006efc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006efe:	d015      	beq.n	8006f2c <_vfiprintf_r+0x120>
 8006f00:	9a07      	ldr	r2, [sp, #28]
 8006f02:	4654      	mov	r4, sl
 8006f04:	2000      	movs	r0, #0
 8006f06:	f04f 0c0a 	mov.w	ip, #10
 8006f0a:	4621      	mov	r1, r4
 8006f0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f10:	3b30      	subs	r3, #48	@ 0x30
 8006f12:	2b09      	cmp	r3, #9
 8006f14:	d94b      	bls.n	8006fae <_vfiprintf_r+0x1a2>
 8006f16:	b1b0      	cbz	r0, 8006f46 <_vfiprintf_r+0x13a>
 8006f18:	9207      	str	r2, [sp, #28]
 8006f1a:	e014      	b.n	8006f46 <_vfiprintf_r+0x13a>
 8006f1c:	eba0 0308 	sub.w	r3, r0, r8
 8006f20:	fa09 f303 	lsl.w	r3, r9, r3
 8006f24:	4313      	orrs	r3, r2
 8006f26:	9304      	str	r3, [sp, #16]
 8006f28:	46a2      	mov	sl, r4
 8006f2a:	e7d2      	b.n	8006ed2 <_vfiprintf_r+0xc6>
 8006f2c:	9b03      	ldr	r3, [sp, #12]
 8006f2e:	1d19      	adds	r1, r3, #4
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	9103      	str	r1, [sp, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	bfbb      	ittet	lt
 8006f38:	425b      	neglt	r3, r3
 8006f3a:	f042 0202 	orrlt.w	r2, r2, #2
 8006f3e:	9307      	strge	r3, [sp, #28]
 8006f40:	9307      	strlt	r3, [sp, #28]
 8006f42:	bfb8      	it	lt
 8006f44:	9204      	strlt	r2, [sp, #16]
 8006f46:	7823      	ldrb	r3, [r4, #0]
 8006f48:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f4a:	d10a      	bne.n	8006f62 <_vfiprintf_r+0x156>
 8006f4c:	7863      	ldrb	r3, [r4, #1]
 8006f4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f50:	d132      	bne.n	8006fb8 <_vfiprintf_r+0x1ac>
 8006f52:	9b03      	ldr	r3, [sp, #12]
 8006f54:	1d1a      	adds	r2, r3, #4
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	9203      	str	r2, [sp, #12]
 8006f5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f5e:	3402      	adds	r4, #2
 8006f60:	9305      	str	r3, [sp, #20]
 8006f62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007038 <_vfiprintf_r+0x22c>
 8006f66:	7821      	ldrb	r1, [r4, #0]
 8006f68:	2203      	movs	r2, #3
 8006f6a:	4650      	mov	r0, sl
 8006f6c:	f7f9 f930 	bl	80001d0 <memchr>
 8006f70:	b138      	cbz	r0, 8006f82 <_vfiprintf_r+0x176>
 8006f72:	9b04      	ldr	r3, [sp, #16]
 8006f74:	eba0 000a 	sub.w	r0, r0, sl
 8006f78:	2240      	movs	r2, #64	@ 0x40
 8006f7a:	4082      	lsls	r2, r0
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	3401      	adds	r4, #1
 8006f80:	9304      	str	r3, [sp, #16]
 8006f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f86:	4829      	ldr	r0, [pc, #164]	@ (800702c <_vfiprintf_r+0x220>)
 8006f88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f8c:	2206      	movs	r2, #6
 8006f8e:	f7f9 f91f 	bl	80001d0 <memchr>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d03f      	beq.n	8007016 <_vfiprintf_r+0x20a>
 8006f96:	4b26      	ldr	r3, [pc, #152]	@ (8007030 <_vfiprintf_r+0x224>)
 8006f98:	bb1b      	cbnz	r3, 8006fe2 <_vfiprintf_r+0x1d6>
 8006f9a:	9b03      	ldr	r3, [sp, #12]
 8006f9c:	3307      	adds	r3, #7
 8006f9e:	f023 0307 	bic.w	r3, r3, #7
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	9303      	str	r3, [sp, #12]
 8006fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fa8:	443b      	add	r3, r7
 8006faa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fac:	e76a      	b.n	8006e84 <_vfiprintf_r+0x78>
 8006fae:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	2001      	movs	r0, #1
 8006fb6:	e7a8      	b.n	8006f0a <_vfiprintf_r+0xfe>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	3401      	adds	r4, #1
 8006fbc:	9305      	str	r3, [sp, #20]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	f04f 0c0a 	mov.w	ip, #10
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fca:	3a30      	subs	r2, #48	@ 0x30
 8006fcc:	2a09      	cmp	r2, #9
 8006fce:	d903      	bls.n	8006fd8 <_vfiprintf_r+0x1cc>
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d0c6      	beq.n	8006f62 <_vfiprintf_r+0x156>
 8006fd4:	9105      	str	r1, [sp, #20]
 8006fd6:	e7c4      	b.n	8006f62 <_vfiprintf_r+0x156>
 8006fd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fdc:	4604      	mov	r4, r0
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e7f0      	b.n	8006fc4 <_vfiprintf_r+0x1b8>
 8006fe2:	ab03      	add	r3, sp, #12
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	462a      	mov	r2, r5
 8006fe8:	4b12      	ldr	r3, [pc, #72]	@ (8007034 <_vfiprintf_r+0x228>)
 8006fea:	a904      	add	r1, sp, #16
 8006fec:	4630      	mov	r0, r6
 8006fee:	f3af 8000 	nop.w
 8006ff2:	4607      	mov	r7, r0
 8006ff4:	1c78      	adds	r0, r7, #1
 8006ff6:	d1d6      	bne.n	8006fa6 <_vfiprintf_r+0x19a>
 8006ff8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ffa:	07d9      	lsls	r1, r3, #31
 8006ffc:	d405      	bmi.n	800700a <_vfiprintf_r+0x1fe>
 8006ffe:	89ab      	ldrh	r3, [r5, #12]
 8007000:	059a      	lsls	r2, r3, #22
 8007002:	d402      	bmi.n	800700a <_vfiprintf_r+0x1fe>
 8007004:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007006:	f7ff fddd 	bl	8006bc4 <__retarget_lock_release_recursive>
 800700a:	89ab      	ldrh	r3, [r5, #12]
 800700c:	065b      	lsls	r3, r3, #25
 800700e:	f53f af1f 	bmi.w	8006e50 <_vfiprintf_r+0x44>
 8007012:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007014:	e71e      	b.n	8006e54 <_vfiprintf_r+0x48>
 8007016:	ab03      	add	r3, sp, #12
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	462a      	mov	r2, r5
 800701c:	4b05      	ldr	r3, [pc, #20]	@ (8007034 <_vfiprintf_r+0x228>)
 800701e:	a904      	add	r1, sp, #16
 8007020:	4630      	mov	r0, r6
 8007022:	f000 f879 	bl	8007118 <_printf_i>
 8007026:	e7e4      	b.n	8006ff2 <_vfiprintf_r+0x1e6>
 8007028:	0800853c 	.word	0x0800853c
 800702c:	08008546 	.word	0x08008546
 8007030:	00000000 	.word	0x00000000
 8007034:	08006de7 	.word	0x08006de7
 8007038:	08008542 	.word	0x08008542

0800703c <_printf_common>:
 800703c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007040:	4616      	mov	r6, r2
 8007042:	4698      	mov	r8, r3
 8007044:	688a      	ldr	r2, [r1, #8]
 8007046:	690b      	ldr	r3, [r1, #16]
 8007048:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800704c:	4293      	cmp	r3, r2
 800704e:	bfb8      	it	lt
 8007050:	4613      	movlt	r3, r2
 8007052:	6033      	str	r3, [r6, #0]
 8007054:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007058:	4607      	mov	r7, r0
 800705a:	460c      	mov	r4, r1
 800705c:	b10a      	cbz	r2, 8007062 <_printf_common+0x26>
 800705e:	3301      	adds	r3, #1
 8007060:	6033      	str	r3, [r6, #0]
 8007062:	6823      	ldr	r3, [r4, #0]
 8007064:	0699      	lsls	r1, r3, #26
 8007066:	bf42      	ittt	mi
 8007068:	6833      	ldrmi	r3, [r6, #0]
 800706a:	3302      	addmi	r3, #2
 800706c:	6033      	strmi	r3, [r6, #0]
 800706e:	6825      	ldr	r5, [r4, #0]
 8007070:	f015 0506 	ands.w	r5, r5, #6
 8007074:	d106      	bne.n	8007084 <_printf_common+0x48>
 8007076:	f104 0a19 	add.w	sl, r4, #25
 800707a:	68e3      	ldr	r3, [r4, #12]
 800707c:	6832      	ldr	r2, [r6, #0]
 800707e:	1a9b      	subs	r3, r3, r2
 8007080:	42ab      	cmp	r3, r5
 8007082:	dc26      	bgt.n	80070d2 <_printf_common+0x96>
 8007084:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007088:	6822      	ldr	r2, [r4, #0]
 800708a:	3b00      	subs	r3, #0
 800708c:	bf18      	it	ne
 800708e:	2301      	movne	r3, #1
 8007090:	0692      	lsls	r2, r2, #26
 8007092:	d42b      	bmi.n	80070ec <_printf_common+0xb0>
 8007094:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007098:	4641      	mov	r1, r8
 800709a:	4638      	mov	r0, r7
 800709c:	47c8      	blx	r9
 800709e:	3001      	adds	r0, #1
 80070a0:	d01e      	beq.n	80070e0 <_printf_common+0xa4>
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	6922      	ldr	r2, [r4, #16]
 80070a6:	f003 0306 	and.w	r3, r3, #6
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	bf02      	ittt	eq
 80070ae:	68e5      	ldreq	r5, [r4, #12]
 80070b0:	6833      	ldreq	r3, [r6, #0]
 80070b2:	1aed      	subeq	r5, r5, r3
 80070b4:	68a3      	ldr	r3, [r4, #8]
 80070b6:	bf0c      	ite	eq
 80070b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070bc:	2500      	movne	r5, #0
 80070be:	4293      	cmp	r3, r2
 80070c0:	bfc4      	itt	gt
 80070c2:	1a9b      	subgt	r3, r3, r2
 80070c4:	18ed      	addgt	r5, r5, r3
 80070c6:	2600      	movs	r6, #0
 80070c8:	341a      	adds	r4, #26
 80070ca:	42b5      	cmp	r5, r6
 80070cc:	d11a      	bne.n	8007104 <_printf_common+0xc8>
 80070ce:	2000      	movs	r0, #0
 80070d0:	e008      	b.n	80070e4 <_printf_common+0xa8>
 80070d2:	2301      	movs	r3, #1
 80070d4:	4652      	mov	r2, sl
 80070d6:	4641      	mov	r1, r8
 80070d8:	4638      	mov	r0, r7
 80070da:	47c8      	blx	r9
 80070dc:	3001      	adds	r0, #1
 80070de:	d103      	bne.n	80070e8 <_printf_common+0xac>
 80070e0:	f04f 30ff 	mov.w	r0, #4294967295
 80070e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e8:	3501      	adds	r5, #1
 80070ea:	e7c6      	b.n	800707a <_printf_common+0x3e>
 80070ec:	18e1      	adds	r1, r4, r3
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	2030      	movs	r0, #48	@ 0x30
 80070f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070f6:	4422      	add	r2, r4
 80070f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007100:	3302      	adds	r3, #2
 8007102:	e7c7      	b.n	8007094 <_printf_common+0x58>
 8007104:	2301      	movs	r3, #1
 8007106:	4622      	mov	r2, r4
 8007108:	4641      	mov	r1, r8
 800710a:	4638      	mov	r0, r7
 800710c:	47c8      	blx	r9
 800710e:	3001      	adds	r0, #1
 8007110:	d0e6      	beq.n	80070e0 <_printf_common+0xa4>
 8007112:	3601      	adds	r6, #1
 8007114:	e7d9      	b.n	80070ca <_printf_common+0x8e>
	...

08007118 <_printf_i>:
 8007118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800711c:	7e0f      	ldrb	r7, [r1, #24]
 800711e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007120:	2f78      	cmp	r7, #120	@ 0x78
 8007122:	4691      	mov	r9, r2
 8007124:	4680      	mov	r8, r0
 8007126:	460c      	mov	r4, r1
 8007128:	469a      	mov	sl, r3
 800712a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800712e:	d807      	bhi.n	8007140 <_printf_i+0x28>
 8007130:	2f62      	cmp	r7, #98	@ 0x62
 8007132:	d80a      	bhi.n	800714a <_printf_i+0x32>
 8007134:	2f00      	cmp	r7, #0
 8007136:	f000 80d1 	beq.w	80072dc <_printf_i+0x1c4>
 800713a:	2f58      	cmp	r7, #88	@ 0x58
 800713c:	f000 80b8 	beq.w	80072b0 <_printf_i+0x198>
 8007140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007144:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007148:	e03a      	b.n	80071c0 <_printf_i+0xa8>
 800714a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800714e:	2b15      	cmp	r3, #21
 8007150:	d8f6      	bhi.n	8007140 <_printf_i+0x28>
 8007152:	a101      	add	r1, pc, #4	@ (adr r1, 8007158 <_printf_i+0x40>)
 8007154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007158:	080071b1 	.word	0x080071b1
 800715c:	080071c5 	.word	0x080071c5
 8007160:	08007141 	.word	0x08007141
 8007164:	08007141 	.word	0x08007141
 8007168:	08007141 	.word	0x08007141
 800716c:	08007141 	.word	0x08007141
 8007170:	080071c5 	.word	0x080071c5
 8007174:	08007141 	.word	0x08007141
 8007178:	08007141 	.word	0x08007141
 800717c:	08007141 	.word	0x08007141
 8007180:	08007141 	.word	0x08007141
 8007184:	080072c3 	.word	0x080072c3
 8007188:	080071ef 	.word	0x080071ef
 800718c:	0800727d 	.word	0x0800727d
 8007190:	08007141 	.word	0x08007141
 8007194:	08007141 	.word	0x08007141
 8007198:	080072e5 	.word	0x080072e5
 800719c:	08007141 	.word	0x08007141
 80071a0:	080071ef 	.word	0x080071ef
 80071a4:	08007141 	.word	0x08007141
 80071a8:	08007141 	.word	0x08007141
 80071ac:	08007285 	.word	0x08007285
 80071b0:	6833      	ldr	r3, [r6, #0]
 80071b2:	1d1a      	adds	r2, r3, #4
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6032      	str	r2, [r6, #0]
 80071b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071c0:	2301      	movs	r3, #1
 80071c2:	e09c      	b.n	80072fe <_printf_i+0x1e6>
 80071c4:	6833      	ldr	r3, [r6, #0]
 80071c6:	6820      	ldr	r0, [r4, #0]
 80071c8:	1d19      	adds	r1, r3, #4
 80071ca:	6031      	str	r1, [r6, #0]
 80071cc:	0606      	lsls	r6, r0, #24
 80071ce:	d501      	bpl.n	80071d4 <_printf_i+0xbc>
 80071d0:	681d      	ldr	r5, [r3, #0]
 80071d2:	e003      	b.n	80071dc <_printf_i+0xc4>
 80071d4:	0645      	lsls	r5, r0, #25
 80071d6:	d5fb      	bpl.n	80071d0 <_printf_i+0xb8>
 80071d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071dc:	2d00      	cmp	r5, #0
 80071de:	da03      	bge.n	80071e8 <_printf_i+0xd0>
 80071e0:	232d      	movs	r3, #45	@ 0x2d
 80071e2:	426d      	negs	r5, r5
 80071e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071e8:	4858      	ldr	r0, [pc, #352]	@ (800734c <_printf_i+0x234>)
 80071ea:	230a      	movs	r3, #10
 80071ec:	e011      	b.n	8007212 <_printf_i+0xfa>
 80071ee:	6821      	ldr	r1, [r4, #0]
 80071f0:	6833      	ldr	r3, [r6, #0]
 80071f2:	0608      	lsls	r0, r1, #24
 80071f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80071f8:	d402      	bmi.n	8007200 <_printf_i+0xe8>
 80071fa:	0649      	lsls	r1, r1, #25
 80071fc:	bf48      	it	mi
 80071fe:	b2ad      	uxthmi	r5, r5
 8007200:	2f6f      	cmp	r7, #111	@ 0x6f
 8007202:	4852      	ldr	r0, [pc, #328]	@ (800734c <_printf_i+0x234>)
 8007204:	6033      	str	r3, [r6, #0]
 8007206:	bf14      	ite	ne
 8007208:	230a      	movne	r3, #10
 800720a:	2308      	moveq	r3, #8
 800720c:	2100      	movs	r1, #0
 800720e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007212:	6866      	ldr	r6, [r4, #4]
 8007214:	60a6      	str	r6, [r4, #8]
 8007216:	2e00      	cmp	r6, #0
 8007218:	db05      	blt.n	8007226 <_printf_i+0x10e>
 800721a:	6821      	ldr	r1, [r4, #0]
 800721c:	432e      	orrs	r6, r5
 800721e:	f021 0104 	bic.w	r1, r1, #4
 8007222:	6021      	str	r1, [r4, #0]
 8007224:	d04b      	beq.n	80072be <_printf_i+0x1a6>
 8007226:	4616      	mov	r6, r2
 8007228:	fbb5 f1f3 	udiv	r1, r5, r3
 800722c:	fb03 5711 	mls	r7, r3, r1, r5
 8007230:	5dc7      	ldrb	r7, [r0, r7]
 8007232:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007236:	462f      	mov	r7, r5
 8007238:	42bb      	cmp	r3, r7
 800723a:	460d      	mov	r5, r1
 800723c:	d9f4      	bls.n	8007228 <_printf_i+0x110>
 800723e:	2b08      	cmp	r3, #8
 8007240:	d10b      	bne.n	800725a <_printf_i+0x142>
 8007242:	6823      	ldr	r3, [r4, #0]
 8007244:	07df      	lsls	r7, r3, #31
 8007246:	d508      	bpl.n	800725a <_printf_i+0x142>
 8007248:	6923      	ldr	r3, [r4, #16]
 800724a:	6861      	ldr	r1, [r4, #4]
 800724c:	4299      	cmp	r1, r3
 800724e:	bfde      	ittt	le
 8007250:	2330      	movle	r3, #48	@ 0x30
 8007252:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007256:	f106 36ff 	addle.w	r6, r6, #4294967295
 800725a:	1b92      	subs	r2, r2, r6
 800725c:	6122      	str	r2, [r4, #16]
 800725e:	f8cd a000 	str.w	sl, [sp]
 8007262:	464b      	mov	r3, r9
 8007264:	aa03      	add	r2, sp, #12
 8007266:	4621      	mov	r1, r4
 8007268:	4640      	mov	r0, r8
 800726a:	f7ff fee7 	bl	800703c <_printf_common>
 800726e:	3001      	adds	r0, #1
 8007270:	d14a      	bne.n	8007308 <_printf_i+0x1f0>
 8007272:	f04f 30ff 	mov.w	r0, #4294967295
 8007276:	b004      	add	sp, #16
 8007278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	f043 0320 	orr.w	r3, r3, #32
 8007282:	6023      	str	r3, [r4, #0]
 8007284:	4832      	ldr	r0, [pc, #200]	@ (8007350 <_printf_i+0x238>)
 8007286:	2778      	movs	r7, #120	@ 0x78
 8007288:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	6831      	ldr	r1, [r6, #0]
 8007290:	061f      	lsls	r7, r3, #24
 8007292:	f851 5b04 	ldr.w	r5, [r1], #4
 8007296:	d402      	bmi.n	800729e <_printf_i+0x186>
 8007298:	065f      	lsls	r7, r3, #25
 800729a:	bf48      	it	mi
 800729c:	b2ad      	uxthmi	r5, r5
 800729e:	6031      	str	r1, [r6, #0]
 80072a0:	07d9      	lsls	r1, r3, #31
 80072a2:	bf44      	itt	mi
 80072a4:	f043 0320 	orrmi.w	r3, r3, #32
 80072a8:	6023      	strmi	r3, [r4, #0]
 80072aa:	b11d      	cbz	r5, 80072b4 <_printf_i+0x19c>
 80072ac:	2310      	movs	r3, #16
 80072ae:	e7ad      	b.n	800720c <_printf_i+0xf4>
 80072b0:	4826      	ldr	r0, [pc, #152]	@ (800734c <_printf_i+0x234>)
 80072b2:	e7e9      	b.n	8007288 <_printf_i+0x170>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	f023 0320 	bic.w	r3, r3, #32
 80072ba:	6023      	str	r3, [r4, #0]
 80072bc:	e7f6      	b.n	80072ac <_printf_i+0x194>
 80072be:	4616      	mov	r6, r2
 80072c0:	e7bd      	b.n	800723e <_printf_i+0x126>
 80072c2:	6833      	ldr	r3, [r6, #0]
 80072c4:	6825      	ldr	r5, [r4, #0]
 80072c6:	6961      	ldr	r1, [r4, #20]
 80072c8:	1d18      	adds	r0, r3, #4
 80072ca:	6030      	str	r0, [r6, #0]
 80072cc:	062e      	lsls	r6, r5, #24
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	d501      	bpl.n	80072d6 <_printf_i+0x1be>
 80072d2:	6019      	str	r1, [r3, #0]
 80072d4:	e002      	b.n	80072dc <_printf_i+0x1c4>
 80072d6:	0668      	lsls	r0, r5, #25
 80072d8:	d5fb      	bpl.n	80072d2 <_printf_i+0x1ba>
 80072da:	8019      	strh	r1, [r3, #0]
 80072dc:	2300      	movs	r3, #0
 80072de:	6123      	str	r3, [r4, #16]
 80072e0:	4616      	mov	r6, r2
 80072e2:	e7bc      	b.n	800725e <_printf_i+0x146>
 80072e4:	6833      	ldr	r3, [r6, #0]
 80072e6:	1d1a      	adds	r2, r3, #4
 80072e8:	6032      	str	r2, [r6, #0]
 80072ea:	681e      	ldr	r6, [r3, #0]
 80072ec:	6862      	ldr	r2, [r4, #4]
 80072ee:	2100      	movs	r1, #0
 80072f0:	4630      	mov	r0, r6
 80072f2:	f7f8 ff6d 	bl	80001d0 <memchr>
 80072f6:	b108      	cbz	r0, 80072fc <_printf_i+0x1e4>
 80072f8:	1b80      	subs	r0, r0, r6
 80072fa:	6060      	str	r0, [r4, #4]
 80072fc:	6863      	ldr	r3, [r4, #4]
 80072fe:	6123      	str	r3, [r4, #16]
 8007300:	2300      	movs	r3, #0
 8007302:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007306:	e7aa      	b.n	800725e <_printf_i+0x146>
 8007308:	6923      	ldr	r3, [r4, #16]
 800730a:	4632      	mov	r2, r6
 800730c:	4649      	mov	r1, r9
 800730e:	4640      	mov	r0, r8
 8007310:	47d0      	blx	sl
 8007312:	3001      	adds	r0, #1
 8007314:	d0ad      	beq.n	8007272 <_printf_i+0x15a>
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	079b      	lsls	r3, r3, #30
 800731a:	d413      	bmi.n	8007344 <_printf_i+0x22c>
 800731c:	68e0      	ldr	r0, [r4, #12]
 800731e:	9b03      	ldr	r3, [sp, #12]
 8007320:	4298      	cmp	r0, r3
 8007322:	bfb8      	it	lt
 8007324:	4618      	movlt	r0, r3
 8007326:	e7a6      	b.n	8007276 <_printf_i+0x15e>
 8007328:	2301      	movs	r3, #1
 800732a:	4632      	mov	r2, r6
 800732c:	4649      	mov	r1, r9
 800732e:	4640      	mov	r0, r8
 8007330:	47d0      	blx	sl
 8007332:	3001      	adds	r0, #1
 8007334:	d09d      	beq.n	8007272 <_printf_i+0x15a>
 8007336:	3501      	adds	r5, #1
 8007338:	68e3      	ldr	r3, [r4, #12]
 800733a:	9903      	ldr	r1, [sp, #12]
 800733c:	1a5b      	subs	r3, r3, r1
 800733e:	42ab      	cmp	r3, r5
 8007340:	dcf2      	bgt.n	8007328 <_printf_i+0x210>
 8007342:	e7eb      	b.n	800731c <_printf_i+0x204>
 8007344:	2500      	movs	r5, #0
 8007346:	f104 0619 	add.w	r6, r4, #25
 800734a:	e7f5      	b.n	8007338 <_printf_i+0x220>
 800734c:	0800854d 	.word	0x0800854d
 8007350:	0800855e 	.word	0x0800855e

08007354 <__sflush_r>:
 8007354:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800735c:	0716      	lsls	r6, r2, #28
 800735e:	4605      	mov	r5, r0
 8007360:	460c      	mov	r4, r1
 8007362:	d454      	bmi.n	800740e <__sflush_r+0xba>
 8007364:	684b      	ldr	r3, [r1, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	dc02      	bgt.n	8007370 <__sflush_r+0x1c>
 800736a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800736c:	2b00      	cmp	r3, #0
 800736e:	dd48      	ble.n	8007402 <__sflush_r+0xae>
 8007370:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007372:	2e00      	cmp	r6, #0
 8007374:	d045      	beq.n	8007402 <__sflush_r+0xae>
 8007376:	2300      	movs	r3, #0
 8007378:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800737c:	682f      	ldr	r7, [r5, #0]
 800737e:	6a21      	ldr	r1, [r4, #32]
 8007380:	602b      	str	r3, [r5, #0]
 8007382:	d030      	beq.n	80073e6 <__sflush_r+0x92>
 8007384:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	0759      	lsls	r1, r3, #29
 800738a:	d505      	bpl.n	8007398 <__sflush_r+0x44>
 800738c:	6863      	ldr	r3, [r4, #4]
 800738e:	1ad2      	subs	r2, r2, r3
 8007390:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007392:	b10b      	cbz	r3, 8007398 <__sflush_r+0x44>
 8007394:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007396:	1ad2      	subs	r2, r2, r3
 8007398:	2300      	movs	r3, #0
 800739a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800739c:	6a21      	ldr	r1, [r4, #32]
 800739e:	4628      	mov	r0, r5
 80073a0:	47b0      	blx	r6
 80073a2:	1c43      	adds	r3, r0, #1
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	d106      	bne.n	80073b6 <__sflush_r+0x62>
 80073a8:	6829      	ldr	r1, [r5, #0]
 80073aa:	291d      	cmp	r1, #29
 80073ac:	d82b      	bhi.n	8007406 <__sflush_r+0xb2>
 80073ae:	4a2a      	ldr	r2, [pc, #168]	@ (8007458 <__sflush_r+0x104>)
 80073b0:	40ca      	lsrs	r2, r1
 80073b2:	07d6      	lsls	r6, r2, #31
 80073b4:	d527      	bpl.n	8007406 <__sflush_r+0xb2>
 80073b6:	2200      	movs	r2, #0
 80073b8:	6062      	str	r2, [r4, #4]
 80073ba:	04d9      	lsls	r1, r3, #19
 80073bc:	6922      	ldr	r2, [r4, #16]
 80073be:	6022      	str	r2, [r4, #0]
 80073c0:	d504      	bpl.n	80073cc <__sflush_r+0x78>
 80073c2:	1c42      	adds	r2, r0, #1
 80073c4:	d101      	bne.n	80073ca <__sflush_r+0x76>
 80073c6:	682b      	ldr	r3, [r5, #0]
 80073c8:	b903      	cbnz	r3, 80073cc <__sflush_r+0x78>
 80073ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80073cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073ce:	602f      	str	r7, [r5, #0]
 80073d0:	b1b9      	cbz	r1, 8007402 <__sflush_r+0xae>
 80073d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073d6:	4299      	cmp	r1, r3
 80073d8:	d002      	beq.n	80073e0 <__sflush_r+0x8c>
 80073da:	4628      	mov	r0, r5
 80073dc:	f7ff fbf4 	bl	8006bc8 <_free_r>
 80073e0:	2300      	movs	r3, #0
 80073e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80073e4:	e00d      	b.n	8007402 <__sflush_r+0xae>
 80073e6:	2301      	movs	r3, #1
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b0      	blx	r6
 80073ec:	4602      	mov	r2, r0
 80073ee:	1c50      	adds	r0, r2, #1
 80073f0:	d1c9      	bne.n	8007386 <__sflush_r+0x32>
 80073f2:	682b      	ldr	r3, [r5, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0c6      	beq.n	8007386 <__sflush_r+0x32>
 80073f8:	2b1d      	cmp	r3, #29
 80073fa:	d001      	beq.n	8007400 <__sflush_r+0xac>
 80073fc:	2b16      	cmp	r3, #22
 80073fe:	d11e      	bne.n	800743e <__sflush_r+0xea>
 8007400:	602f      	str	r7, [r5, #0]
 8007402:	2000      	movs	r0, #0
 8007404:	e022      	b.n	800744c <__sflush_r+0xf8>
 8007406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800740a:	b21b      	sxth	r3, r3
 800740c:	e01b      	b.n	8007446 <__sflush_r+0xf2>
 800740e:	690f      	ldr	r7, [r1, #16]
 8007410:	2f00      	cmp	r7, #0
 8007412:	d0f6      	beq.n	8007402 <__sflush_r+0xae>
 8007414:	0793      	lsls	r3, r2, #30
 8007416:	680e      	ldr	r6, [r1, #0]
 8007418:	bf08      	it	eq
 800741a:	694b      	ldreq	r3, [r1, #20]
 800741c:	600f      	str	r7, [r1, #0]
 800741e:	bf18      	it	ne
 8007420:	2300      	movne	r3, #0
 8007422:	eba6 0807 	sub.w	r8, r6, r7
 8007426:	608b      	str	r3, [r1, #8]
 8007428:	f1b8 0f00 	cmp.w	r8, #0
 800742c:	dde9      	ble.n	8007402 <__sflush_r+0xae>
 800742e:	6a21      	ldr	r1, [r4, #32]
 8007430:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007432:	4643      	mov	r3, r8
 8007434:	463a      	mov	r2, r7
 8007436:	4628      	mov	r0, r5
 8007438:	47b0      	blx	r6
 800743a:	2800      	cmp	r0, #0
 800743c:	dc08      	bgt.n	8007450 <__sflush_r+0xfc>
 800743e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007446:	81a3      	strh	r3, [r4, #12]
 8007448:	f04f 30ff 	mov.w	r0, #4294967295
 800744c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007450:	4407      	add	r7, r0
 8007452:	eba8 0800 	sub.w	r8, r8, r0
 8007456:	e7e7      	b.n	8007428 <__sflush_r+0xd4>
 8007458:	20400001 	.word	0x20400001

0800745c <_fflush_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	690b      	ldr	r3, [r1, #16]
 8007460:	4605      	mov	r5, r0
 8007462:	460c      	mov	r4, r1
 8007464:	b913      	cbnz	r3, 800746c <_fflush_r+0x10>
 8007466:	2500      	movs	r5, #0
 8007468:	4628      	mov	r0, r5
 800746a:	bd38      	pop	{r3, r4, r5, pc}
 800746c:	b118      	cbz	r0, 8007476 <_fflush_r+0x1a>
 800746e:	6a03      	ldr	r3, [r0, #32]
 8007470:	b90b      	cbnz	r3, 8007476 <_fflush_r+0x1a>
 8007472:	f7ff f9af 	bl	80067d4 <__sinit>
 8007476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0f3      	beq.n	8007466 <_fflush_r+0xa>
 800747e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007480:	07d0      	lsls	r0, r2, #31
 8007482:	d404      	bmi.n	800748e <_fflush_r+0x32>
 8007484:	0599      	lsls	r1, r3, #22
 8007486:	d402      	bmi.n	800748e <_fflush_r+0x32>
 8007488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800748a:	f7ff fb9a 	bl	8006bc2 <__retarget_lock_acquire_recursive>
 800748e:	4628      	mov	r0, r5
 8007490:	4621      	mov	r1, r4
 8007492:	f7ff ff5f 	bl	8007354 <__sflush_r>
 8007496:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007498:	07da      	lsls	r2, r3, #31
 800749a:	4605      	mov	r5, r0
 800749c:	d4e4      	bmi.n	8007468 <_fflush_r+0xc>
 800749e:	89a3      	ldrh	r3, [r4, #12]
 80074a0:	059b      	lsls	r3, r3, #22
 80074a2:	d4e1      	bmi.n	8007468 <_fflush_r+0xc>
 80074a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074a6:	f7ff fb8d 	bl	8006bc4 <__retarget_lock_release_recursive>
 80074aa:	e7dd      	b.n	8007468 <_fflush_r+0xc>

080074ac <__swhatbuf_r>:
 80074ac:	b570      	push	{r4, r5, r6, lr}
 80074ae:	460c      	mov	r4, r1
 80074b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b4:	2900      	cmp	r1, #0
 80074b6:	b096      	sub	sp, #88	@ 0x58
 80074b8:	4615      	mov	r5, r2
 80074ba:	461e      	mov	r6, r3
 80074bc:	da0d      	bge.n	80074da <__swhatbuf_r+0x2e>
 80074be:	89a3      	ldrh	r3, [r4, #12]
 80074c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80074c4:	f04f 0100 	mov.w	r1, #0
 80074c8:	bf14      	ite	ne
 80074ca:	2340      	movne	r3, #64	@ 0x40
 80074cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80074d0:	2000      	movs	r0, #0
 80074d2:	6031      	str	r1, [r6, #0]
 80074d4:	602b      	str	r3, [r5, #0]
 80074d6:	b016      	add	sp, #88	@ 0x58
 80074d8:	bd70      	pop	{r4, r5, r6, pc}
 80074da:	466a      	mov	r2, sp
 80074dc:	f000 f848 	bl	8007570 <_fstat_r>
 80074e0:	2800      	cmp	r0, #0
 80074e2:	dbec      	blt.n	80074be <__swhatbuf_r+0x12>
 80074e4:	9901      	ldr	r1, [sp, #4]
 80074e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80074ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80074ee:	4259      	negs	r1, r3
 80074f0:	4159      	adcs	r1, r3
 80074f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074f6:	e7eb      	b.n	80074d0 <__swhatbuf_r+0x24>

080074f8 <__smakebuf_r>:
 80074f8:	898b      	ldrh	r3, [r1, #12]
 80074fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074fc:	079d      	lsls	r5, r3, #30
 80074fe:	4606      	mov	r6, r0
 8007500:	460c      	mov	r4, r1
 8007502:	d507      	bpl.n	8007514 <__smakebuf_r+0x1c>
 8007504:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	6123      	str	r3, [r4, #16]
 800750c:	2301      	movs	r3, #1
 800750e:	6163      	str	r3, [r4, #20]
 8007510:	b003      	add	sp, #12
 8007512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007514:	ab01      	add	r3, sp, #4
 8007516:	466a      	mov	r2, sp
 8007518:	f7ff ffc8 	bl	80074ac <__swhatbuf_r>
 800751c:	9f00      	ldr	r7, [sp, #0]
 800751e:	4605      	mov	r5, r0
 8007520:	4639      	mov	r1, r7
 8007522:	4630      	mov	r0, r6
 8007524:	f7ff fbbc 	bl	8006ca0 <_malloc_r>
 8007528:	b948      	cbnz	r0, 800753e <__smakebuf_r+0x46>
 800752a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800752e:	059a      	lsls	r2, r3, #22
 8007530:	d4ee      	bmi.n	8007510 <__smakebuf_r+0x18>
 8007532:	f023 0303 	bic.w	r3, r3, #3
 8007536:	f043 0302 	orr.w	r3, r3, #2
 800753a:	81a3      	strh	r3, [r4, #12]
 800753c:	e7e2      	b.n	8007504 <__smakebuf_r+0xc>
 800753e:	89a3      	ldrh	r3, [r4, #12]
 8007540:	6020      	str	r0, [r4, #0]
 8007542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007546:	81a3      	strh	r3, [r4, #12]
 8007548:	9b01      	ldr	r3, [sp, #4]
 800754a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800754e:	b15b      	cbz	r3, 8007568 <__smakebuf_r+0x70>
 8007550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007554:	4630      	mov	r0, r6
 8007556:	f000 f81d 	bl	8007594 <_isatty_r>
 800755a:	b128      	cbz	r0, 8007568 <__smakebuf_r+0x70>
 800755c:	89a3      	ldrh	r3, [r4, #12]
 800755e:	f023 0303 	bic.w	r3, r3, #3
 8007562:	f043 0301 	orr.w	r3, r3, #1
 8007566:	81a3      	strh	r3, [r4, #12]
 8007568:	89a3      	ldrh	r3, [r4, #12]
 800756a:	431d      	orrs	r5, r3
 800756c:	81a5      	strh	r5, [r4, #12]
 800756e:	e7cf      	b.n	8007510 <__smakebuf_r+0x18>

08007570 <_fstat_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4d07      	ldr	r5, [pc, #28]	@ (8007590 <_fstat_r+0x20>)
 8007574:	2300      	movs	r3, #0
 8007576:	4604      	mov	r4, r0
 8007578:	4608      	mov	r0, r1
 800757a:	4611      	mov	r1, r2
 800757c:	602b      	str	r3, [r5, #0]
 800757e:	f7fb f949 	bl	8002814 <_fstat>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	d102      	bne.n	800758c <_fstat_r+0x1c>
 8007586:	682b      	ldr	r3, [r5, #0]
 8007588:	b103      	cbz	r3, 800758c <_fstat_r+0x1c>
 800758a:	6023      	str	r3, [r4, #0]
 800758c:	bd38      	pop	{r3, r4, r5, pc}
 800758e:	bf00      	nop
 8007590:	200003a0 	.word	0x200003a0

08007594 <_isatty_r>:
 8007594:	b538      	push	{r3, r4, r5, lr}
 8007596:	4d06      	ldr	r5, [pc, #24]	@ (80075b0 <_isatty_r+0x1c>)
 8007598:	2300      	movs	r3, #0
 800759a:	4604      	mov	r4, r0
 800759c:	4608      	mov	r0, r1
 800759e:	602b      	str	r3, [r5, #0]
 80075a0:	f7fb f948 	bl	8002834 <_isatty>
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	d102      	bne.n	80075ae <_isatty_r+0x1a>
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	b103      	cbz	r3, 80075ae <_isatty_r+0x1a>
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	bd38      	pop	{r3, r4, r5, pc}
 80075b0:	200003a0 	.word	0x200003a0

080075b4 <_sbrk_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	4d06      	ldr	r5, [pc, #24]	@ (80075d0 <_sbrk_r+0x1c>)
 80075b8:	2300      	movs	r3, #0
 80075ba:	4604      	mov	r4, r0
 80075bc:	4608      	mov	r0, r1
 80075be:	602b      	str	r3, [r5, #0]
 80075c0:	f7fb f950 	bl	8002864 <_sbrk>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d102      	bne.n	80075ce <_sbrk_r+0x1a>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b103      	cbz	r3, 80075ce <_sbrk_r+0x1a>
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	200003a0 	.word	0x200003a0

080075d4 <pow>:
 80075d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d6:	ed2d 8b02 	vpush	{d8}
 80075da:	eeb0 8a40 	vmov.f32	s16, s0
 80075de:	eef0 8a60 	vmov.f32	s17, s1
 80075e2:	ec55 4b11 	vmov	r4, r5, d1
 80075e6:	f000 f873 	bl	80076d0 <__ieee754_pow>
 80075ea:	4622      	mov	r2, r4
 80075ec:	462b      	mov	r3, r5
 80075ee:	4620      	mov	r0, r4
 80075f0:	4629      	mov	r1, r5
 80075f2:	ec57 6b10 	vmov	r6, r7, d0
 80075f6:	f7f9 fa91 	bl	8000b1c <__aeabi_dcmpun>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d13b      	bne.n	8007676 <pow+0xa2>
 80075fe:	ec51 0b18 	vmov	r0, r1, d8
 8007602:	2200      	movs	r2, #0
 8007604:	2300      	movs	r3, #0
 8007606:	f7f9 fa57 	bl	8000ab8 <__aeabi_dcmpeq>
 800760a:	b1b8      	cbz	r0, 800763c <pow+0x68>
 800760c:	2200      	movs	r2, #0
 800760e:	2300      	movs	r3, #0
 8007610:	4620      	mov	r0, r4
 8007612:	4629      	mov	r1, r5
 8007614:	f7f9 fa50 	bl	8000ab8 <__aeabi_dcmpeq>
 8007618:	2800      	cmp	r0, #0
 800761a:	d146      	bne.n	80076aa <pow+0xd6>
 800761c:	ec45 4b10 	vmov	d0, r4, r5
 8007620:	f000 f848 	bl	80076b4 <finite>
 8007624:	b338      	cbz	r0, 8007676 <pow+0xa2>
 8007626:	2200      	movs	r2, #0
 8007628:	2300      	movs	r3, #0
 800762a:	4620      	mov	r0, r4
 800762c:	4629      	mov	r1, r5
 800762e:	f7f9 fa4d 	bl	8000acc <__aeabi_dcmplt>
 8007632:	b300      	cbz	r0, 8007676 <pow+0xa2>
 8007634:	f7ff fa9a 	bl	8006b6c <__errno>
 8007638:	2322      	movs	r3, #34	@ 0x22
 800763a:	e01b      	b.n	8007674 <pow+0xa0>
 800763c:	ec47 6b10 	vmov	d0, r6, r7
 8007640:	f000 f838 	bl	80076b4 <finite>
 8007644:	b9e0      	cbnz	r0, 8007680 <pow+0xac>
 8007646:	eeb0 0a48 	vmov.f32	s0, s16
 800764a:	eef0 0a68 	vmov.f32	s1, s17
 800764e:	f000 f831 	bl	80076b4 <finite>
 8007652:	b1a8      	cbz	r0, 8007680 <pow+0xac>
 8007654:	ec45 4b10 	vmov	d0, r4, r5
 8007658:	f000 f82c 	bl	80076b4 <finite>
 800765c:	b180      	cbz	r0, 8007680 <pow+0xac>
 800765e:	4632      	mov	r2, r6
 8007660:	463b      	mov	r3, r7
 8007662:	4630      	mov	r0, r6
 8007664:	4639      	mov	r1, r7
 8007666:	f7f9 fa59 	bl	8000b1c <__aeabi_dcmpun>
 800766a:	2800      	cmp	r0, #0
 800766c:	d0e2      	beq.n	8007634 <pow+0x60>
 800766e:	f7ff fa7d 	bl	8006b6c <__errno>
 8007672:	2321      	movs	r3, #33	@ 0x21
 8007674:	6003      	str	r3, [r0, #0]
 8007676:	ecbd 8b02 	vpop	{d8}
 800767a:	ec47 6b10 	vmov	d0, r6, r7
 800767e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007680:	2200      	movs	r2, #0
 8007682:	2300      	movs	r3, #0
 8007684:	4630      	mov	r0, r6
 8007686:	4639      	mov	r1, r7
 8007688:	f7f9 fa16 	bl	8000ab8 <__aeabi_dcmpeq>
 800768c:	2800      	cmp	r0, #0
 800768e:	d0f2      	beq.n	8007676 <pow+0xa2>
 8007690:	eeb0 0a48 	vmov.f32	s0, s16
 8007694:	eef0 0a68 	vmov.f32	s1, s17
 8007698:	f000 f80c 	bl	80076b4 <finite>
 800769c:	2800      	cmp	r0, #0
 800769e:	d0ea      	beq.n	8007676 <pow+0xa2>
 80076a0:	ec45 4b10 	vmov	d0, r4, r5
 80076a4:	f000 f806 	bl	80076b4 <finite>
 80076a8:	e7c3      	b.n	8007632 <pow+0x5e>
 80076aa:	4f01      	ldr	r7, [pc, #4]	@ (80076b0 <pow+0xdc>)
 80076ac:	2600      	movs	r6, #0
 80076ae:	e7e2      	b.n	8007676 <pow+0xa2>
 80076b0:	3ff00000 	.word	0x3ff00000

080076b4 <finite>:
 80076b4:	b082      	sub	sp, #8
 80076b6:	ed8d 0b00 	vstr	d0, [sp]
 80076ba:	9801      	ldr	r0, [sp, #4]
 80076bc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80076c0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80076c4:	0fc0      	lsrs	r0, r0, #31
 80076c6:	b002      	add	sp, #8
 80076c8:	4770      	bx	lr
 80076ca:	0000      	movs	r0, r0
 80076cc:	0000      	movs	r0, r0
	...

080076d0 <__ieee754_pow>:
 80076d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	b091      	sub	sp, #68	@ 0x44
 80076d6:	ed8d 1b00 	vstr	d1, [sp]
 80076da:	e9dd 1900 	ldrd	r1, r9, [sp]
 80076de:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80076e2:	ea5a 0001 	orrs.w	r0, sl, r1
 80076e6:	ec57 6b10 	vmov	r6, r7, d0
 80076ea:	d113      	bne.n	8007714 <__ieee754_pow+0x44>
 80076ec:	19b3      	adds	r3, r6, r6
 80076ee:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80076f2:	4152      	adcs	r2, r2
 80076f4:	4298      	cmp	r0, r3
 80076f6:	4b9a      	ldr	r3, [pc, #616]	@ (8007960 <__ieee754_pow+0x290>)
 80076f8:	4193      	sbcs	r3, r2
 80076fa:	f080 84ee 	bcs.w	80080da <__ieee754_pow+0xa0a>
 80076fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007702:	4630      	mov	r0, r6
 8007704:	4639      	mov	r1, r7
 8007706:	f7f8 fdb9 	bl	800027c <__adddf3>
 800770a:	ec41 0b10 	vmov	d0, r0, r1
 800770e:	b011      	add	sp, #68	@ 0x44
 8007710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007714:	4a93      	ldr	r2, [pc, #588]	@ (8007964 <__ieee754_pow+0x294>)
 8007716:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800771a:	4295      	cmp	r5, r2
 800771c:	46b8      	mov	r8, r7
 800771e:	4633      	mov	r3, r6
 8007720:	d80a      	bhi.n	8007738 <__ieee754_pow+0x68>
 8007722:	d104      	bne.n	800772e <__ieee754_pow+0x5e>
 8007724:	2e00      	cmp	r6, #0
 8007726:	d1ea      	bne.n	80076fe <__ieee754_pow+0x2e>
 8007728:	45aa      	cmp	sl, r5
 800772a:	d8e8      	bhi.n	80076fe <__ieee754_pow+0x2e>
 800772c:	e001      	b.n	8007732 <__ieee754_pow+0x62>
 800772e:	4592      	cmp	sl, r2
 8007730:	d802      	bhi.n	8007738 <__ieee754_pow+0x68>
 8007732:	4592      	cmp	sl, r2
 8007734:	d10f      	bne.n	8007756 <__ieee754_pow+0x86>
 8007736:	b171      	cbz	r1, 8007756 <__ieee754_pow+0x86>
 8007738:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800773c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8007740:	ea58 0803 	orrs.w	r8, r8, r3
 8007744:	d1db      	bne.n	80076fe <__ieee754_pow+0x2e>
 8007746:	e9dd 3200 	ldrd	r3, r2, [sp]
 800774a:	18db      	adds	r3, r3, r3
 800774c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007750:	4152      	adcs	r2, r2
 8007752:	4598      	cmp	r8, r3
 8007754:	e7cf      	b.n	80076f6 <__ieee754_pow+0x26>
 8007756:	f1b8 0f00 	cmp.w	r8, #0
 800775a:	46ab      	mov	fp, r5
 800775c:	da43      	bge.n	80077e6 <__ieee754_pow+0x116>
 800775e:	4a82      	ldr	r2, [pc, #520]	@ (8007968 <__ieee754_pow+0x298>)
 8007760:	4592      	cmp	sl, r2
 8007762:	d856      	bhi.n	8007812 <__ieee754_pow+0x142>
 8007764:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007768:	4592      	cmp	sl, r2
 800776a:	f240 84c5 	bls.w	80080f8 <__ieee754_pow+0xa28>
 800776e:	ea4f 522a 	mov.w	r2, sl, asr #20
 8007772:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007776:	2a14      	cmp	r2, #20
 8007778:	dd18      	ble.n	80077ac <__ieee754_pow+0xdc>
 800777a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800777e:	fa21 f402 	lsr.w	r4, r1, r2
 8007782:	fa04 f202 	lsl.w	r2, r4, r2
 8007786:	428a      	cmp	r2, r1
 8007788:	f040 84b6 	bne.w	80080f8 <__ieee754_pow+0xa28>
 800778c:	f004 0401 	and.w	r4, r4, #1
 8007790:	f1c4 0402 	rsb	r4, r4, #2
 8007794:	2900      	cmp	r1, #0
 8007796:	d159      	bne.n	800784c <__ieee754_pow+0x17c>
 8007798:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800779c:	d148      	bne.n	8007830 <__ieee754_pow+0x160>
 800779e:	4632      	mov	r2, r6
 80077a0:	463b      	mov	r3, r7
 80077a2:	4630      	mov	r0, r6
 80077a4:	4639      	mov	r1, r7
 80077a6:	f7f8 ff1f 	bl	80005e8 <__aeabi_dmul>
 80077aa:	e7ae      	b.n	800770a <__ieee754_pow+0x3a>
 80077ac:	2900      	cmp	r1, #0
 80077ae:	d14c      	bne.n	800784a <__ieee754_pow+0x17a>
 80077b0:	f1c2 0214 	rsb	r2, r2, #20
 80077b4:	fa4a f402 	asr.w	r4, sl, r2
 80077b8:	fa04 f202 	lsl.w	r2, r4, r2
 80077bc:	4552      	cmp	r2, sl
 80077be:	f040 8498 	bne.w	80080f2 <__ieee754_pow+0xa22>
 80077c2:	f004 0401 	and.w	r4, r4, #1
 80077c6:	f1c4 0402 	rsb	r4, r4, #2
 80077ca:	4a68      	ldr	r2, [pc, #416]	@ (800796c <__ieee754_pow+0x29c>)
 80077cc:	4592      	cmp	sl, r2
 80077ce:	d1e3      	bne.n	8007798 <__ieee754_pow+0xc8>
 80077d0:	f1b9 0f00 	cmp.w	r9, #0
 80077d4:	f280 8489 	bge.w	80080ea <__ieee754_pow+0xa1a>
 80077d8:	4964      	ldr	r1, [pc, #400]	@ (800796c <__ieee754_pow+0x29c>)
 80077da:	4632      	mov	r2, r6
 80077dc:	463b      	mov	r3, r7
 80077de:	2000      	movs	r0, #0
 80077e0:	f7f9 f82c 	bl	800083c <__aeabi_ddiv>
 80077e4:	e791      	b.n	800770a <__ieee754_pow+0x3a>
 80077e6:	2400      	movs	r4, #0
 80077e8:	bb81      	cbnz	r1, 800784c <__ieee754_pow+0x17c>
 80077ea:	4a5e      	ldr	r2, [pc, #376]	@ (8007964 <__ieee754_pow+0x294>)
 80077ec:	4592      	cmp	sl, r2
 80077ee:	d1ec      	bne.n	80077ca <__ieee754_pow+0xfa>
 80077f0:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 80077f4:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80077f8:	431a      	orrs	r2, r3
 80077fa:	f000 846e 	beq.w	80080da <__ieee754_pow+0xa0a>
 80077fe:	4b5c      	ldr	r3, [pc, #368]	@ (8007970 <__ieee754_pow+0x2a0>)
 8007800:	429d      	cmp	r5, r3
 8007802:	d908      	bls.n	8007816 <__ieee754_pow+0x146>
 8007804:	f1b9 0f00 	cmp.w	r9, #0
 8007808:	f280 846b 	bge.w	80080e2 <__ieee754_pow+0xa12>
 800780c:	2000      	movs	r0, #0
 800780e:	2100      	movs	r1, #0
 8007810:	e77b      	b.n	800770a <__ieee754_pow+0x3a>
 8007812:	2402      	movs	r4, #2
 8007814:	e7e8      	b.n	80077e8 <__ieee754_pow+0x118>
 8007816:	f1b9 0f00 	cmp.w	r9, #0
 800781a:	f04f 0000 	mov.w	r0, #0
 800781e:	f04f 0100 	mov.w	r1, #0
 8007822:	f6bf af72 	bge.w	800770a <__ieee754_pow+0x3a>
 8007826:	e9dd 0300 	ldrd	r0, r3, [sp]
 800782a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800782e:	e76c      	b.n	800770a <__ieee754_pow+0x3a>
 8007830:	4a50      	ldr	r2, [pc, #320]	@ (8007974 <__ieee754_pow+0x2a4>)
 8007832:	4591      	cmp	r9, r2
 8007834:	d10a      	bne.n	800784c <__ieee754_pow+0x17c>
 8007836:	f1b8 0f00 	cmp.w	r8, #0
 800783a:	db07      	blt.n	800784c <__ieee754_pow+0x17c>
 800783c:	ec47 6b10 	vmov	d0, r6, r7
 8007840:	b011      	add	sp, #68	@ 0x44
 8007842:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007846:	f000 bd4f 	b.w	80082e8 <__ieee754_sqrt>
 800784a:	2400      	movs	r4, #0
 800784c:	ec47 6b10 	vmov	d0, r6, r7
 8007850:	9302      	str	r3, [sp, #8]
 8007852:	f000 fc87 	bl	8008164 <fabs>
 8007856:	9b02      	ldr	r3, [sp, #8]
 8007858:	ec51 0b10 	vmov	r0, r1, d0
 800785c:	bb43      	cbnz	r3, 80078b0 <__ieee754_pow+0x1e0>
 800785e:	4b43      	ldr	r3, [pc, #268]	@ (800796c <__ieee754_pow+0x29c>)
 8007860:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8007864:	429a      	cmp	r2, r3
 8007866:	d000      	beq.n	800786a <__ieee754_pow+0x19a>
 8007868:	bb15      	cbnz	r5, 80078b0 <__ieee754_pow+0x1e0>
 800786a:	f1b9 0f00 	cmp.w	r9, #0
 800786e:	da05      	bge.n	800787c <__ieee754_pow+0x1ac>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	2000      	movs	r0, #0
 8007876:	493d      	ldr	r1, [pc, #244]	@ (800796c <__ieee754_pow+0x29c>)
 8007878:	f7f8 ffe0 	bl	800083c <__aeabi_ddiv>
 800787c:	f1b8 0f00 	cmp.w	r8, #0
 8007880:	f6bf af43 	bge.w	800770a <__ieee754_pow+0x3a>
 8007884:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007888:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800788c:	4325      	orrs	r5, r4
 800788e:	d108      	bne.n	80078a2 <__ieee754_pow+0x1d2>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	4610      	mov	r0, r2
 8007896:	4619      	mov	r1, r3
 8007898:	f7f8 fcee 	bl	8000278 <__aeabi_dsub>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	e79e      	b.n	80077e0 <__ieee754_pow+0x110>
 80078a2:	2c01      	cmp	r4, #1
 80078a4:	f47f af31 	bne.w	800770a <__ieee754_pow+0x3a>
 80078a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80078ac:	4619      	mov	r1, r3
 80078ae:	e72c      	b.n	800770a <__ieee754_pow+0x3a>
 80078b0:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 80078b4:	3b01      	subs	r3, #1
 80078b6:	ea53 0204 	orrs.w	r2, r3, r4
 80078ba:	d102      	bne.n	80078c2 <__ieee754_pow+0x1f2>
 80078bc:	4632      	mov	r2, r6
 80078be:	463b      	mov	r3, r7
 80078c0:	e7e8      	b.n	8007894 <__ieee754_pow+0x1c4>
 80078c2:	3c01      	subs	r4, #1
 80078c4:	431c      	orrs	r4, r3
 80078c6:	d016      	beq.n	80078f6 <__ieee754_pow+0x226>
 80078c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007950 <__ieee754_pow+0x280>
 80078cc:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80078d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80078d4:	f240 8110 	bls.w	8007af8 <__ieee754_pow+0x428>
 80078d8:	4b27      	ldr	r3, [pc, #156]	@ (8007978 <__ieee754_pow+0x2a8>)
 80078da:	459a      	cmp	sl, r3
 80078dc:	4b24      	ldr	r3, [pc, #144]	@ (8007970 <__ieee754_pow+0x2a0>)
 80078de:	d916      	bls.n	800790e <__ieee754_pow+0x23e>
 80078e0:	429d      	cmp	r5, r3
 80078e2:	d80b      	bhi.n	80078fc <__ieee754_pow+0x22c>
 80078e4:	f1b9 0f00 	cmp.w	r9, #0
 80078e8:	da0b      	bge.n	8007902 <__ieee754_pow+0x232>
 80078ea:	2000      	movs	r0, #0
 80078ec:	b011      	add	sp, #68	@ 0x44
 80078ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f2:	f000 bcf1 	b.w	80082d8 <__math_oflow>
 80078f6:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8007958 <__ieee754_pow+0x288>
 80078fa:	e7e7      	b.n	80078cc <__ieee754_pow+0x1fc>
 80078fc:	f1b9 0f00 	cmp.w	r9, #0
 8007900:	dcf3      	bgt.n	80078ea <__ieee754_pow+0x21a>
 8007902:	2000      	movs	r0, #0
 8007904:	b011      	add	sp, #68	@ 0x44
 8007906:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790a:	f000 bcdd 	b.w	80082c8 <__math_uflow>
 800790e:	429d      	cmp	r5, r3
 8007910:	d20c      	bcs.n	800792c <__ieee754_pow+0x25c>
 8007912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007916:	2200      	movs	r2, #0
 8007918:	2300      	movs	r3, #0
 800791a:	f7f9 f8d7 	bl	8000acc <__aeabi_dcmplt>
 800791e:	3800      	subs	r0, #0
 8007920:	bf18      	it	ne
 8007922:	2001      	movne	r0, #1
 8007924:	f1b9 0f00 	cmp.w	r9, #0
 8007928:	daec      	bge.n	8007904 <__ieee754_pow+0x234>
 800792a:	e7df      	b.n	80078ec <__ieee754_pow+0x21c>
 800792c:	4b0f      	ldr	r3, [pc, #60]	@ (800796c <__ieee754_pow+0x29c>)
 800792e:	429d      	cmp	r5, r3
 8007930:	f04f 0200 	mov.w	r2, #0
 8007934:	d922      	bls.n	800797c <__ieee754_pow+0x2ac>
 8007936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800793a:	2300      	movs	r3, #0
 800793c:	f7f9 f8c6 	bl	8000acc <__aeabi_dcmplt>
 8007940:	3800      	subs	r0, #0
 8007942:	bf18      	it	ne
 8007944:	2001      	movne	r0, #1
 8007946:	f1b9 0f00 	cmp.w	r9, #0
 800794a:	dccf      	bgt.n	80078ec <__ieee754_pow+0x21c>
 800794c:	e7da      	b.n	8007904 <__ieee754_pow+0x234>
 800794e:	bf00      	nop
 8007950:	00000000 	.word	0x00000000
 8007954:	3ff00000 	.word	0x3ff00000
 8007958:	00000000 	.word	0x00000000
 800795c:	bff00000 	.word	0xbff00000
 8007960:	fff00000 	.word	0xfff00000
 8007964:	7ff00000 	.word	0x7ff00000
 8007968:	433fffff 	.word	0x433fffff
 800796c:	3ff00000 	.word	0x3ff00000
 8007970:	3fefffff 	.word	0x3fefffff
 8007974:	3fe00000 	.word	0x3fe00000
 8007978:	43f00000 	.word	0x43f00000
 800797c:	4b5a      	ldr	r3, [pc, #360]	@ (8007ae8 <__ieee754_pow+0x418>)
 800797e:	f7f8 fc7b 	bl	8000278 <__aeabi_dsub>
 8007982:	a351      	add	r3, pc, #324	@ (adr r3, 8007ac8 <__ieee754_pow+0x3f8>)
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	4604      	mov	r4, r0
 800798a:	460d      	mov	r5, r1
 800798c:	f7f8 fe2c 	bl	80005e8 <__aeabi_dmul>
 8007990:	a34f      	add	r3, pc, #316	@ (adr r3, 8007ad0 <__ieee754_pow+0x400>)
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	4606      	mov	r6, r0
 8007998:	460f      	mov	r7, r1
 800799a:	4620      	mov	r0, r4
 800799c:	4629      	mov	r1, r5
 800799e:	f7f8 fe23 	bl	80005e8 <__aeabi_dmul>
 80079a2:	4b52      	ldr	r3, [pc, #328]	@ (8007aec <__ieee754_pow+0x41c>)
 80079a4:	4682      	mov	sl, r0
 80079a6:	468b      	mov	fp, r1
 80079a8:	2200      	movs	r2, #0
 80079aa:	4620      	mov	r0, r4
 80079ac:	4629      	mov	r1, r5
 80079ae:	f7f8 fe1b 	bl	80005e8 <__aeabi_dmul>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	a148      	add	r1, pc, #288	@ (adr r1, 8007ad8 <__ieee754_pow+0x408>)
 80079b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079bc:	f7f8 fc5c 	bl	8000278 <__aeabi_dsub>
 80079c0:	4622      	mov	r2, r4
 80079c2:	462b      	mov	r3, r5
 80079c4:	f7f8 fe10 	bl	80005e8 <__aeabi_dmul>
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	2000      	movs	r0, #0
 80079ce:	4948      	ldr	r1, [pc, #288]	@ (8007af0 <__ieee754_pow+0x420>)
 80079d0:	f7f8 fc52 	bl	8000278 <__aeabi_dsub>
 80079d4:	4622      	mov	r2, r4
 80079d6:	4680      	mov	r8, r0
 80079d8:	4689      	mov	r9, r1
 80079da:	462b      	mov	r3, r5
 80079dc:	4620      	mov	r0, r4
 80079de:	4629      	mov	r1, r5
 80079e0:	f7f8 fe02 	bl	80005e8 <__aeabi_dmul>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4640      	mov	r0, r8
 80079ea:	4649      	mov	r1, r9
 80079ec:	f7f8 fdfc 	bl	80005e8 <__aeabi_dmul>
 80079f0:	a33b      	add	r3, pc, #236	@ (adr r3, 8007ae0 <__ieee754_pow+0x410>)
 80079f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f6:	f7f8 fdf7 	bl	80005e8 <__aeabi_dmul>
 80079fa:	4602      	mov	r2, r0
 80079fc:	460b      	mov	r3, r1
 80079fe:	4650      	mov	r0, sl
 8007a00:	4659      	mov	r1, fp
 8007a02:	f7f8 fc39 	bl	8000278 <__aeabi_dsub>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	4680      	mov	r8, r0
 8007a0c:	4689      	mov	r9, r1
 8007a0e:	4630      	mov	r0, r6
 8007a10:	4639      	mov	r1, r7
 8007a12:	f7f8 fc33 	bl	800027c <__adddf3>
 8007a16:	2400      	movs	r4, #0
 8007a18:	4632      	mov	r2, r6
 8007a1a:	463b      	mov	r3, r7
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	460d      	mov	r5, r1
 8007a20:	f7f8 fc2a 	bl	8000278 <__aeabi_dsub>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	4640      	mov	r0, r8
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	f7f8 fc24 	bl	8000278 <__aeabi_dsub>
 8007a30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a38:	2300      	movs	r3, #0
 8007a3a:	9304      	str	r3, [sp, #16]
 8007a3c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007a40:	4606      	mov	r6, r0
 8007a42:	460f      	mov	r7, r1
 8007a44:	465b      	mov	r3, fp
 8007a46:	4652      	mov	r2, sl
 8007a48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a4c:	f7f8 fc14 	bl	8000278 <__aeabi_dsub>
 8007a50:	4622      	mov	r2, r4
 8007a52:	462b      	mov	r3, r5
 8007a54:	f7f8 fdc8 	bl	80005e8 <__aeabi_dmul>
 8007a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a5c:	4680      	mov	r8, r0
 8007a5e:	4689      	mov	r9, r1
 8007a60:	4630      	mov	r0, r6
 8007a62:	4639      	mov	r1, r7
 8007a64:	f7f8 fdc0 	bl	80005e8 <__aeabi_dmul>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	4649      	mov	r1, r9
 8007a70:	f7f8 fc04 	bl	800027c <__adddf3>
 8007a74:	465b      	mov	r3, fp
 8007a76:	4606      	mov	r6, r0
 8007a78:	460f      	mov	r7, r1
 8007a7a:	4652      	mov	r2, sl
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	4629      	mov	r1, r5
 8007a80:	f7f8 fdb2 	bl	80005e8 <__aeabi_dmul>
 8007a84:	460b      	mov	r3, r1
 8007a86:	4602      	mov	r2, r0
 8007a88:	4680      	mov	r8, r0
 8007a8a:	4689      	mov	r9, r1
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	4639      	mov	r1, r7
 8007a90:	f7f8 fbf4 	bl	800027c <__adddf3>
 8007a94:	4b17      	ldr	r3, [pc, #92]	@ (8007af4 <__ieee754_pow+0x424>)
 8007a96:	4299      	cmp	r1, r3
 8007a98:	4604      	mov	r4, r0
 8007a9a:	460d      	mov	r5, r1
 8007a9c:	468b      	mov	fp, r1
 8007a9e:	f340 820b 	ble.w	8007eb8 <__ieee754_pow+0x7e8>
 8007aa2:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8007aa6:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8007aaa:	4303      	orrs	r3, r0
 8007aac:	f000 81ea 	beq.w	8007e84 <__ieee754_pow+0x7b4>
 8007ab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f7f9 f808 	bl	8000acc <__aeabi_dcmplt>
 8007abc:	3800      	subs	r0, #0
 8007abe:	bf18      	it	ne
 8007ac0:	2001      	movne	r0, #1
 8007ac2:	e713      	b.n	80078ec <__ieee754_pow+0x21c>
 8007ac4:	f3af 8000 	nop.w
 8007ac8:	60000000 	.word	0x60000000
 8007acc:	3ff71547 	.word	0x3ff71547
 8007ad0:	f85ddf44 	.word	0xf85ddf44
 8007ad4:	3e54ae0b 	.word	0x3e54ae0b
 8007ad8:	55555555 	.word	0x55555555
 8007adc:	3fd55555 	.word	0x3fd55555
 8007ae0:	652b82fe 	.word	0x652b82fe
 8007ae4:	3ff71547 	.word	0x3ff71547
 8007ae8:	3ff00000 	.word	0x3ff00000
 8007aec:	3fd00000 	.word	0x3fd00000
 8007af0:	3fe00000 	.word	0x3fe00000
 8007af4:	408fffff 	.word	0x408fffff
 8007af8:	4bd5      	ldr	r3, [pc, #852]	@ (8007e50 <__ieee754_pow+0x780>)
 8007afa:	ea08 0303 	and.w	r3, r8, r3
 8007afe:	2200      	movs	r2, #0
 8007b00:	b92b      	cbnz	r3, 8007b0e <__ieee754_pow+0x43e>
 8007b02:	4bd4      	ldr	r3, [pc, #848]	@ (8007e54 <__ieee754_pow+0x784>)
 8007b04:	f7f8 fd70 	bl	80005e8 <__aeabi_dmul>
 8007b08:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8007b0c:	468b      	mov	fp, r1
 8007b0e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8007b12:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007b16:	4413      	add	r3, r2
 8007b18:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b1a:	4bcf      	ldr	r3, [pc, #828]	@ (8007e58 <__ieee754_pow+0x788>)
 8007b1c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8007b20:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8007b24:	459b      	cmp	fp, r3
 8007b26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007b2a:	dd08      	ble.n	8007b3e <__ieee754_pow+0x46e>
 8007b2c:	4bcb      	ldr	r3, [pc, #812]	@ (8007e5c <__ieee754_pow+0x78c>)
 8007b2e:	459b      	cmp	fp, r3
 8007b30:	f340 81a5 	ble.w	8007e7e <__ieee754_pow+0x7ae>
 8007b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b36:	3301      	adds	r3, #1
 8007b38:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b3a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007b3e:	f04f 0a00 	mov.w	sl, #0
 8007b42:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007b46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b48:	4bc5      	ldr	r3, [pc, #788]	@ (8007e60 <__ieee754_pow+0x790>)
 8007b4a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b4e:	ed93 7b00 	vldr	d7, [r3]
 8007b52:	4629      	mov	r1, r5
 8007b54:	ec53 2b17 	vmov	r2, r3, d7
 8007b58:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007b5c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b60:	f7f8 fb8a 	bl	8000278 <__aeabi_dsub>
 8007b64:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b68:	4606      	mov	r6, r0
 8007b6a:	460f      	mov	r7, r1
 8007b6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b70:	f7f8 fb84 	bl	800027c <__adddf3>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	2000      	movs	r0, #0
 8007b7a:	49ba      	ldr	r1, [pc, #744]	@ (8007e64 <__ieee754_pow+0x794>)
 8007b7c:	f7f8 fe5e 	bl	800083c <__aeabi_ddiv>
 8007b80:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4630      	mov	r0, r6
 8007b8a:	4639      	mov	r1, r7
 8007b8c:	f7f8 fd2c 	bl	80005e8 <__aeabi_dmul>
 8007b90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b94:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8007b98:	106d      	asrs	r5, r5, #1
 8007b9a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8007b9e:	f04f 0b00 	mov.w	fp, #0
 8007ba2:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8007ba6:	4661      	mov	r1, ip
 8007ba8:	2200      	movs	r2, #0
 8007baa:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007bae:	4658      	mov	r0, fp
 8007bb0:	46e1      	mov	r9, ip
 8007bb2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8007bb6:	4614      	mov	r4, r2
 8007bb8:	461d      	mov	r5, r3
 8007bba:	f7f8 fd15 	bl	80005e8 <__aeabi_dmul>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	4639      	mov	r1, r7
 8007bc6:	f7f8 fb57 	bl	8000278 <__aeabi_dsub>
 8007bca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bce:	4606      	mov	r6, r0
 8007bd0:	460f      	mov	r7, r1
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	f7f8 fb4f 	bl	8000278 <__aeabi_dsub>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007be2:	f7f8 fb49 	bl	8000278 <__aeabi_dsub>
 8007be6:	465a      	mov	r2, fp
 8007be8:	464b      	mov	r3, r9
 8007bea:	f7f8 fcfd 	bl	80005e8 <__aeabi_dmul>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	4639      	mov	r1, r7
 8007bf6:	f7f8 fb3f 	bl	8000278 <__aeabi_dsub>
 8007bfa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007bfe:	f7f8 fcf3 	bl	80005e8 <__aeabi_dmul>
 8007c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c0a:	4610      	mov	r0, r2
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	f7f8 fceb 	bl	80005e8 <__aeabi_dmul>
 8007c12:	a37d      	add	r3, pc, #500	@ (adr r3, 8007e08 <__ieee754_pow+0x738>)
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	4604      	mov	r4, r0
 8007c1a:	460d      	mov	r5, r1
 8007c1c:	f7f8 fce4 	bl	80005e8 <__aeabi_dmul>
 8007c20:	a37b      	add	r3, pc, #492	@ (adr r3, 8007e10 <__ieee754_pow+0x740>)
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	f7f8 fb29 	bl	800027c <__adddf3>
 8007c2a:	4622      	mov	r2, r4
 8007c2c:	462b      	mov	r3, r5
 8007c2e:	f7f8 fcdb 	bl	80005e8 <__aeabi_dmul>
 8007c32:	a379      	add	r3, pc, #484	@ (adr r3, 8007e18 <__ieee754_pow+0x748>)
 8007c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c38:	f7f8 fb20 	bl	800027c <__adddf3>
 8007c3c:	4622      	mov	r2, r4
 8007c3e:	462b      	mov	r3, r5
 8007c40:	f7f8 fcd2 	bl	80005e8 <__aeabi_dmul>
 8007c44:	a376      	add	r3, pc, #472	@ (adr r3, 8007e20 <__ieee754_pow+0x750>)
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	f7f8 fb17 	bl	800027c <__adddf3>
 8007c4e:	4622      	mov	r2, r4
 8007c50:	462b      	mov	r3, r5
 8007c52:	f7f8 fcc9 	bl	80005e8 <__aeabi_dmul>
 8007c56:	a374      	add	r3, pc, #464	@ (adr r3, 8007e28 <__ieee754_pow+0x758>)
 8007c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5c:	f7f8 fb0e 	bl	800027c <__adddf3>
 8007c60:	4622      	mov	r2, r4
 8007c62:	462b      	mov	r3, r5
 8007c64:	f7f8 fcc0 	bl	80005e8 <__aeabi_dmul>
 8007c68:	a371      	add	r3, pc, #452	@ (adr r3, 8007e30 <__ieee754_pow+0x760>)
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	f7f8 fb05 	bl	800027c <__adddf3>
 8007c72:	4622      	mov	r2, r4
 8007c74:	4606      	mov	r6, r0
 8007c76:	460f      	mov	r7, r1
 8007c78:	462b      	mov	r3, r5
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	f7f8 fcb3 	bl	80005e8 <__aeabi_dmul>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4630      	mov	r0, r6
 8007c88:	4639      	mov	r1, r7
 8007c8a:	f7f8 fcad 	bl	80005e8 <__aeabi_dmul>
 8007c8e:	465a      	mov	r2, fp
 8007c90:	4604      	mov	r4, r0
 8007c92:	460d      	mov	r5, r1
 8007c94:	464b      	mov	r3, r9
 8007c96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c9a:	f7f8 faef 	bl	800027c <__adddf3>
 8007c9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ca2:	f7f8 fca1 	bl	80005e8 <__aeabi_dmul>
 8007ca6:	4622      	mov	r2, r4
 8007ca8:	462b      	mov	r3, r5
 8007caa:	f7f8 fae7 	bl	800027c <__adddf3>
 8007cae:	465a      	mov	r2, fp
 8007cb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007cb4:	464b      	mov	r3, r9
 8007cb6:	4658      	mov	r0, fp
 8007cb8:	4649      	mov	r1, r9
 8007cba:	f7f8 fc95 	bl	80005e8 <__aeabi_dmul>
 8007cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8007e68 <__ieee754_pow+0x798>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	460f      	mov	r7, r1
 8007cc6:	f7f8 fad9 	bl	800027c <__adddf3>
 8007cca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007cce:	f7f8 fad5 	bl	800027c <__adddf3>
 8007cd2:	46d8      	mov	r8, fp
 8007cd4:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8007cd8:	460d      	mov	r5, r1
 8007cda:	465a      	mov	r2, fp
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4640      	mov	r0, r8
 8007ce0:	4649      	mov	r1, r9
 8007ce2:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8007ce6:	f7f8 fc7f 	bl	80005e8 <__aeabi_dmul>
 8007cea:	465c      	mov	r4, fp
 8007cec:	4680      	mov	r8, r0
 8007cee:	4689      	mov	r9, r1
 8007cf0:	4b5d      	ldr	r3, [pc, #372]	@ (8007e68 <__ieee754_pow+0x798>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	4629      	mov	r1, r5
 8007cf8:	f7f8 fabe 	bl	8000278 <__aeabi_dsub>
 8007cfc:	4632      	mov	r2, r6
 8007cfe:	463b      	mov	r3, r7
 8007d00:	f7f8 faba 	bl	8000278 <__aeabi_dsub>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d0c:	f7f8 fab4 	bl	8000278 <__aeabi_dsub>
 8007d10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d14:	f7f8 fc68 	bl	80005e8 <__aeabi_dmul>
 8007d18:	4622      	mov	r2, r4
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	460f      	mov	r7, r1
 8007d1e:	462b      	mov	r3, r5
 8007d20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d24:	f7f8 fc60 	bl	80005e8 <__aeabi_dmul>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	4639      	mov	r1, r7
 8007d30:	f7f8 faa4 	bl	800027c <__adddf3>
 8007d34:	4606      	mov	r6, r0
 8007d36:	460f      	mov	r7, r1
 8007d38:	4602      	mov	r2, r0
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	4640      	mov	r0, r8
 8007d3e:	4649      	mov	r1, r9
 8007d40:	f7f8 fa9c 	bl	800027c <__adddf3>
 8007d44:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8007d48:	a33b      	add	r3, pc, #236	@ (adr r3, 8007e38 <__ieee754_pow+0x768>)
 8007d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4e:	4658      	mov	r0, fp
 8007d50:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8007d54:	460d      	mov	r5, r1
 8007d56:	f7f8 fc47 	bl	80005e8 <__aeabi_dmul>
 8007d5a:	465c      	mov	r4, fp
 8007d5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d60:	4642      	mov	r2, r8
 8007d62:	464b      	mov	r3, r9
 8007d64:	4620      	mov	r0, r4
 8007d66:	4629      	mov	r1, r5
 8007d68:	f7f8 fa86 	bl	8000278 <__aeabi_dsub>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4630      	mov	r0, r6
 8007d72:	4639      	mov	r1, r7
 8007d74:	f7f8 fa80 	bl	8000278 <__aeabi_dsub>
 8007d78:	a331      	add	r3, pc, #196	@ (adr r3, 8007e40 <__ieee754_pow+0x770>)
 8007d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7e:	f7f8 fc33 	bl	80005e8 <__aeabi_dmul>
 8007d82:	a331      	add	r3, pc, #196	@ (adr r3, 8007e48 <__ieee754_pow+0x778>)
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	4606      	mov	r6, r0
 8007d8a:	460f      	mov	r7, r1
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	4629      	mov	r1, r5
 8007d90:	f7f8 fc2a 	bl	80005e8 <__aeabi_dmul>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4630      	mov	r0, r6
 8007d9a:	4639      	mov	r1, r7
 8007d9c:	f7f8 fa6e 	bl	800027c <__adddf3>
 8007da0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007da2:	4b32      	ldr	r3, [pc, #200]	@ (8007e6c <__ieee754_pow+0x79c>)
 8007da4:	4413      	add	r3, r2
 8007da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007daa:	f7f8 fa67 	bl	800027c <__adddf3>
 8007dae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007db2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007db4:	f7f8 fbae 	bl	8000514 <__aeabi_i2d>
 8007db8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007dba:	4b2d      	ldr	r3, [pc, #180]	@ (8007e70 <__ieee754_pow+0x7a0>)
 8007dbc:	4413      	add	r3, r2
 8007dbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007dc8:	460f      	mov	r7, r1
 8007dca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dce:	f7f8 fa55 	bl	800027c <__adddf3>
 8007dd2:	4642      	mov	r2, r8
 8007dd4:	464b      	mov	r3, r9
 8007dd6:	f7f8 fa51 	bl	800027c <__adddf3>
 8007dda:	4632      	mov	r2, r6
 8007ddc:	463b      	mov	r3, r7
 8007dde:	f7f8 fa4d 	bl	800027c <__adddf3>
 8007de2:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8007de6:	4632      	mov	r2, r6
 8007de8:	463b      	mov	r3, r7
 8007dea:	4658      	mov	r0, fp
 8007dec:	460d      	mov	r5, r1
 8007dee:	f7f8 fa43 	bl	8000278 <__aeabi_dsub>
 8007df2:	4642      	mov	r2, r8
 8007df4:	464b      	mov	r3, r9
 8007df6:	f7f8 fa3f 	bl	8000278 <__aeabi_dsub>
 8007dfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dfe:	f7f8 fa3b 	bl	8000278 <__aeabi_dsub>
 8007e02:	465c      	mov	r4, fp
 8007e04:	e036      	b.n	8007e74 <__ieee754_pow+0x7a4>
 8007e06:	bf00      	nop
 8007e08:	4a454eef 	.word	0x4a454eef
 8007e0c:	3fca7e28 	.word	0x3fca7e28
 8007e10:	93c9db65 	.word	0x93c9db65
 8007e14:	3fcd864a 	.word	0x3fcd864a
 8007e18:	a91d4101 	.word	0xa91d4101
 8007e1c:	3fd17460 	.word	0x3fd17460
 8007e20:	518f264d 	.word	0x518f264d
 8007e24:	3fd55555 	.word	0x3fd55555
 8007e28:	db6fabff 	.word	0xdb6fabff
 8007e2c:	3fdb6db6 	.word	0x3fdb6db6
 8007e30:	33333303 	.word	0x33333303
 8007e34:	3fe33333 	.word	0x3fe33333
 8007e38:	e0000000 	.word	0xe0000000
 8007e3c:	3feec709 	.word	0x3feec709
 8007e40:	dc3a03fd 	.word	0xdc3a03fd
 8007e44:	3feec709 	.word	0x3feec709
 8007e48:	145b01f5 	.word	0x145b01f5
 8007e4c:	be3e2fe0 	.word	0xbe3e2fe0
 8007e50:	7ff00000 	.word	0x7ff00000
 8007e54:	43400000 	.word	0x43400000
 8007e58:	0003988e 	.word	0x0003988e
 8007e5c:	000bb679 	.word	0x000bb679
 8007e60:	08008590 	.word	0x08008590
 8007e64:	3ff00000 	.word	0x3ff00000
 8007e68:	40080000 	.word	0x40080000
 8007e6c:	08008570 	.word	0x08008570
 8007e70:	08008580 	.word	0x08008580
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e7c:	e5d6      	b.n	8007a2c <__ieee754_pow+0x35c>
 8007e7e:	f04f 0a01 	mov.w	sl, #1
 8007e82:	e65e      	b.n	8007b42 <__ieee754_pow+0x472>
 8007e84:	a3b5      	add	r3, pc, #724	@ (adr r3, 800815c <__ieee754_pow+0xa8c>)
 8007e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	4639      	mov	r1, r7
 8007e8e:	f7f8 f9f5 	bl	800027c <__adddf3>
 8007e92:	4642      	mov	r2, r8
 8007e94:	e9cd 0100 	strd	r0, r1, [sp]
 8007e98:	464b      	mov	r3, r9
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	4629      	mov	r1, r5
 8007e9e:	f7f8 f9eb 	bl	8000278 <__aeabi_dsub>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007eaa:	f7f8 fe2d 	bl	8000b08 <__aeabi_dcmpgt>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	f47f adfe 	bne.w	8007ab0 <__ieee754_pow+0x3e0>
 8007eb4:	4ba2      	ldr	r3, [pc, #648]	@ (8008140 <__ieee754_pow+0xa70>)
 8007eb6:	e022      	b.n	8007efe <__ieee754_pow+0x82e>
 8007eb8:	4ca2      	ldr	r4, [pc, #648]	@ (8008144 <__ieee754_pow+0xa74>)
 8007eba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007ebe:	42a3      	cmp	r3, r4
 8007ec0:	d919      	bls.n	8007ef6 <__ieee754_pow+0x826>
 8007ec2:	4ba1      	ldr	r3, [pc, #644]	@ (8008148 <__ieee754_pow+0xa78>)
 8007ec4:	440b      	add	r3, r1
 8007ec6:	4303      	orrs	r3, r0
 8007ec8:	d009      	beq.n	8007ede <__ieee754_pow+0x80e>
 8007eca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	f7f8 fdfb 	bl	8000acc <__aeabi_dcmplt>
 8007ed6:	3800      	subs	r0, #0
 8007ed8:	bf18      	it	ne
 8007eda:	2001      	movne	r0, #1
 8007edc:	e512      	b.n	8007904 <__ieee754_pow+0x234>
 8007ede:	4642      	mov	r2, r8
 8007ee0:	464b      	mov	r3, r9
 8007ee2:	f7f8 f9c9 	bl	8000278 <__aeabi_dsub>
 8007ee6:	4632      	mov	r2, r6
 8007ee8:	463b      	mov	r3, r7
 8007eea:	f7f8 fe03 	bl	8000af4 <__aeabi_dcmpge>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d1eb      	bne.n	8007eca <__ieee754_pow+0x7fa>
 8007ef2:	4b96      	ldr	r3, [pc, #600]	@ (800814c <__ieee754_pow+0xa7c>)
 8007ef4:	e003      	b.n	8007efe <__ieee754_pow+0x82e>
 8007ef6:	4a96      	ldr	r2, [pc, #600]	@ (8008150 <__ieee754_pow+0xa80>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	f240 80e7 	bls.w	80080cc <__ieee754_pow+0x9fc>
 8007efe:	151b      	asrs	r3, r3, #20
 8007f00:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8007f04:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8007f08:	fa4a fa03 	asr.w	sl, sl, r3
 8007f0c:	44da      	add	sl, fp
 8007f0e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007f12:	4890      	ldr	r0, [pc, #576]	@ (8008154 <__ieee754_pow+0xa84>)
 8007f14:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007f18:	4108      	asrs	r0, r1
 8007f1a:	ea00 030a 	and.w	r3, r0, sl
 8007f1e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007f22:	f1c1 0114 	rsb	r1, r1, #20
 8007f26:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007f2a:	fa4a fa01 	asr.w	sl, sl, r1
 8007f2e:	f1bb 0f00 	cmp.w	fp, #0
 8007f32:	4640      	mov	r0, r8
 8007f34:	4649      	mov	r1, r9
 8007f36:	f04f 0200 	mov.w	r2, #0
 8007f3a:	bfb8      	it	lt
 8007f3c:	f1ca 0a00 	rsblt	sl, sl, #0
 8007f40:	f7f8 f99a 	bl	8000278 <__aeabi_dsub>
 8007f44:	4680      	mov	r8, r0
 8007f46:	4689      	mov	r9, r1
 8007f48:	4632      	mov	r2, r6
 8007f4a:	463b      	mov	r3, r7
 8007f4c:	4640      	mov	r0, r8
 8007f4e:	4649      	mov	r1, r9
 8007f50:	f7f8 f994 	bl	800027c <__adddf3>
 8007f54:	2400      	movs	r4, #0
 8007f56:	a36a      	add	r3, pc, #424	@ (adr r3, 8008100 <__ieee754_pow+0xa30>)
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	460d      	mov	r5, r1
 8007f60:	f7f8 fb42 	bl	80005e8 <__aeabi_dmul>
 8007f64:	4642      	mov	r2, r8
 8007f66:	e9cd 0100 	strd	r0, r1, [sp]
 8007f6a:	464b      	mov	r3, r9
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	4629      	mov	r1, r5
 8007f70:	f7f8 f982 	bl	8000278 <__aeabi_dsub>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	4630      	mov	r0, r6
 8007f7a:	4639      	mov	r1, r7
 8007f7c:	f7f8 f97c 	bl	8000278 <__aeabi_dsub>
 8007f80:	a361      	add	r3, pc, #388	@ (adr r3, 8008108 <__ieee754_pow+0xa38>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f7f8 fb2f 	bl	80005e8 <__aeabi_dmul>
 8007f8a:	a361      	add	r3, pc, #388	@ (adr r3, 8008110 <__ieee754_pow+0xa40>)
 8007f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f90:	4680      	mov	r8, r0
 8007f92:	4689      	mov	r9, r1
 8007f94:	4620      	mov	r0, r4
 8007f96:	4629      	mov	r1, r5
 8007f98:	f7f8 fb26 	bl	80005e8 <__aeabi_dmul>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4640      	mov	r0, r8
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	f7f8 f96a 	bl	800027c <__adddf3>
 8007fa8:	4604      	mov	r4, r0
 8007faa:	460d      	mov	r5, r1
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fb4:	f7f8 f962 	bl	800027c <__adddf3>
 8007fb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fbc:	4680      	mov	r8, r0
 8007fbe:	4689      	mov	r9, r1
 8007fc0:	f7f8 f95a 	bl	8000278 <__aeabi_dsub>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4620      	mov	r0, r4
 8007fca:	4629      	mov	r1, r5
 8007fcc:	f7f8 f954 	bl	8000278 <__aeabi_dsub>
 8007fd0:	4642      	mov	r2, r8
 8007fd2:	4606      	mov	r6, r0
 8007fd4:	460f      	mov	r7, r1
 8007fd6:	464b      	mov	r3, r9
 8007fd8:	4640      	mov	r0, r8
 8007fda:	4649      	mov	r1, r9
 8007fdc:	f7f8 fb04 	bl	80005e8 <__aeabi_dmul>
 8007fe0:	a34d      	add	r3, pc, #308	@ (adr r3, 8008118 <__ieee754_pow+0xa48>)
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	460d      	mov	r5, r1
 8007fea:	f7f8 fafd 	bl	80005e8 <__aeabi_dmul>
 8007fee:	a34c      	add	r3, pc, #304	@ (adr r3, 8008120 <__ieee754_pow+0xa50>)
 8007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff4:	f7f8 f940 	bl	8000278 <__aeabi_dsub>
 8007ff8:	4622      	mov	r2, r4
 8007ffa:	462b      	mov	r3, r5
 8007ffc:	f7f8 faf4 	bl	80005e8 <__aeabi_dmul>
 8008000:	a349      	add	r3, pc, #292	@ (adr r3, 8008128 <__ieee754_pow+0xa58>)
 8008002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008006:	f7f8 f939 	bl	800027c <__adddf3>
 800800a:	4622      	mov	r2, r4
 800800c:	462b      	mov	r3, r5
 800800e:	f7f8 faeb 	bl	80005e8 <__aeabi_dmul>
 8008012:	a347      	add	r3, pc, #284	@ (adr r3, 8008130 <__ieee754_pow+0xa60>)
 8008014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008018:	f7f8 f92e 	bl	8000278 <__aeabi_dsub>
 800801c:	4622      	mov	r2, r4
 800801e:	462b      	mov	r3, r5
 8008020:	f7f8 fae2 	bl	80005e8 <__aeabi_dmul>
 8008024:	a344      	add	r3, pc, #272	@ (adr r3, 8008138 <__ieee754_pow+0xa68>)
 8008026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802a:	f7f8 f927 	bl	800027c <__adddf3>
 800802e:	4622      	mov	r2, r4
 8008030:	462b      	mov	r3, r5
 8008032:	f7f8 fad9 	bl	80005e8 <__aeabi_dmul>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	4640      	mov	r0, r8
 800803c:	4649      	mov	r1, r9
 800803e:	f7f8 f91b 	bl	8000278 <__aeabi_dsub>
 8008042:	4604      	mov	r4, r0
 8008044:	460d      	mov	r5, r1
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4640      	mov	r0, r8
 800804c:	4649      	mov	r1, r9
 800804e:	f7f8 facb 	bl	80005e8 <__aeabi_dmul>
 8008052:	2200      	movs	r2, #0
 8008054:	e9cd 0100 	strd	r0, r1, [sp]
 8008058:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800805c:	4620      	mov	r0, r4
 800805e:	4629      	mov	r1, r5
 8008060:	f7f8 f90a 	bl	8000278 <__aeabi_dsub>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	e9dd 0100 	ldrd	r0, r1, [sp]
 800806c:	f7f8 fbe6 	bl	800083c <__aeabi_ddiv>
 8008070:	4632      	mov	r2, r6
 8008072:	4604      	mov	r4, r0
 8008074:	460d      	mov	r5, r1
 8008076:	463b      	mov	r3, r7
 8008078:	4640      	mov	r0, r8
 800807a:	4649      	mov	r1, r9
 800807c:	f7f8 fab4 	bl	80005e8 <__aeabi_dmul>
 8008080:	4632      	mov	r2, r6
 8008082:	463b      	mov	r3, r7
 8008084:	f7f8 f8fa 	bl	800027c <__adddf3>
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	4620      	mov	r0, r4
 800808e:	4629      	mov	r1, r5
 8008090:	f7f8 f8f2 	bl	8000278 <__aeabi_dsub>
 8008094:	4642      	mov	r2, r8
 8008096:	464b      	mov	r3, r9
 8008098:	f7f8 f8ee 	bl	8000278 <__aeabi_dsub>
 800809c:	460b      	mov	r3, r1
 800809e:	4602      	mov	r2, r0
 80080a0:	492d      	ldr	r1, [pc, #180]	@ (8008158 <__ieee754_pow+0xa88>)
 80080a2:	2000      	movs	r0, #0
 80080a4:	f7f8 f8e8 	bl	8000278 <__aeabi_dsub>
 80080a8:	ec41 0b10 	vmov	d0, r0, r1
 80080ac:	ee10 3a90 	vmov	r3, s1
 80080b0:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80080b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080b8:	da0b      	bge.n	80080d2 <__ieee754_pow+0xa02>
 80080ba:	4650      	mov	r0, sl
 80080bc:	f000 f85c 	bl	8008178 <scalbn>
 80080c0:	ec51 0b10 	vmov	r0, r1, d0
 80080c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080c8:	f7ff bb6d 	b.w	80077a6 <__ieee754_pow+0xd6>
 80080cc:	f8dd a010 	ldr.w	sl, [sp, #16]
 80080d0:	e73a      	b.n	8007f48 <__ieee754_pow+0x878>
 80080d2:	ec51 0b10 	vmov	r0, r1, d0
 80080d6:	4619      	mov	r1, r3
 80080d8:	e7f4      	b.n	80080c4 <__ieee754_pow+0x9f4>
 80080da:	491f      	ldr	r1, [pc, #124]	@ (8008158 <__ieee754_pow+0xa88>)
 80080dc:	2000      	movs	r0, #0
 80080de:	f7ff bb14 	b.w	800770a <__ieee754_pow+0x3a>
 80080e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080e6:	f7ff bb10 	b.w	800770a <__ieee754_pow+0x3a>
 80080ea:	4630      	mov	r0, r6
 80080ec:	4639      	mov	r1, r7
 80080ee:	f7ff bb0c 	b.w	800770a <__ieee754_pow+0x3a>
 80080f2:	460c      	mov	r4, r1
 80080f4:	f7ff bb69 	b.w	80077ca <__ieee754_pow+0xfa>
 80080f8:	2400      	movs	r4, #0
 80080fa:	f7ff bb4b 	b.w	8007794 <__ieee754_pow+0xc4>
 80080fe:	bf00      	nop
 8008100:	00000000 	.word	0x00000000
 8008104:	3fe62e43 	.word	0x3fe62e43
 8008108:	fefa39ef 	.word	0xfefa39ef
 800810c:	3fe62e42 	.word	0x3fe62e42
 8008110:	0ca86c39 	.word	0x0ca86c39
 8008114:	be205c61 	.word	0xbe205c61
 8008118:	72bea4d0 	.word	0x72bea4d0
 800811c:	3e663769 	.word	0x3e663769
 8008120:	c5d26bf1 	.word	0xc5d26bf1
 8008124:	3ebbbd41 	.word	0x3ebbbd41
 8008128:	af25de2c 	.word	0xaf25de2c
 800812c:	3f11566a 	.word	0x3f11566a
 8008130:	16bebd93 	.word	0x16bebd93
 8008134:	3f66c16c 	.word	0x3f66c16c
 8008138:	5555553e 	.word	0x5555553e
 800813c:	3fc55555 	.word	0x3fc55555
 8008140:	40900000 	.word	0x40900000
 8008144:	4090cbff 	.word	0x4090cbff
 8008148:	3f6f3400 	.word	0x3f6f3400
 800814c:	4090cc00 	.word	0x4090cc00
 8008150:	3fe00000 	.word	0x3fe00000
 8008154:	fff00000 	.word	0xfff00000
 8008158:	3ff00000 	.word	0x3ff00000
 800815c:	652b82fe 	.word	0x652b82fe
 8008160:	3c971547 	.word	0x3c971547

08008164 <fabs>:
 8008164:	ec51 0b10 	vmov	r0, r1, d0
 8008168:	4602      	mov	r2, r0
 800816a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800816e:	ec43 2b10 	vmov	d0, r2, r3
 8008172:	4770      	bx	lr
 8008174:	0000      	movs	r0, r0
	...

08008178 <scalbn>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	ec55 4b10 	vmov	r4, r5, d0
 800817e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008182:	4606      	mov	r6, r0
 8008184:	462b      	mov	r3, r5
 8008186:	b991      	cbnz	r1, 80081ae <scalbn+0x36>
 8008188:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800818c:	4323      	orrs	r3, r4
 800818e:	d03b      	beq.n	8008208 <scalbn+0x90>
 8008190:	4b33      	ldr	r3, [pc, #204]	@ (8008260 <scalbn+0xe8>)
 8008192:	4620      	mov	r0, r4
 8008194:	4629      	mov	r1, r5
 8008196:	2200      	movs	r2, #0
 8008198:	f7f8 fa26 	bl	80005e8 <__aeabi_dmul>
 800819c:	4b31      	ldr	r3, [pc, #196]	@ (8008264 <scalbn+0xec>)
 800819e:	429e      	cmp	r6, r3
 80081a0:	4604      	mov	r4, r0
 80081a2:	460d      	mov	r5, r1
 80081a4:	da0f      	bge.n	80081c6 <scalbn+0x4e>
 80081a6:	a326      	add	r3, pc, #152	@ (adr r3, 8008240 <scalbn+0xc8>)
 80081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ac:	e01e      	b.n	80081ec <scalbn+0x74>
 80081ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80081b2:	4291      	cmp	r1, r2
 80081b4:	d10b      	bne.n	80081ce <scalbn+0x56>
 80081b6:	4622      	mov	r2, r4
 80081b8:	4620      	mov	r0, r4
 80081ba:	4629      	mov	r1, r5
 80081bc:	f7f8 f85e 	bl	800027c <__adddf3>
 80081c0:	4604      	mov	r4, r0
 80081c2:	460d      	mov	r5, r1
 80081c4:	e020      	b.n	8008208 <scalbn+0x90>
 80081c6:	460b      	mov	r3, r1
 80081c8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80081cc:	3936      	subs	r1, #54	@ 0x36
 80081ce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80081d2:	4296      	cmp	r6, r2
 80081d4:	dd0d      	ble.n	80081f2 <scalbn+0x7a>
 80081d6:	2d00      	cmp	r5, #0
 80081d8:	a11b      	add	r1, pc, #108	@ (adr r1, 8008248 <scalbn+0xd0>)
 80081da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081de:	da02      	bge.n	80081e6 <scalbn+0x6e>
 80081e0:	a11b      	add	r1, pc, #108	@ (adr r1, 8008250 <scalbn+0xd8>)
 80081e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081e6:	a318      	add	r3, pc, #96	@ (adr r3, 8008248 <scalbn+0xd0>)
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	f7f8 f9fc 	bl	80005e8 <__aeabi_dmul>
 80081f0:	e7e6      	b.n	80081c0 <scalbn+0x48>
 80081f2:	1872      	adds	r2, r6, r1
 80081f4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80081f8:	428a      	cmp	r2, r1
 80081fa:	dcec      	bgt.n	80081d6 <scalbn+0x5e>
 80081fc:	2a00      	cmp	r2, #0
 80081fe:	dd06      	ble.n	800820e <scalbn+0x96>
 8008200:	f36f 531e 	bfc	r3, #20, #11
 8008204:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008208:	ec45 4b10 	vmov	d0, r4, r5
 800820c:	bd70      	pop	{r4, r5, r6, pc}
 800820e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008212:	da08      	bge.n	8008226 <scalbn+0xae>
 8008214:	2d00      	cmp	r5, #0
 8008216:	a10a      	add	r1, pc, #40	@ (adr r1, 8008240 <scalbn+0xc8>)
 8008218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800821c:	dac3      	bge.n	80081a6 <scalbn+0x2e>
 800821e:	a10e      	add	r1, pc, #56	@ (adr r1, 8008258 <scalbn+0xe0>)
 8008220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008224:	e7bf      	b.n	80081a6 <scalbn+0x2e>
 8008226:	3236      	adds	r2, #54	@ 0x36
 8008228:	f36f 531e 	bfc	r3, #20, #11
 800822c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008230:	4620      	mov	r0, r4
 8008232:	4b0d      	ldr	r3, [pc, #52]	@ (8008268 <scalbn+0xf0>)
 8008234:	4629      	mov	r1, r5
 8008236:	2200      	movs	r2, #0
 8008238:	e7d8      	b.n	80081ec <scalbn+0x74>
 800823a:	bf00      	nop
 800823c:	f3af 8000 	nop.w
 8008240:	c2f8f359 	.word	0xc2f8f359
 8008244:	01a56e1f 	.word	0x01a56e1f
 8008248:	8800759c 	.word	0x8800759c
 800824c:	7e37e43c 	.word	0x7e37e43c
 8008250:	8800759c 	.word	0x8800759c
 8008254:	fe37e43c 	.word	0xfe37e43c
 8008258:	c2f8f359 	.word	0xc2f8f359
 800825c:	81a56e1f 	.word	0x81a56e1f
 8008260:	43500000 	.word	0x43500000
 8008264:	ffff3cb0 	.word	0xffff3cb0
 8008268:	3c900000 	.word	0x3c900000

0800826c <with_errno>:
 800826c:	b510      	push	{r4, lr}
 800826e:	ed2d 8b02 	vpush	{d8}
 8008272:	eeb0 8a40 	vmov.f32	s16, s0
 8008276:	eef0 8a60 	vmov.f32	s17, s1
 800827a:	4604      	mov	r4, r0
 800827c:	f7fe fc76 	bl	8006b6c <__errno>
 8008280:	eeb0 0a48 	vmov.f32	s0, s16
 8008284:	eef0 0a68 	vmov.f32	s1, s17
 8008288:	ecbd 8b02 	vpop	{d8}
 800828c:	6004      	str	r4, [r0, #0]
 800828e:	bd10      	pop	{r4, pc}

08008290 <xflow>:
 8008290:	4603      	mov	r3, r0
 8008292:	b507      	push	{r0, r1, r2, lr}
 8008294:	ec51 0b10 	vmov	r0, r1, d0
 8008298:	b183      	cbz	r3, 80082bc <xflow+0x2c>
 800829a:	4602      	mov	r2, r0
 800829c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082a0:	e9cd 2300 	strd	r2, r3, [sp]
 80082a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082a8:	f7f8 f99e 	bl	80005e8 <__aeabi_dmul>
 80082ac:	ec41 0b10 	vmov	d0, r0, r1
 80082b0:	2022      	movs	r0, #34	@ 0x22
 80082b2:	b003      	add	sp, #12
 80082b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082b8:	f7ff bfd8 	b.w	800826c <with_errno>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	e7ee      	b.n	80082a0 <xflow+0x10>
 80082c2:	0000      	movs	r0, r0
 80082c4:	0000      	movs	r0, r0
	...

080082c8 <__math_uflow>:
 80082c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80082d0 <__math_uflow+0x8>
 80082cc:	f7ff bfe0 	b.w	8008290 <xflow>
 80082d0:	00000000 	.word	0x00000000
 80082d4:	10000000 	.word	0x10000000

080082d8 <__math_oflow>:
 80082d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80082e0 <__math_oflow+0x8>
 80082dc:	f7ff bfd8 	b.w	8008290 <xflow>
 80082e0:	00000000 	.word	0x00000000
 80082e4:	70000000 	.word	0x70000000

080082e8 <__ieee754_sqrt>:
 80082e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ec:	4a66      	ldr	r2, [pc, #408]	@ (8008488 <__ieee754_sqrt+0x1a0>)
 80082ee:	ec55 4b10 	vmov	r4, r5, d0
 80082f2:	43aa      	bics	r2, r5
 80082f4:	462b      	mov	r3, r5
 80082f6:	4621      	mov	r1, r4
 80082f8:	d110      	bne.n	800831c <__ieee754_sqrt+0x34>
 80082fa:	4622      	mov	r2, r4
 80082fc:	4620      	mov	r0, r4
 80082fe:	4629      	mov	r1, r5
 8008300:	f7f8 f972 	bl	80005e8 <__aeabi_dmul>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	4620      	mov	r0, r4
 800830a:	4629      	mov	r1, r5
 800830c:	f7f7 ffb6 	bl	800027c <__adddf3>
 8008310:	4604      	mov	r4, r0
 8008312:	460d      	mov	r5, r1
 8008314:	ec45 4b10 	vmov	d0, r4, r5
 8008318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831c:	2d00      	cmp	r5, #0
 800831e:	dc0e      	bgt.n	800833e <__ieee754_sqrt+0x56>
 8008320:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008324:	4322      	orrs	r2, r4
 8008326:	d0f5      	beq.n	8008314 <__ieee754_sqrt+0x2c>
 8008328:	b19d      	cbz	r5, 8008352 <__ieee754_sqrt+0x6a>
 800832a:	4622      	mov	r2, r4
 800832c:	4620      	mov	r0, r4
 800832e:	4629      	mov	r1, r5
 8008330:	f7f7 ffa2 	bl	8000278 <__aeabi_dsub>
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	f7f8 fa80 	bl	800083c <__aeabi_ddiv>
 800833c:	e7e8      	b.n	8008310 <__ieee754_sqrt+0x28>
 800833e:	152a      	asrs	r2, r5, #20
 8008340:	d115      	bne.n	800836e <__ieee754_sqrt+0x86>
 8008342:	2000      	movs	r0, #0
 8008344:	e009      	b.n	800835a <__ieee754_sqrt+0x72>
 8008346:	0acb      	lsrs	r3, r1, #11
 8008348:	3a15      	subs	r2, #21
 800834a:	0549      	lsls	r1, r1, #21
 800834c:	2b00      	cmp	r3, #0
 800834e:	d0fa      	beq.n	8008346 <__ieee754_sqrt+0x5e>
 8008350:	e7f7      	b.n	8008342 <__ieee754_sqrt+0x5a>
 8008352:	462a      	mov	r2, r5
 8008354:	e7fa      	b.n	800834c <__ieee754_sqrt+0x64>
 8008356:	005b      	lsls	r3, r3, #1
 8008358:	3001      	adds	r0, #1
 800835a:	02dc      	lsls	r4, r3, #11
 800835c:	d5fb      	bpl.n	8008356 <__ieee754_sqrt+0x6e>
 800835e:	1e44      	subs	r4, r0, #1
 8008360:	1b12      	subs	r2, r2, r4
 8008362:	f1c0 0420 	rsb	r4, r0, #32
 8008366:	fa21 f404 	lsr.w	r4, r1, r4
 800836a:	4323      	orrs	r3, r4
 800836c:	4081      	lsls	r1, r0
 800836e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008372:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800837a:	07d2      	lsls	r2, r2, #31
 800837c:	bf5c      	itt	pl
 800837e:	005b      	lslpl	r3, r3, #1
 8008380:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008384:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008388:	bf58      	it	pl
 800838a:	0049      	lslpl	r1, r1, #1
 800838c:	2600      	movs	r6, #0
 800838e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008392:	107f      	asrs	r7, r7, #1
 8008394:	0049      	lsls	r1, r1, #1
 8008396:	2016      	movs	r0, #22
 8008398:	4632      	mov	r2, r6
 800839a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800839e:	1915      	adds	r5, r2, r4
 80083a0:	429d      	cmp	r5, r3
 80083a2:	bfde      	ittt	le
 80083a4:	192a      	addle	r2, r5, r4
 80083a6:	1b5b      	suble	r3, r3, r5
 80083a8:	1936      	addle	r6, r6, r4
 80083aa:	0fcd      	lsrs	r5, r1, #31
 80083ac:	3801      	subs	r0, #1
 80083ae:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80083b2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80083b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80083ba:	d1f0      	bne.n	800839e <__ieee754_sqrt+0xb6>
 80083bc:	4605      	mov	r5, r0
 80083be:	2420      	movs	r4, #32
 80083c0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80083c4:	4293      	cmp	r3, r2
 80083c6:	eb0c 0e00 	add.w	lr, ip, r0
 80083ca:	dc02      	bgt.n	80083d2 <__ieee754_sqrt+0xea>
 80083cc:	d113      	bne.n	80083f6 <__ieee754_sqrt+0x10e>
 80083ce:	458e      	cmp	lr, r1
 80083d0:	d811      	bhi.n	80083f6 <__ieee754_sqrt+0x10e>
 80083d2:	f1be 0f00 	cmp.w	lr, #0
 80083d6:	eb0e 000c 	add.w	r0, lr, ip
 80083da:	da3f      	bge.n	800845c <__ieee754_sqrt+0x174>
 80083dc:	2800      	cmp	r0, #0
 80083de:	db3d      	blt.n	800845c <__ieee754_sqrt+0x174>
 80083e0:	f102 0801 	add.w	r8, r2, #1
 80083e4:	1a9b      	subs	r3, r3, r2
 80083e6:	458e      	cmp	lr, r1
 80083e8:	bf88      	it	hi
 80083ea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80083ee:	eba1 010e 	sub.w	r1, r1, lr
 80083f2:	4465      	add	r5, ip
 80083f4:	4642      	mov	r2, r8
 80083f6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80083fa:	3c01      	subs	r4, #1
 80083fc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008400:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008404:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008408:	d1dc      	bne.n	80083c4 <__ieee754_sqrt+0xdc>
 800840a:	4319      	orrs	r1, r3
 800840c:	d01b      	beq.n	8008446 <__ieee754_sqrt+0x15e>
 800840e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800848c <__ieee754_sqrt+0x1a4>
 8008412:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8008490 <__ieee754_sqrt+0x1a8>
 8008416:	e9da 0100 	ldrd	r0, r1, [sl]
 800841a:	e9db 2300 	ldrd	r2, r3, [fp]
 800841e:	f7f7 ff2b 	bl	8000278 <__aeabi_dsub>
 8008422:	e9da 8900 	ldrd	r8, r9, [sl]
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4640      	mov	r0, r8
 800842c:	4649      	mov	r1, r9
 800842e:	f7f8 fb57 	bl	8000ae0 <__aeabi_dcmple>
 8008432:	b140      	cbz	r0, 8008446 <__ieee754_sqrt+0x15e>
 8008434:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008438:	e9da 0100 	ldrd	r0, r1, [sl]
 800843c:	e9db 2300 	ldrd	r2, r3, [fp]
 8008440:	d10e      	bne.n	8008460 <__ieee754_sqrt+0x178>
 8008442:	3601      	adds	r6, #1
 8008444:	4625      	mov	r5, r4
 8008446:	1073      	asrs	r3, r6, #1
 8008448:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800844c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8008450:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8008454:	086b      	lsrs	r3, r5, #1
 8008456:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800845a:	e759      	b.n	8008310 <__ieee754_sqrt+0x28>
 800845c:	4690      	mov	r8, r2
 800845e:	e7c1      	b.n	80083e4 <__ieee754_sqrt+0xfc>
 8008460:	f7f7 ff0c 	bl	800027c <__adddf3>
 8008464:	e9da 8900 	ldrd	r8, r9, [sl]
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4640      	mov	r0, r8
 800846e:	4649      	mov	r1, r9
 8008470:	f7f8 fb2c 	bl	8000acc <__aeabi_dcmplt>
 8008474:	b120      	cbz	r0, 8008480 <__ieee754_sqrt+0x198>
 8008476:	1cab      	adds	r3, r5, #2
 8008478:	bf08      	it	eq
 800847a:	3601      	addeq	r6, #1
 800847c:	3502      	adds	r5, #2
 800847e:	e7e2      	b.n	8008446 <__ieee754_sqrt+0x15e>
 8008480:	1c6b      	adds	r3, r5, #1
 8008482:	f023 0501 	bic.w	r5, r3, #1
 8008486:	e7de      	b.n	8008446 <__ieee754_sqrt+0x15e>
 8008488:	7ff00000 	.word	0x7ff00000
 800848c:	080085a8 	.word	0x080085a8
 8008490:	080085a0 	.word	0x080085a0

08008494 <_init>:
 8008494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008496:	bf00      	nop
 8008498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800849a:	bc08      	pop	{r3}
 800849c:	469e      	mov	lr, r3
 800849e:	4770      	bx	lr

080084a0 <_fini>:
 80084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a2:	bf00      	nop
 80084a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a6:	bc08      	pop	{r3}
 80084a8:	469e      	mov	lr, r3
 80084aa:	4770      	bx	lr
