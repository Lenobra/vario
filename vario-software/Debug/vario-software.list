
vario-software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa5c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800abf0  0800abf0  0000bbf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad30  0800ad30  0000c078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ad30  0800ad30  0000bd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad38  0800ad38  0000c078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad38  0800ad38  0000bd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad3c  0800ad3c  0000bd3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800ad40  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  20000078  0800adb8  0000c078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  0800adb8  0000c490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019245  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000318f  00000000  00000000  000252ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  00028480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012d5  00000000  00000000  00029c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a8bf  00000000  00000000  0002af65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae3e  00000000  00000000  00055824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c356  00000000  00000000  00070662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017c9b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007458  00000000  00000000  0017c9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00183e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abd4 	.word	0x0800abd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800abd4 	.word	0x0800abd4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_ldivmod>:
 8000c28:	b97b      	cbnz	r3, 8000c4a <__aeabi_ldivmod+0x22>
 8000c2a:	b972      	cbnz	r2, 8000c4a <__aeabi_ldivmod+0x22>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bfbe      	ittt	lt
 8000c30:	2000      	movlt	r0, #0
 8000c32:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c36:	e006      	blt.n	8000c46 <__aeabi_ldivmod+0x1e>
 8000c38:	bf08      	it	eq
 8000c3a:	2800      	cmpeq	r0, #0
 8000c3c:	bf1c      	itt	ne
 8000c3e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c42:	f04f 30ff 	movne.w	r0, #4294967295
 8000c46:	f000 b9d3 	b.w	8000ff0 <__aeabi_idiv0>
 8000c4a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c4e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c52:	2900      	cmp	r1, #0
 8000c54:	db09      	blt.n	8000c6a <__aeabi_ldivmod+0x42>
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db1a      	blt.n	8000c90 <__aeabi_ldivmod+0x68>
 8000c5a:	f000 f84d 	bl	8000cf8 <__udivmoddi4>
 8000c5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c66:	b004      	add	sp, #16
 8000c68:	4770      	bx	lr
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	db1b      	blt.n	8000cac <__aeabi_ldivmod+0x84>
 8000c74:	f000 f840 	bl	8000cf8 <__udivmoddi4>
 8000c78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c80:	b004      	add	sp, #16
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	4252      	negs	r2, r2
 8000c8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8e:	4770      	bx	lr
 8000c90:	4252      	negs	r2, r2
 8000c92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c96:	f000 f82f 	bl	8000cf8 <__udivmoddi4>
 8000c9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca2:	b004      	add	sp, #16
 8000ca4:	4240      	negs	r0, r0
 8000ca6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000caa:	4770      	bx	lr
 8000cac:	4252      	negs	r2, r2
 8000cae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb2:	f000 f821 	bl	8000cf8 <__udivmoddi4>
 8000cb6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbe:	b004      	add	sp, #16
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b988 	b.w	8000ff0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	468e      	mov	lr, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	4688      	mov	r8, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d962      	bls.n	8000dd4 <__udivmoddi4+0xdc>
 8000d0e:	fab2 f682 	clz	r6, r2
 8000d12:	b14e      	cbz	r6, 8000d28 <__udivmoddi4+0x30>
 8000d14:	f1c6 0320 	rsb	r3, r6, #32
 8000d18:	fa01 f806 	lsl.w	r8, r1, r6
 8000d1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d20:	40b7      	lsls	r7, r6
 8000d22:	ea43 0808 	orr.w	r8, r3, r8
 8000d26:	40b4      	lsls	r4, r6
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d34:	0c23      	lsrs	r3, r4, #16
 8000d36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d4c:	f080 80ea 	bcs.w	8000f24 <__udivmoddi4+0x22c>
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f240 80e7 	bls.w	8000f24 <__udivmoddi4+0x22c>
 8000d56:	3902      	subs	r1, #2
 8000d58:	443b      	add	r3, r7
 8000d5a:	1a9a      	subs	r2, r3, r2
 8000d5c:	b2a3      	uxth	r3, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6e:	459c      	cmp	ip, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x8e>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	f080 80d6 	bcs.w	8000f28 <__udivmoddi4+0x230>
 8000d7c:	459c      	cmp	ip, r3
 8000d7e:	f240 80d3 	bls.w	8000f28 <__udivmoddi4+0x230>
 8000d82:	443b      	add	r3, r7
 8000d84:	3802      	subs	r0, #2
 8000d86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8a:	eba3 030c 	sub.w	r3, r3, ip
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11d      	cbz	r5, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40f3      	lsrs	r3, r6
 8000d94:	2200      	movs	r2, #0
 8000d96:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d905      	bls.n	8000dae <__udivmoddi4+0xb6>
 8000da2:	b10d      	cbz	r5, 8000da8 <__udivmoddi4+0xb0>
 8000da4:	e9c5 0100 	strd	r0, r1, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4608      	mov	r0, r1
 8000dac:	e7f5      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dae:	fab3 f183 	clz	r1, r3
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d146      	bne.n	8000e44 <__udivmoddi4+0x14c>
 8000db6:	4573      	cmp	r3, lr
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xc8>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 8105 	bhi.w	8000fca <__udivmoddi4+0x2d2>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4690      	mov	r8, r2
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e5      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dce:	e9c5 4800 	strd	r4, r8, [r5]
 8000dd2:	e7e2      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f000 8090 	beq.w	8000efa <__udivmoddi4+0x202>
 8000dda:	fab2 f682 	clz	r6, r2
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f040 80a4 	bne.w	8000f2c <__udivmoddi4+0x234>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	b280      	uxth	r0, r0
 8000dee:	b2bc      	uxth	r4, r7
 8000df0:	2101      	movs	r1, #1
 8000df2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000df6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x11e>
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x11c>
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f200 80e0 	bhi.w	8000fd4 <__udivmoddi4+0x2dc>
 8000e14:	46c4      	mov	ip, r8
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e24:	fb02 f404 	mul.w	r4, r2, r4
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x144>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x142>
 8000e34:	429c      	cmp	r4, r3
 8000e36:	f200 80ca 	bhi.w	8000fce <__udivmoddi4+0x2d6>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e42:	e7a5      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e44:	f1c1 0620 	rsb	r6, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	fa0e f401 	lsl.w	r4, lr, r1
 8000e54:	fa20 f306 	lsr.w	r3, r0, r6
 8000e58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e60:	4323      	orrs	r3, r4
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	fa1f fc87 	uxth.w	ip, r7
 8000e6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e82:	d909      	bls.n	8000e98 <__udivmoddi4+0x1a0>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e8a:	f080 809c 	bcs.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	f240 8099 	bls.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	eba4 040e 	sub.w	r4, r4, lr
 8000e9c:	fa1f fe83 	uxth.w	lr, r3
 8000ea0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb0:	45a4      	cmp	ip, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1ce>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eba:	f080 8082 	bcs.w	8000fc2 <__udivmoddi4+0x2ca>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d97f      	bls.n	8000fc2 <__udivmoddi4+0x2ca>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eca:	eba4 040c 	sub.w	r4, r4, ip
 8000ece:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ed2:	4564      	cmp	r4, ip
 8000ed4:	4673      	mov	r3, lr
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	d362      	bcc.n	8000fa0 <__udivmoddi4+0x2a8>
 8000eda:	d05f      	beq.n	8000f9c <__udivmoddi4+0x2a4>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x1fe>
 8000ede:	ebb8 0203 	subs.w	r2, r8, r3
 8000ee2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ee6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eea:	fa22 f301 	lsr.w	r3, r2, r1
 8000eee:	431e      	orrs	r6, r3
 8000ef0:	40cc      	lsrs	r4, r1
 8000ef2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	e74f      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000efa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000efe:	0c01      	lsrs	r1, r0, #16
 8000f00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f04:	b280      	uxth	r0, r0
 8000f06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	463c      	mov	r4, r7
 8000f10:	46b8      	mov	r8, r7
 8000f12:	46be      	mov	lr, r7
 8000f14:	2620      	movs	r6, #32
 8000f16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f1a:	eba2 0208 	sub.w	r2, r2, r8
 8000f1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f22:	e766      	b.n	8000df2 <__udivmoddi4+0xfa>
 8000f24:	4601      	mov	r1, r0
 8000f26:	e718      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f28:	4610      	mov	r0, r2
 8000f2a:	e72c      	b.n	8000d86 <__udivmoddi4+0x8e>
 8000f2c:	f1c6 0220 	rsb	r2, r6, #32
 8000f30:	fa2e f302 	lsr.w	r3, lr, r2
 8000f34:	40b7      	lsls	r7, r6
 8000f36:	40b1      	lsls	r1, r6
 8000f38:	fa20 f202 	lsr.w	r2, r0, r2
 8000f3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f46:	b2bc      	uxth	r4, r7
 8000f48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb08 f904 	mul.w	r9, r8, r4
 8000f56:	40b0      	lsls	r0, r6
 8000f58:	4589      	cmp	r9, r1
 8000f5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f5e:	b280      	uxth	r0, r0
 8000f60:	d93e      	bls.n	8000fe0 <__udivmoddi4+0x2e8>
 8000f62:	1879      	adds	r1, r7, r1
 8000f64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f68:	d201      	bcs.n	8000f6e <__udivmoddi4+0x276>
 8000f6a:	4589      	cmp	r9, r1
 8000f6c:	d81f      	bhi.n	8000fae <__udivmoddi4+0x2b6>
 8000f6e:	eba1 0109 	sub.w	r1, r1, r9
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d229      	bcs.n	8000fdc <__udivmoddi4+0x2e4>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f8e:	d2c4      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f90:	4542      	cmp	r2, r8
 8000f92:	d2c2      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f94:	f1a9 0102 	sub.w	r1, r9, #2
 8000f98:	443a      	add	r2, r7
 8000f9a:	e7be      	b.n	8000f1a <__udivmoddi4+0x222>
 8000f9c:	45f0      	cmp	r8, lr
 8000f9e:	d29d      	bcs.n	8000edc <__udivmoddi4+0x1e4>
 8000fa0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fa4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fa8:	3801      	subs	r0, #1
 8000faa:	46e1      	mov	r9, ip
 8000fac:	e796      	b.n	8000edc <__udivmoddi4+0x1e4>
 8000fae:	eba7 0909 	sub.w	r9, r7, r9
 8000fb2:	4449      	add	r1, r9
 8000fb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fbc:	fb09 f804 	mul.w	r8, r9, r4
 8000fc0:	e7db      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fc2:	4673      	mov	r3, lr
 8000fc4:	e77f      	b.n	8000ec6 <__udivmoddi4+0x1ce>
 8000fc6:	4650      	mov	r0, sl
 8000fc8:	e766      	b.n	8000e98 <__udivmoddi4+0x1a0>
 8000fca:	4608      	mov	r0, r1
 8000fcc:	e6fd      	b.n	8000dca <__udivmoddi4+0xd2>
 8000fce:	443b      	add	r3, r7
 8000fd0:	3a02      	subs	r2, #2
 8000fd2:	e733      	b.n	8000e3c <__udivmoddi4+0x144>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	443b      	add	r3, r7
 8000fda:	e71c      	b.n	8000e16 <__udivmoddi4+0x11e>
 8000fdc:	4649      	mov	r1, r9
 8000fde:	e79c      	b.n	8000f1a <__udivmoddi4+0x222>
 8000fe0:	eba1 0109 	sub.w	r1, r1, r9
 8000fe4:	46c4      	mov	ip, r8
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	e7c4      	b.n	8000f7a <__udivmoddi4+0x282>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__reg_write>:
	}

	return BMP280_ERROR;
}
#else
static void __reg_write(uint8_t reg, uint8_t value) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	460a      	mov	r2, r1
 8000ffe:	71fb      	strb	r3, [r7, #7]
 8001000:	4613      	mov	r3, r2
 8001002:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2] = { reg, value };
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	733b      	strb	r3, [r7, #12]
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, sizeof(buf), 10);
 800100c:	f107 020c 	add.w	r2, r7, #12
 8001010:	230a      	movs	r3, #10
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2302      	movs	r3, #2
 8001016:	21ec      	movs	r1, #236	@ 0xec
 8001018:	4803      	ldr	r0, [pc, #12]	@ (8001028 <__reg_write+0x34>)
 800101a:	f003 ff39 	bl	8004e90 <HAL_I2C_Master_Transmit>
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000011c 	.word	0x2000011c

0800102c <__reg_read>:

static uint8_t __reg_read(uint8_t reg) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af02      	add	r7, sp, #8
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, 10);
 800103a:	1dfa      	adds	r2, r7, #7
 800103c:	230a      	movs	r3, #10
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	21ec      	movs	r1, #236	@ 0xec
 8001044:	4808      	ldr	r0, [pc, #32]	@ (8001068 <__reg_read+0x3c>)
 8001046:	f003 ff23 	bl	8004e90 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, &value, 1, 10);
 800104a:	f107 020f 	add.w	r2, r7, #15
 800104e:	230a      	movs	r3, #10
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	21ec      	movs	r1, #236	@ 0xec
 8001056:	4804      	ldr	r0, [pc, #16]	@ (8001068 <__reg_read+0x3c>)
 8001058:	f004 f832 	bl	80050c0 <HAL_I2C_Master_Receive>

	return value;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2000011c 	.word	0x2000011c

0800106c <__reg_read_bulk>:

static BMP280_RESULT __reg_read_bulk(uint8_t reg, uint8_t *buf, uint32_t count) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af02      	add	r7, sp, #8
 8001072:	4603      	mov	r3, r0
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, 10) == HAL_OK){
 800107a:	f107 020f 	add.w	r2, r7, #15
 800107e:	230a      	movs	r3, #10
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2301      	movs	r3, #1
 8001084:	21ec      	movs	r1, #236	@ 0xec
 8001086:	480c      	ldr	r0, [pc, #48]	@ (80010b8 <__reg_read_bulk+0x4c>)
 8001088:	f003 ff02 	bl	8004e90 <HAL_I2C_Master_Transmit>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10d      	bne.n	80010ae <__reg_read_bulk+0x42>
		if(HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, count, 10) == HAL_OK){
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	b29b      	uxth	r3, r3
 8001096:	220a      	movs	r2, #10
 8001098:	9200      	str	r2, [sp, #0]
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	21ec      	movs	r1, #236	@ 0xec
 800109e:	4806      	ldr	r0, [pc, #24]	@ (80010b8 <__reg_read_bulk+0x4c>)
 80010a0:	f004 f80e 	bl	80050c0 <HAL_I2C_Master_Receive>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <__reg_read_bulk+0x42>
			return BMP280_SUCCESS;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <__reg_read_bulk+0x44>
		}
	}

	return BMP280_ERROR;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000011c 	.word	0x2000011c

080010bc <BMP280_Check>:
#endif

// Check if BMP280 present on I2C bus
// return: BMP280_SUCCESS if BMP280 present, BMP280_ERROR otherwise
BMP280_RESULT BMP280_Check(void) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	switch (BMP280_GetVersion()) {
 80010c0:	f000 f809 	bl	80010d6 <BMP280_GetVersion>
 80010c4:	4603      	mov	r3, r0
 80010c6:	3b56      	subs	r3, #86	@ 0x56
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d801      	bhi.n	80010d0 <BMP280_Check+0x14>
		case BMP280_CHIP_ID1:
		case BMP280_CHIP_ID2:
		case BMP280_CHIP_ID3:
			return BMP280_SUCCESS;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <BMP280_Check+0x16>
		default:
			return BMP280_ERROR;
 80010d0:	2300      	movs	r3, #0
	}
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <BMP280_GetVersion>:
	__reg_write(BMP280_REG_RESET, BMP280_SOFT_RESET_KEY);
}

// Get version of the BMP280 chip
// return: version of BMP280 chip or zero in case of chip absence or error on I2C bus
inline uint8_t BMP280_GetVersion(void) {
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
	return __reg_read(BMP280_REG_ID);
 80010da:	20d0      	movs	r0, #208	@ 0xd0
 80010dc:	f7ff ffa6 	bl	800102c <__reg_read>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <BMP280_SetMode>:

// Set sensor mode of the BMP280 chip
// input:
//   mode - new mode (one of BMP280_MODE_xx values)
// note: always set the power mode after sensor configuration is done
void BMP280_SetMode(uint8_t mode) {
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b084      	sub	sp, #16
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
	// Configure 'mode' bits in 'ctrl_meas' (0xF4) register
	mode &= BMP280_MODE_MSK;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__reg_read(BMP280_REG_CTRL_MEAS) & ~BMP280_MODE_MSK);
 80010f8:	20f4      	movs	r0, #244	@ 0xf4
 80010fa:	f7ff ff97 	bl	800102c <__reg_read>
 80010fe:	4603      	mov	r3, r0
 8001100:	f023 0303 	bic.w	r3, r3, #3
 8001104:	73fb      	strb	r3, [r7, #15]
	__reg_write(BMP280_REG_CTRL_MEAS, reg | mode);
 8001106:	7bfa      	ldrb	r2, [r7, #15]
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	4313      	orrs	r3, r2
 800110c:	b2db      	uxtb	r3, r3
 800110e:	4619      	mov	r1, r3
 8001110:	20f4      	movs	r0, #244	@ 0xf4
 8001112:	f7ff ff6f 	bl	8000ff4 <__reg_write>
}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <BMP280_SetFilter>:

// Set coefficient of the IIR filter
// input:
//   filter - new coefficient value (one of BMP280_FILTER_x values)
void BMP280_SetFilter(uint8_t filter) {
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
	// Configure 'filter' bits in 'config' (0xF5) register
	filter &= BMP280_FILTER_MSK;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 031c 	and.w	r3, r3, #28
 800112e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__reg_read(BMP280_REG_CONFIG) & ~BMP280_FILTER_MSK);
 8001130:	20f5      	movs	r0, #245	@ 0xf5
 8001132:	f7ff ff7b 	bl	800102c <__reg_read>
 8001136:	4603      	mov	r3, r0
 8001138:	f023 031c 	bic.w	r3, r3, #28
 800113c:	73fb      	strb	r3, [r7, #15]
	__reg_write(BMP280_REG_CONFIG, reg | filter);
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4313      	orrs	r3, r2
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4619      	mov	r1, r3
 8001148:	20f5      	movs	r0, #245	@ 0xf5
 800114a:	f7ff ff53 	bl	8000ff4 <__reg_write>
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <BMP280_SetStandby>:

// Set inactive duration in normal mode (Tstandby)
// input:
//   tsb - new inactive duration (one of BMP280_STBY_x values)
void BMP280_SetStandby(uint8_t tsb) {
 8001156:	b580      	push	{r7, lr}
 8001158:	b084      	sub	sp, #16
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
	// Configure 't_sb' bits in 'config' (0xF5) register
	tsb &= BMP280_STBY_MSK;
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f023 031f 	bic.w	r3, r3, #31
 8001166:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__reg_read(BMP280_REG_CONFIG) & ~BMP280_STBY_MSK);
 8001168:	20f5      	movs	r0, #245	@ 0xf5
 800116a:	f7ff ff5f 	bl	800102c <__reg_read>
 800116e:	4603      	mov	r3, r0
 8001170:	f003 031f 	and.w	r3, r3, #31
 8001174:	73fb      	strb	r3, [r7, #15]
	__reg_write(BMP280_REG_CONFIG, reg | tsb);
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	4313      	orrs	r3, r2
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4619      	mov	r1, r3
 8001180:	20f5      	movs	r0, #245	@ 0xf5
 8001182:	f7ff ff37 	bl	8000ff4 <__reg_write>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <BMP280_SetOSRST>:

// Set oversampling of temperature data
// input:
//   osrs - new oversampling value (one of BMP280_OSRS_T_Xx values)
void BMP280_SetOSRST(uint8_t osrs) {
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	71fb      	strb	r3, [r7, #7]
	// Configure 'osrs_t' bits in 'ctrl_meas' (0xF4) register
	osrs &= BMP280_OSRS_T_MSK;
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f023 031f 	bic.w	r3, r3, #31
 800119e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__reg_read(BMP280_REG_CTRL_MEAS) & ~BMP280_OSRS_T_MSK);
 80011a0:	20f4      	movs	r0, #244	@ 0xf4
 80011a2:	f7ff ff43 	bl	800102c <__reg_read>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f003 031f 	and.w	r3, r3, #31
 80011ac:	73fb      	strb	r3, [r7, #15]
	__reg_write(BMP280_REG_CTRL_MEAS, reg | osrs);
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4619      	mov	r1, r3
 80011b8:	20f4      	movs	r0, #244	@ 0xf4
 80011ba:	f7ff ff1b 	bl	8000ff4 <__reg_write>
}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <BMP280_SetOSRSP>:

// Set oversampling of pressure data
// input:
//   osrs - new oversampling value (one of BMP280_OSRS_P_Xx values)
void BMP280_SetOSRSP(uint8_t osrs) {
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
	// Configure 'osrs_p' bits in 'ctrl_meas' (0xF4) register
	osrs &= BMP280_OSRS_P_MSK;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 031c 	and.w	r3, r3, #28
 80011d6:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = (uint8_t)(__reg_read(BMP280_REG_CTRL_MEAS) & ~BMP280_OSRS_P_MSK);
 80011d8:	20f4      	movs	r0, #244	@ 0xf4
 80011da:	f7ff ff27 	bl	800102c <__reg_read>
 80011de:	4603      	mov	r3, r0
 80011e0:	f023 031c 	bic.w	r3, r3, #28
 80011e4:	73fb      	strb	r3, [r7, #15]
	__reg_write(BMP280_REG_CTRL_MEAS, reg | osrs);
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4619      	mov	r1, r3
 80011f0:	20f4      	movs	r0, #244	@ 0xf4
 80011f2:	f7ff feff 	bl	8000ff4 <__reg_write>
}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <BMP280_Read_Calibration>:

// Read calibration data
// return: BMP280_ERROR in case of error on I2C bus, BMP280_SUCCESS otherwise
BMP280_RESULT BMP280_Read_Calibration(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	// Bulk read from 'calib00' to 'calib25'
	return __reg_read_bulk(BMP280_REG_CALIB00, (uint8_t *)&cal_param, sizeof(cal_param));
 8001204:	2218      	movs	r2, #24
 8001206:	4903      	ldr	r1, [pc, #12]	@ (8001214 <BMP280_Read_Calibration+0x14>)
 8001208:	2088      	movs	r0, #136	@ 0x88
 800120a:	f7ff ff2f 	bl	800106c <__reg_read_bulk>
 800120e:	4603      	mov	r3, r0
}
 8001210:	4618      	mov	r0, r3
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000094 	.word	0x20000094

08001218 <BMP280_Read_UTP>:
//   UT - pointer to store temperature value (signed 32-bit)
//   UP - pointer to store pressure value (signed 32-bit)
// return: BMP280_ERROR in case of error on I2C bus, BMP280_SUCCESS otherwise
// note: the '0x80000' value means no data for this particular value is present,
//       i.e. that measurement is disabled or not ready yet
BMP280_RESULT BMP280_Read_UTP(int32_t *UT, int32_t *UP) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
	uint8_t buf[8];

	// Bulk read from 'press_msb' to 'temp_xlsb'
	if (__reg_read_bulk(BMP280_REG_PRESS_MSB, buf, sizeof(buf)) == BMP280_SUCCESS) {
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	2208      	movs	r2, #8
 8001228:	4619      	mov	r1, r3
 800122a:	20f7      	movs	r0, #247	@ 0xf7
 800122c:	f7ff ff1e 	bl	800106c <__reg_read_bulk>
 8001230:	4603      	mov	r3, r0
 8001232:	2b01      	cmp	r3, #1
 8001234:	d117      	bne.n	8001266 <BMP280_Read_UTP+0x4e>
		*UP = (int32_t)((buf[0] << 12) | (buf[1] << 4) | (buf[2] >> 4));
 8001236:	7a3b      	ldrb	r3, [r7, #8]
 8001238:	031a      	lsls	r2, r3, #12
 800123a:	7a7b      	ldrb	r3, [r7, #9]
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	4313      	orrs	r3, r2
 8001240:	7aba      	ldrb	r2, [r7, #10]
 8001242:	0912      	lsrs	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	431a      	orrs	r2, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	601a      	str	r2, [r3, #0]
		*UT = (int32_t)((buf[3] << 12) | (buf[4] << 4) | (buf[5] >> 4));
 800124c:	7afb      	ldrb	r3, [r7, #11]
 800124e:	031a      	lsls	r2, r3, #12
 8001250:	7b3b      	ldrb	r3, [r7, #12]
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	4313      	orrs	r3, r2
 8001256:	7b7a      	ldrb	r2, [r7, #13]
 8001258:	0912      	lsrs	r2, r2, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	431a      	orrs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	601a      	str	r2, [r3, #0]
		return BMP280_SUCCESS;
 8001262:	2301      	movs	r3, #1
 8001264:	e008      	b.n	8001278 <BMP280_Read_UTP+0x60>
	}

	// Default result values
	*UT = BMP280_NO_TEMPERATURE;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800126c:	601a      	str	r2, [r3, #0]
	*UP = BMP280_NO_PRESSURE;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001274:	601a      	str	r2, [r3, #0]

	return BMP280_ERROR;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <BMP280_CalcT>:
// Calculate temperature from raw value, resolution is 0.01 degree
// input:
//   UT - raw temperature value
// return: temperature in Celsius degrees (value of '5123' represents '51.23C')
// note: code from the BMP280 datasheet (rev 1.19)
int32_t BMP280_CalcT(int32_t UT) {
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
#if (BMP280_CALC_TYPE != 2)
	// Integer calculations

	t_fine  = ((((UT >> 3) - ((int32_t)cal_param.dig_T1 << 1))) \
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	10da      	asrs	r2, r3, #3
 800128c:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <BMP280_CalcT+0x70>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	1ad3      	subs	r3, r2, r3
			* ((int32_t)cal_param.dig_T2)) >> 11;
 8001294:	4a16      	ldr	r2, [pc, #88]	@ (80012f0 <BMP280_CalcT+0x70>)
 8001296:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800129a:	fb02 f303 	mul.w	r3, r2, r3
 800129e:	12db      	asrs	r3, r3, #11
	t_fine  = ((((UT >> 3) - ((int32_t)cal_param.dig_T1 << 1))) \
 80012a0:	4a14      	ldr	r2, [pc, #80]	@ (80012f4 <BMP280_CalcT+0x74>)
 80012a2:	6013      	str	r3, [r2, #0]
	t_fine += (((((UT >> 4) - ((int32_t)cal_param.dig_T1)) \
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	111b      	asrs	r3, r3, #4
 80012a8:	4a11      	ldr	r2, [pc, #68]	@ (80012f0 <BMP280_CalcT+0x70>)
 80012aa:	8812      	ldrh	r2, [r2, #0]
 80012ac:	1a9b      	subs	r3, r3, r2
			* ((UT >> 4) - ((int32_t)cal_param.dig_T1))) >> 12) \
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	1112      	asrs	r2, r2, #4
 80012b2:	490f      	ldr	r1, [pc, #60]	@ (80012f0 <BMP280_CalcT+0x70>)
 80012b4:	8809      	ldrh	r1, [r1, #0]
 80012b6:	1a52      	subs	r2, r2, r1
 80012b8:	fb02 f303 	mul.w	r3, r2, r3
 80012bc:	131b      	asrs	r3, r3, #12
			* ((int32_t)cal_param.dig_T3)) >> 14;
 80012be:	4a0c      	ldr	r2, [pc, #48]	@ (80012f0 <BMP280_CalcT+0x70>)
 80012c0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	139a      	asrs	r2, r3, #14
	t_fine += (((((UT >> 4) - ((int32_t)cal_param.dig_T1)) \
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <BMP280_CalcT+0x74>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <BMP280_CalcT+0x74>)
 80012d2:	6013      	str	r3, [r2, #0]

	return ((t_fine * 5) + 128) >> 8;
 80012d4:	4b07      	ldr	r3, [pc, #28]	@ (80012f4 <BMP280_CalcT+0x74>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	3380      	adds	r3, #128	@ 0x80
 80012e0:	121b      	asrs	r3, r3, #8
	v_x2 = (v_x2 * v_x2) * ((float)cal_param.dig_T3);
	t_fine_f = v_x1 + v_x2;

	return (int32_t)(((v_x1 + v_x2) / 5120.0F) * 100.0F);
#endif // BMP280_CALC_TYPE
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000094 	.word	0x20000094
 80012f4:	200000ac 	.word	0x200000ac

080012f8 <BMP280_CalcP>:
// input:
//   UP - raw pressure value
// return: pressure in mPa (value of '100663688' represents '100663.688Pa')
// note: BMP280_CalcT() should be called before calling this function
// note: code from the BMP280 datasheet (rev 1.19)
uint32_t BMP280_CalcP(int32_t UP) {
 80012f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012fc:	b0ce      	sub	sp, #312	@ 0x138
 80012fe:	af00      	add	r7, sp, #0
 8001300:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
	return p * 1000U;
#elif (BMP280_CALC_TYPE == 1)
	// 64-bit calculations
	int64_t v1, v2, p;

	v1 = (int64_t)t_fine - 128000;
 8001304:	4baf      	ldr	r3, [pc, #700]	@ (80015c4 <BMP280_CalcP+0x2cc>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	17da      	asrs	r2, r3, #31
 800130a:	461c      	mov	r4, r3
 800130c:	4615      	mov	r5, r2
 800130e:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001312:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001316:	e9c7 ab4c 	strd	sl, fp, [r7, #304]	@ 0x130
	v2 = v1 * v1 * (int64_t)cal_param.dig_P6;
 800131a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800131e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001322:	fb03 f102 	mul.w	r1, r3, r2
 8001326:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800132a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800132e:	fb02 f303 	mul.w	r3, r2, r3
 8001332:	18ca      	adds	r2, r1, r3
 8001334:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001338:	fba3 8903 	umull	r8, r9, r3, r3
 800133c:	eb02 0309 	add.w	r3, r2, r9
 8001340:	4699      	mov	r9, r3
 8001342:	4ba1      	ldr	r3, [pc, #644]	@ (80015c8 <BMP280_CalcP+0x2d0>)
 8001344:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001348:	b21b      	sxth	r3, r3
 800134a:	17da      	asrs	r2, r3, #31
 800134c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001350:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001354:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001358:	4603      	mov	r3, r0
 800135a:	fb03 f209 	mul.w	r2, r3, r9
 800135e:	460b      	mov	r3, r1
 8001360:	fb08 f303 	mul.w	r3, r8, r3
 8001364:	4413      	add	r3, r2
 8001366:	4602      	mov	r2, r0
 8001368:	fba8 1202 	umull	r1, r2, r8, r2
 800136c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001370:	460a      	mov	r2, r1
 8001372:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001376:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800137a:	4413      	add	r3, r2
 800137c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001380:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001384:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
 8001388:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	v2 = v2 + ((v1 * (int64_t)cal_param.dig_P5) << 17);
 800138c:	4b8e      	ldr	r3, [pc, #568]	@ (80015c8 <BMP280_CalcP+0x2d0>)
 800138e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001392:	b21b      	sxth	r3, r3
 8001394:	17da      	asrs	r2, r3, #31
 8001396:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800139a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800139e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80013a2:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 80013a6:	462a      	mov	r2, r5
 80013a8:	fb02 f203 	mul.w	r2, r2, r3
 80013ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80013b0:	4621      	mov	r1, r4
 80013b2:	fb01 f303 	mul.w	r3, r1, r3
 80013b6:	441a      	add	r2, r3
 80013b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80013bc:	4621      	mov	r1, r4
 80013be:	fba3 1301 	umull	r1, r3, r3, r1
 80013c2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80013c6:	460b      	mov	r3, r1
 80013c8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80013cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80013d0:	18d3      	adds	r3, r2, r3
 80013d2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80013d6:	f04f 0000 	mov.w	r0, #0
 80013da:	f04f 0100 	mov.w	r1, #0
 80013de:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 80013e2:	462b      	mov	r3, r5
 80013e4:	0459      	lsls	r1, r3, #17
 80013e6:	4623      	mov	r3, r4
 80013e8:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80013ec:	4623      	mov	r3, r4
 80013ee:	0458      	lsls	r0, r3, #17
 80013f0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80013f4:	1814      	adds	r4, r2, r0
 80013f6:	653c      	str	r4, [r7, #80]	@ 0x50
 80013f8:	414b      	adcs	r3, r1
 80013fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80013fc:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8001400:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	v2 = v2 + ((int64_t)cal_param.dig_P4 << 35);
 8001404:	4b70      	ldr	r3, [pc, #448]	@ (80015c8 <BMP280_CalcP+0x2d0>)
 8001406:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800140a:	b21b      	sxth	r3, r3
 800140c:	17da      	asrs	r2, r3, #31
 800140e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001412:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001416:	f04f 0000 	mov.w	r0, #0
 800141a:	f04f 0100 	mov.w	r1, #0
 800141e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001422:	00d9      	lsls	r1, r3, #3
 8001424:	2000      	movs	r0, #0
 8001426:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800142a:	1814      	adds	r4, r2, r0
 800142c:	64bc      	str	r4, [r7, #72]	@ 0x48
 800142e:	414b      	adcs	r3, r1
 8001430:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001432:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8001436:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	v1 = ((v1 * v1 * (int64_t)cal_param.dig_P3) >> 8) + \
 800143a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800143e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001442:	fb03 f102 	mul.w	r1, r3, r2
 8001446:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800144a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	18ca      	adds	r2, r1, r3
 8001454:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001458:	fba3 1303 	umull	r1, r3, r3, r3
 800145c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001460:	460b      	mov	r3, r1
 8001462:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001466:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800146a:	18d3      	adds	r3, r2, r3
 800146c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001470:	4b55      	ldr	r3, [pc, #340]	@ (80015c8 <BMP280_CalcP+0x2d0>)
 8001472:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001476:	b21b      	sxth	r3, r3
 8001478:	17da      	asrs	r2, r3, #31
 800147a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800147e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001482:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8001486:	462b      	mov	r3, r5
 8001488:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	@ 0xb0
 800148c:	4642      	mov	r2, r8
 800148e:	fb02 f203 	mul.w	r2, r2, r3
 8001492:	464b      	mov	r3, r9
 8001494:	4621      	mov	r1, r4
 8001496:	fb01 f303 	mul.w	r3, r1, r3
 800149a:	4413      	add	r3, r2
 800149c:	4622      	mov	r2, r4
 800149e:	4641      	mov	r1, r8
 80014a0:	fba2 1201 	umull	r1, r2, r2, r1
 80014a4:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80014a8:	460a      	mov	r2, r1
 80014aa:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 80014ae:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80014b2:	4413      	add	r3, r2
 80014b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80014b8:	f04f 0000 	mov.w	r0, #0
 80014bc:	f04f 0100 	mov.w	r1, #0
 80014c0:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80014c4:	4623      	mov	r3, r4
 80014c6:	0a18      	lsrs	r0, r3, #8
 80014c8:	462b      	mov	r3, r5
 80014ca:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80014ce:	462b      	mov	r3, r5
 80014d0:	1219      	asrs	r1, r3, #8
			((v1 * (int64_t)cal_param.dig_P2) << 12);
 80014d2:	4b3d      	ldr	r3, [pc, #244]	@ (80015c8 <BMP280_CalcP+0x2d0>)
 80014d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014d8:	b21b      	sxth	r3, r3
 80014da:	17da      	asrs	r2, r3, #31
 80014dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80014e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80014e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80014e8:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80014ec:	464a      	mov	r2, r9
 80014ee:	fb02 f203 	mul.w	r2, r2, r3
 80014f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80014f6:	4644      	mov	r4, r8
 80014f8:	fb04 f303 	mul.w	r3, r4, r3
 80014fc:	441a      	add	r2, r3
 80014fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001502:	4644      	mov	r4, r8
 8001504:	fba3 4304 	umull	r4, r3, r3, r4
 8001508:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800150c:	4623      	mov	r3, r4
 800150e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001516:	18d3      	adds	r3, r2, r3
 8001518:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001528:	464c      	mov	r4, r9
 800152a:	0323      	lsls	r3, r4, #12
 800152c:	4644      	mov	r4, r8
 800152e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001532:	4644      	mov	r4, r8
 8001534:	0322      	lsls	r2, r4, #12
	v1 = ((v1 * v1 * (int64_t)cal_param.dig_P3) >> 8) + \
 8001536:	1884      	adds	r4, r0, r2
 8001538:	643c      	str	r4, [r7, #64]	@ 0x40
 800153a:	eb41 0303 	adc.w	r3, r1, r3
 800153e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001540:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001544:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	v1 = (((((int64_t)1) << 47) + v1)) * ((int64_t)cal_param.dig_P1) >> 33;
 8001548:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800154c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001550:	f8c7 10a4 	str.w	r1, [r7, #164]	@ 0xa4
 8001554:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8001558:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <BMP280_CalcP+0x2d0>)
 800155a:	88db      	ldrh	r3, [r3, #6]
 800155c:	b29b      	uxth	r3, r3
 800155e:	2200      	movs	r2, #0
 8001560:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001564:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001568:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 800156c:	462b      	mov	r3, r5
 800156e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001572:	4642      	mov	r2, r8
 8001574:	fb02 f203 	mul.w	r2, r2, r3
 8001578:	464b      	mov	r3, r9
 800157a:	4621      	mov	r1, r4
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	4413      	add	r3, r2
 8001582:	4622      	mov	r2, r4
 8001584:	4641      	mov	r1, r8
 8001586:	fba2 1201 	umull	r1, r2, r2, r1
 800158a:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800158e:	460a      	mov	r2, r1
 8001590:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001594:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001598:	4413      	add	r3, r2
 800159a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80015aa:	4629      	mov	r1, r5
 80015ac:	104a      	asrs	r2, r1, #1
 80015ae:	4629      	mov	r1, r5
 80015b0:	17cb      	asrs	r3, r1, #31
 80015b2:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	if (v1 == 0) {
 80015b6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80015ba:	4313      	orrs	r3, r2
 80015bc:	d106      	bne.n	80015cc <BMP280_CalcP+0x2d4>
		// avoid exception caused by division by zero
		return 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	e18d      	b.n	80018de <BMP280_CalcP+0x5e6>
 80015c2:	bf00      	nop
 80015c4:	200000ac 	.word	0x200000ac
 80015c8:	20000094 	.word	0x20000094
	}
	p = 1048576 - UP;
 80015cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80015d0:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80015d4:	17da      	asrs	r2, r3, #31
 80015d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80015da:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80015de:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	p = (((p << 31) - v2) * 3125) / v1;
 80015e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015e6:	105b      	asrs	r3, r3, #1
 80015e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015f0:	07db      	lsls	r3, r3, #31
 80015f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80015f6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80015fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015fe:	4621      	mov	r1, r4
 8001600:	1a89      	subs	r1, r1, r2
 8001602:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001606:	4629      	mov	r1, r5
 8001608:	eb61 0303 	sbc.w	r3, r1, r3
 800160c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001610:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001614:	4622      	mov	r2, r4
 8001616:	462b      	mov	r3, r5
 8001618:	1891      	adds	r1, r2, r2
 800161a:	6339      	str	r1, [r7, #48]	@ 0x30
 800161c:	415b      	adcs	r3, r3
 800161e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001620:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001624:	4621      	mov	r1, r4
 8001626:	1851      	adds	r1, r2, r1
 8001628:	62b9      	str	r1, [r7, #40]	@ 0x28
 800162a:	4629      	mov	r1, r5
 800162c:	414b      	adcs	r3, r1
 800162e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800163c:	4649      	mov	r1, r9
 800163e:	018b      	lsls	r3, r1, #6
 8001640:	4641      	mov	r1, r8
 8001642:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001646:	4641      	mov	r1, r8
 8001648:	018a      	lsls	r2, r1, #6
 800164a:	4641      	mov	r1, r8
 800164c:	1889      	adds	r1, r1, r2
 800164e:	6239      	str	r1, [r7, #32]
 8001650:	4649      	mov	r1, r9
 8001652:	eb43 0101 	adc.w	r1, r3, r1
 8001656:	6279      	str	r1, [r7, #36]	@ 0x24
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001664:	4649      	mov	r1, r9
 8001666:	008b      	lsls	r3, r1, #2
 8001668:	4641      	mov	r1, r8
 800166a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800166e:	4641      	mov	r1, r8
 8001670:	008a      	lsls	r2, r1, #2
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	4603      	mov	r3, r0
 8001678:	4622      	mov	r2, r4
 800167a:	189b      	adds	r3, r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	460b      	mov	r3, r1
 8001680:	462a      	mov	r2, r5
 8001682:	eb42 0303 	adc.w	r3, r2, r3
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001694:	4649      	mov	r1, r9
 8001696:	008b      	lsls	r3, r1, #2
 8001698:	4641      	mov	r1, r8
 800169a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800169e:	4641      	mov	r1, r8
 80016a0:	008a      	lsls	r2, r1, #2
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	4603      	mov	r3, r0
 80016a8:	4622      	mov	r2, r4
 80016aa:	189b      	adds	r3, r3, r2
 80016ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80016b0:	462b      	mov	r3, r5
 80016b2:	460a      	mov	r2, r1
 80016b4:	eb42 0303 	adc.w	r3, r2, r3
 80016b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80016bc:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80016c0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80016c4:	f7ff fab0 	bl	8000c28 <__aeabi_ldivmod>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	v1 = (((int64_t)cal_param.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 80016d0:	4b86      	ldr	r3, [pc, #536]	@ (80018ec <BMP280_CalcP+0x5f4>)
 80016d2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	17da      	asrs	r2, r3, #31
 80016da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80016dc:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80016de:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80016e2:	f04f 0000 	mov.w	r0, #0
 80016e6:	f04f 0100 	mov.w	r1, #0
 80016ea:	0b50      	lsrs	r0, r2, #13
 80016ec:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80016f0:	1359      	asrs	r1, r3, #13
 80016f2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016f6:	462b      	mov	r3, r5
 80016f8:	fb00 f203 	mul.w	r2, r0, r3
 80016fc:	4623      	mov	r3, r4
 80016fe:	fb03 f301 	mul.w	r3, r3, r1
 8001702:	4413      	add	r3, r2
 8001704:	4622      	mov	r2, r4
 8001706:	fba2 1200 	umull	r1, r2, r2, r0
 800170a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800170e:	460a      	mov	r2, r1
 8001710:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001714:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001718:	4413      	add	r3, r2
 800171a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800171e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001722:	f04f 0000 	mov.w	r0, #0
 8001726:	f04f 0100 	mov.w	r1, #0
 800172a:	0b50      	lsrs	r0, r2, #13
 800172c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001730:	1359      	asrs	r1, r3, #13
 8001732:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001736:	462b      	mov	r3, r5
 8001738:	fb00 f203 	mul.w	r2, r0, r3
 800173c:	4623      	mov	r3, r4
 800173e:	fb03 f301 	mul.w	r3, r3, r1
 8001742:	4413      	add	r3, r2
 8001744:	4622      	mov	r2, r4
 8001746:	fba2 1200 	umull	r1, r2, r2, r0
 800174a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800174e:	460a      	mov	r2, r1
 8001750:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001754:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001758:	4413      	add	r3, r2
 800175a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800176a:	4621      	mov	r1, r4
 800176c:	0e4a      	lsrs	r2, r1, #25
 800176e:	4629      	mov	r1, r5
 8001770:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001774:	4629      	mov	r1, r5
 8001776:	164b      	asrs	r3, r1, #25
 8001778:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	v2 = (((int64_t)cal_param.dig_P8) * p) >> 19;
 800177c:	4b5b      	ldr	r3, [pc, #364]	@ (80018ec <BMP280_CalcP+0x5f4>)
 800177e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001782:	b21b      	sxth	r3, r3
 8001784:	17da      	asrs	r2, r3, #31
 8001786:	673b      	str	r3, [r7, #112]	@ 0x70
 8001788:	677a      	str	r2, [r7, #116]	@ 0x74
 800178a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800178e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001792:	462a      	mov	r2, r5
 8001794:	fb02 f203 	mul.w	r2, r2, r3
 8001798:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800179c:	4621      	mov	r1, r4
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	441a      	add	r2, r3
 80017a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017a8:	4621      	mov	r1, r4
 80017aa:	fba3 1301 	umull	r1, r3, r3, r1
 80017ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80017b2:	460b      	mov	r3, r1
 80017b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80017b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017bc:	18d3      	adds	r3, r2, r3
 80017be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80017ce:	4621      	mov	r1, r4
 80017d0:	0cca      	lsrs	r2, r1, #19
 80017d2:	4629      	mov	r1, r5
 80017d4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80017d8:	4629      	mov	r1, r5
 80017da:	14cb      	asrs	r3, r1, #19
 80017dc:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	p = ((p + v1 + v2) >> 8) + ((int64_t)cal_param.dig_P7 << 4);
 80017e0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80017e4:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80017e8:	1884      	adds	r4, r0, r2
 80017ea:	66bc      	str	r4, [r7, #104]	@ 0x68
 80017ec:	eb41 0303 	adc.w	r3, r1, r3
 80017f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80017f2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80017f6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80017fa:	4621      	mov	r1, r4
 80017fc:	1889      	adds	r1, r1, r2
 80017fe:	6639      	str	r1, [r7, #96]	@ 0x60
 8001800:	4629      	mov	r1, r5
 8001802:	eb43 0101 	adc.w	r1, r3, r1
 8001806:	6679      	str	r1, [r7, #100]	@ 0x64
 8001808:	f04f 0000 	mov.w	r0, #0
 800180c:	f04f 0100 	mov.w	r1, #0
 8001810:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001814:	4623      	mov	r3, r4
 8001816:	0a18      	lsrs	r0, r3, #8
 8001818:	462b      	mov	r3, r5
 800181a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800181e:	462b      	mov	r3, r5
 8001820:	1219      	asrs	r1, r3, #8
 8001822:	4b32      	ldr	r3, [pc, #200]	@ (80018ec <BMP280_CalcP+0x5f4>)
 8001824:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001828:	b21b      	sxth	r3, r3
 800182a:	17da      	asrs	r2, r3, #31
 800182c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800182e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 800183c:	464c      	mov	r4, r9
 800183e:	0123      	lsls	r3, r4, #4
 8001840:	4644      	mov	r4, r8
 8001842:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001846:	4644      	mov	r4, r8
 8001848:	0122      	lsls	r2, r4, #4
 800184a:	1884      	adds	r4, r0, r2
 800184c:	613c      	str	r4, [r7, #16]
 800184e:	eb41 0303 	adc.w	r3, r1, r3
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001858:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120

	return (uint32_t)((p * 1000) >> 8);
 800185c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	f04f 0400 	mov.w	r4, #0
 8001868:	f04f 0500 	mov.w	r5, #0
 800186c:	015d      	lsls	r5, r3, #5
 800186e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001872:	0154      	lsls	r4, r2, #5
 8001874:	4622      	mov	r2, r4
 8001876:	462b      	mov	r3, r5
 8001878:	1a14      	subs	r4, r2, r0
 800187a:	60bc      	str	r4, [r7, #8]
 800187c:	eb63 0301 	sbc.w	r3, r3, r1
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800188e:	464c      	mov	r4, r9
 8001890:	00a3      	lsls	r3, r4, #2
 8001892:	4644      	mov	r4, r8
 8001894:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001898:	4644      	mov	r4, r8
 800189a:	00a2      	lsls	r2, r4, #2
 800189c:	4614      	mov	r4, r2
 800189e:	461d      	mov	r5, r3
 80018a0:	4623      	mov	r3, r4
 80018a2:	181b      	adds	r3, r3, r0
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	462b      	mov	r3, r5
 80018a8:	eb41 0303 	adc.w	r3, r1, r3
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018ba:	4629      	mov	r1, r5
 80018bc:	00cb      	lsls	r3, r1, #3
 80018be:	4621      	mov	r1, r4
 80018c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018c4:	4621      	mov	r1, r4
 80018c6:	00ca      	lsls	r2, r1, #3
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	0a02      	lsrs	r2, r0, #8
 80018d6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80018da:	120b      	asrs	r3, r1, #8
 80018dc:	4613      	mov	r3, r2
	v_x2 = p_f * ((float)cal_param.dig_P8) / 32768.0F;
	p_f += (v_x1 + v_x2 + ((float)cal_param.dig_P7)) / 16.0F;

	return (uint32_t)(p_f * 1000.0F);
#endif // BMP280_CALC_TYPE
}
 80018de:	4618      	mov	r0, r3
 80018e0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80018e4:	46bd      	mov	sp, r7
 80018e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ea:	bf00      	nop
 80018ec:	20000094 	.word	0x20000094

080018f0 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80018fa:	4a38      	ldr	r2, [pc, #224]	@ (80019dc <HD44780_Init+0xec>)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001900:	4b37      	ldr	r3, [pc, #220]	@ (80019e0 <HD44780_Init+0xf0>)
 8001902:	2208      	movs	r2, #8
 8001904:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001906:	4b37      	ldr	r3, [pc, #220]	@ (80019e4 <HD44780_Init+0xf4>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800190c:	4b33      	ldr	r3, [pc, #204]	@ (80019dc <HD44780_Init+0xec>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d907      	bls.n	8001924 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8001914:	4b33      	ldr	r3, [pc, #204]	@ (80019e4 <HD44780_Init+0xf4>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	f043 0308 	orr.w	r3, r3, #8
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b31      	ldr	r3, [pc, #196]	@ (80019e4 <HD44780_Init+0xf4>)
 8001920:	701a      	strb	r2, [r3, #0]
 8001922:	e006      	b.n	8001932 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001924:	4b2f      	ldr	r3, [pc, #188]	@ (80019e4 <HD44780_Init+0xf4>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4b2d      	ldr	r3, [pc, #180]	@ (80019e4 <HD44780_Init+0xf4>)
 8001930:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8001932:	f000 f93f 	bl	8001bb4 <DelayInit>
  HAL_Delay(50);
 8001936:	2032      	movs	r0, #50	@ 0x32
 8001938:	f001 fcf4 	bl	8003324 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800193c:	4b28      	ldr	r3, [pc, #160]	@ (80019e0 <HD44780_Init+0xf0>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 f8fd 	bl	8001b40 <ExpanderWrite>
  HAL_Delay(1000);
 8001946:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800194a:	f001 fceb 	bl	8003324 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800194e:	2030      	movs	r0, #48	@ 0x30
 8001950:	f000 f8e5 	bl	8001b1e <Write4Bits>
  DelayUS(4500);
 8001954:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001958:	f000 f956 	bl	8001c08 <DelayUS>

  Write4Bits(0x03 << 4);
 800195c:	2030      	movs	r0, #48	@ 0x30
 800195e:	f000 f8de 	bl	8001b1e <Write4Bits>
  DelayUS(4500);
 8001962:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001966:	f000 f94f 	bl	8001c08 <DelayUS>

  Write4Bits(0x03 << 4);
 800196a:	2030      	movs	r0, #48	@ 0x30
 800196c:	f000 f8d7 	bl	8001b1e <Write4Bits>
  DelayUS(4500);
 8001970:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001974:	f000 f948 	bl	8001c08 <DelayUS>

  Write4Bits(0x02 << 4);
 8001978:	2020      	movs	r0, #32
 800197a:	f000 f8d0 	bl	8001b1e <Write4Bits>
  DelayUS(100);
 800197e:	2064      	movs	r0, #100	@ 0x64
 8001980:	f000 f942 	bl	8001c08 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001984:	4b17      	ldr	r3, [pc, #92]	@ (80019e4 <HD44780_Init+0xf4>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	f043 0320 	orr.w	r3, r3, #32
 800198c:	b2db      	uxtb	r3, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f000 f888 	bl	8001aa4 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001994:	4b14      	ldr	r3, [pc, #80]	@ (80019e8 <HD44780_Init+0xf8>)
 8001996:	2204      	movs	r2, #4
 8001998:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800199a:	f000 f843 	bl	8001a24 <HD44780_Display>
  HD44780_Clear();
 800199e:	f000 f82b 	bl	80019f8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80019a2:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <HD44780_Init+0xfc>)
 80019a4:	2202      	movs	r2, #2
 80019a6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80019a8:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <HD44780_Init+0xfc>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f876 	bl	8001aa4 <SendCommand>
  DelayUS(4500);
 80019b8:	f241 1094 	movw	r0, #4500	@ 0x1194
 80019bc:	f000 f924 	bl	8001c08 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80019c0:	490b      	ldr	r1, [pc, #44]	@ (80019f0 <HD44780_Init+0x100>)
 80019c2:	2000      	movs	r0, #0
 80019c4:	f000 f844 	bl	8001a50 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80019c8:	490a      	ldr	r1, [pc, #40]	@ (80019f4 <HD44780_Init+0x104>)
 80019ca:	2001      	movs	r0, #1
 80019cc:	f000 f840 	bl	8001a50 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80019d0:	f000 f81d 	bl	8001a0e <HD44780_Home>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200000b3 	.word	0x200000b3
 80019e0:	200000b4 	.word	0x200000b4
 80019e4:	200000b0 	.word	0x200000b0
 80019e8:	200000b1 	.word	0x200000b1
 80019ec:	200000b2 	.word	0x200000b2
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000008 	.word	0x20000008

080019f8 <HD44780_Clear>:

void HD44780_Clear()
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f000 f851 	bl	8001aa4 <SendCommand>
  DelayUS(2000);
 8001a02:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a06:	f000 f8ff 	bl	8001c08 <DelayUS>
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HD44780_Home>:

void HD44780_Home()
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8001a12:	2002      	movs	r0, #2
 8001a14:	f000 f846 	bl	8001aa4 <SendCommand>
  DelayUS(2000);
 8001a18:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a1c:	f000 f8f4 	bl	8001c08 <DelayUS>
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001a28:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <HD44780_Display+0x28>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <HD44780_Display+0x28>)
 8001a34:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001a36:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <HD44780_Display+0x28>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	f043 0308 	orr.w	r3, r3, #8
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f82f 	bl	8001aa4 <SendCommand>
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200000b1 	.word	0x200000b1

08001a50 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	6039      	str	r1, [r7, #0]
 8001a5a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	b25b      	sxtb	r3, r3
 8001a6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a70:	b25b      	sxtb	r3, r3
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 f815 	bl	8001aa4 <SendCommand>
  for (int i=0; i<8; i++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	e009      	b.n	8001a94 <HD44780_CreateSpecialChar+0x44>
  {
    SendChar(charmap[i]);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	4413      	add	r3, r2
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f819 	bl	8001ac0 <SendChar>
  for (int i=0; i<8; i++)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	3301      	adds	r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b07      	cmp	r3, #7
 8001a98:	ddf2      	ble.n	8001a80 <HD44780_CreateSpecialChar+0x30>
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f812 	bl	8001adc <Send>
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2101      	movs	r1, #1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f804 	bl	8001adc <Send>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	460a      	mov	r2, r1
 8001ae6:	71fb      	strb	r3, [r7, #7]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	f023 030f 	bic.w	r3, r3, #15
 8001af2:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001afa:	7bfa      	ldrb	r2, [r7, #15]
 8001afc:	79bb      	ldrb	r3, [r7, #6]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f80b 	bl	8001b1e <Write4Bits>
  Write4Bits((lownib)|mode);
 8001b08:	7bba      	ldrb	r2, [r7, #14]
 8001b0a:	79bb      	ldrb	r3, [r7, #6]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 f804 	bl	8001b1e <Write4Bits>
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f808 	bl	8001b40 <ExpanderWrite>
  PulseEnable(value);
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f820 	bl	8001b78 <PulseEnable>
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af02      	add	r7, sp, #8
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <ExpanderWrite+0x30>)
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001b56:	f107 020f 	add.w	r2, r7, #15
 8001b5a:	230a      	movs	r3, #10
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2301      	movs	r3, #1
 8001b60:	214e      	movs	r1, #78	@ 0x4e
 8001b62:	4804      	ldr	r0, [pc, #16]	@ (8001b74 <ExpanderWrite+0x34>)
 8001b64:	f003 f994 	bl	8004e90 <HAL_I2C_Master_Transmit>
}
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200000b4 	.word	0x200000b4
 8001b74:	2000011c 	.word	0x2000011c

08001b78 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	f043 0304 	orr.w	r3, r3, #4
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ffd8 	bl	8001b40 <ExpanderWrite>
  DelayUS(20);
 8001b90:	2014      	movs	r0, #20
 8001b92:	f000 f839 	bl	8001c08 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	f023 0304 	bic.w	r3, r3, #4
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ffce 	bl	8001b40 <ExpanderWrite>
  DelayUS(20);
 8001ba4:	2014      	movs	r0, #20
 8001ba6:	f000 f82f 	bl	8001c08 <DelayUS>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <DelayInit>:

static void DelayInit(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <DelayInit+0x4c>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	4a10      	ldr	r2, [pc, #64]	@ (8001c00 <DelayInit+0x4c>)
 8001bbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bc2:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <DelayInit+0x4c>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c00 <DelayInit+0x4c>)
 8001bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bce:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <DelayInit+0x50>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001c04 <DelayInit+0x50>)
 8001bd6:	f023 0301 	bic.w	r3, r3, #1
 8001bda:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <DelayInit+0x50>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a08      	ldr	r2, [pc, #32]	@ (8001c04 <DelayInit+0x50>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001be8:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <DelayInit+0x50>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001bee:	bf00      	nop
  __ASM volatile ("NOP");
 8001bf0:	bf00      	nop
  __ASM volatile ("NOP");
 8001bf2:	bf00      	nop
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000edf0 	.word	0xe000edf0
 8001c04:	e0001000 	.word	0xe0001000

08001c08 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001c10:	4b0e      	ldr	r3, [pc, #56]	@ (8001c4c <DelayUS+0x44>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0e      	ldr	r2, [pc, #56]	@ (8001c50 <DelayUS+0x48>)
 8001c16:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1a:	0c9a      	lsrs	r2, r3, #18
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001c24:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <DelayUS+0x4c>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <DelayUS+0x4c>)
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d8f6      	bhi.n	8001c2a <DelayUS+0x22>
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	371c      	adds	r7, #28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000010 	.word	0x20000010
 8001c50:	431bde83 	.word	0x431bde83
 8001c54:	e0001000 	.word	0xe0001000

08001c58 <PeepTimCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Called by TIM6_DAC_IRQHandler
extern inline void PeepTimCallback(void) {		// This function needs to be inline, because its called very often by a timer iterrupt. To not waste time, put this fuction right where the IRQ stepin is
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
	if (peepState == 1) {						// Depending if the Buzzer was on bevor
 8001c5c:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <PeepTimCallback+0x48>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d10b      	bne.n	8001c7e <PeepTimCallback+0x26>
		TIM2->CR1 &= 0xFE;						// Disable Timer 2
 8001c66:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c70:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001c74:	6013      	str	r3, [r2, #0]
		peepState = 0;
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <PeepTimCallback+0x48>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
	} else {
		TIM2->CR1 |= 0x01;						// Enable  Timer 2
		peepState = 1;
	}
}
 8001c7c:	e00a      	b.n	8001c94 <PeepTimCallback+0x3c>
		TIM2->CR1 |= 0x01;						// Enable  Timer 2
 8001c7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6013      	str	r3, [r2, #0]
		peepState = 1;
 8001c8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <PeepTimCallback+0x48>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	200000b5 	.word	0x200000b5

08001ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	printf("\tBuilt-date: %s\n", BUILT_DATE);	// show the date of the last built, to make sure its the correct one
 8001caa:	4955      	ldr	r1, [pc, #340]	@ (8001e00 <main+0x15c>)
 8001cac:	4855      	ldr	r0, [pc, #340]	@ (8001e04 <main+0x160>)
 8001cae:	f007 f969 	bl	8008f84 <iprintf>
	printf("\tBuilt-time: %s\n", BUILT_TIME);	// show the time of the last built, to make sure its the correct one
 8001cb2:	4955      	ldr	r1, [pc, #340]	@ (8001e08 <main+0x164>)
 8001cb4:	4855      	ldr	r0, [pc, #340]	@ (8001e0c <main+0x168>)
 8001cb6:	f007 f965 	bl	8008f84 <iprintf>

	LoadSettings();								// Load all the Setting from the Settings.h to the global variables
 8001cba:	f000 fb15 	bl	80022e8 <LoadSettings>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cbe:	f001 fab5 	bl	800322c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc2:	f000 f8bb 	bl	8001e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cc6:	f000 faa9 	bl	800221c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001cca:	f000 fa77 	bl	80021bc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001cce:	f000 f907 	bl	8001ee0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001cd2:	f000 f97b 	bl	8001fcc <MX_I2C1_Init>
  MX_TIM2_Init();
 8001cd6:	f000 f9b9 	bl	800204c <MX_TIM2_Init>
  MX_TIM6_Init();
 8001cda:	f000 fa39 	bl	8002150 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  InitBaro();									// Initialize the barometer to set all the oversampling-rates and filters right values}
 8001cde:	f000 fcb7 	bl	8002650 <InitBaro>
  InitLcd();									// Initialize the Liquid crystal Display
 8001ce2:	f000 ff9d 	bl	8002c20 <InitLcd>

  //Start the timers for beeping
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);		// Start timer 2
 8001ce6:	2108      	movs	r1, #8
 8001ce8:	4849      	ldr	r0, [pc, #292]	@ (8001e10 <main+0x16c>)
 8001cea:	f005 fa67 	bl	80071bc <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);;				// Start timer 6
 8001cee:	4849      	ldr	r0, [pc, #292]	@ (8001e14 <main+0x170>)
 8001cf0:	f005 f992 	bl	8007018 <HAL_TIM_Base_Start_IT>
  HAL_Delay(1);
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f001 fb15 	bl	8003324 <HAL_Delay>
  DisableF();									// Timers started already, stop them for no annoiing Buzzer sound
 8001cfa:	f000 ff6b 	bl	8002bd4 <DisableF>

  printf("***********LOOP START***********\n");
 8001cfe:	4846      	ldr	r0, [pc, #280]	@ (8001e18 <main+0x174>)
 8001d00:	f007 f9a8 	bl	8009054 <puts>

	  // Let green LED blink
	  static uint32_t lastBlink;
	  static uint8_t toggle;
#ifndef TESTMODE
	  if(HAL_GetTick() - lastBlink >= BLINK_TIME){						// Check if enough time passed and this part should now be executed
 8001d04:	f001 fb02 	bl	800330c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b44      	ldr	r3, [pc, #272]	@ (8001e1c <main+0x178>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d14:	d316      	bcc.n	8001d44 <main+0xa0>
#else
	  float analogBlinkTime = mapfloat(Battery.percent, 0, 100, 0, 2000);
	  if(HAL_GetTick() - lastBlink >= analogBlinkTime){					// Match the blink time according the analog signal of A0
#endif
		  lastBlink = HAL_GetTick();									// Reset timer variable
 8001d16:	f001 faf9 	bl	800330c <HAL_GetTick>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4a3f      	ldr	r2, [pc, #252]	@ (8001e1c <main+0x178>)
 8001d1e:	6013      	str	r3, [r2, #0]
		  toggle = !toggle;
 8001d20:	4b3f      	ldr	r3, [pc, #252]	@ (8001e20 <main+0x17c>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf0c      	ite	eq
 8001d28:	2301      	moveq	r3, #1
 8001d2a:	2300      	movne	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b3b      	ldr	r3, [pc, #236]	@ (8001e20 <main+0x17c>)
 8001d32:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, toggle);
 8001d34:	4b3a      	ldr	r3, [pc, #232]	@ (8001e20 <main+0x17c>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	2120      	movs	r1, #32
 8001d3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d40:	f002 fff2 	bl	8004d28 <HAL_GPIO_WritePin>
	  }

	  // Read analog voltage at A0
	  static uint32_t lastAdcRead;
	  if(HAL_GetTick() - lastAdcRead >= BATTERY_UPDATE_TIME){			// Check if enough time passed and this part should now be executed
 8001d44:	f001 fae2 	bl	800330c <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	4b36      	ldr	r3, [pc, #216]	@ (8001e24 <main+0x180>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b63      	cmp	r3, #99	@ 0x63
 8001d52:	d90a      	bls.n	8001d6a <main+0xc6>
		  lastAdcRead = HAL_GetTick();									// Reset timer variable
 8001d54:	f001 fada 	bl	800330c <HAL_GetTick>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4a32      	ldr	r2, [pc, #200]	@ (8001e24 <main+0x180>)
 8001d5c:	6013      	str	r3, [r2, #0]
		  ReadVoltage(&Battery);										// Read voltage from analog pin, the battery and store it in the Battery enum
 8001d5e:	4832      	ldr	r0, [pc, #200]	@ (8001e28 <main+0x184>)
 8001d60:	f000 fb1a 	bl	8002398 <ReadVoltage>
		  CalcBatteryPercent(&Battery);									// Calculate a percentace out of the voltage, according to the real discharge curve
 8001d64:	4830      	ldr	r0, [pc, #192]	@ (8001e28 <main+0x184>)
 8001d66:	f000 fb47 	bl	80023f8 <CalcBatteryPercent>
	  }

	  // Read Baro
	  ReadBaro(&Baro);													// Read the I2C Barometer data, Preassure and Temperature
 8001d6a:	4830      	ldr	r0, [pc, #192]	@ (8001e2c <main+0x188>)
 8001d6c:	f000 fc98 	bl	80026a0 <ReadBaro>


#ifndef TESTMODE
	  // Generate a tone out of vertical speed
	  CalculateTone(Baro.verticalSpeed, &Beeper);
 8001d70:	4b2e      	ldr	r3, [pc, #184]	@ (8001e2c <main+0x188>)
 8001d72:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d76:	482e      	ldr	r0, [pc, #184]	@ (8001e30 <main+0x18c>)
 8001d78:	eeb0 0a67 	vmov.f32	s0, s15
 8001d7c:	f000 fd60 	bl	8002840 <CalculateTone>
	  CalculateTone(analogValue, &Beeper);								// Test: generate tone from analog signal (A0)
#endif

	  // LCD Code....
	  static uint32_t lastScreenUpdate;
	  if(HAL_GetTick() - lastScreenUpdate >= SCREEN_UPDATE_TIME){		// Check if enough time passed and this part should now be executed
 8001d80:	f001 fac4 	bl	800330c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b2b      	ldr	r3, [pc, #172]	@ (8001e34 <main+0x190>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d90:	d3b8      	bcc.n	8001d04 <main+0x60>
		  Lcd.altitude = Baro.altitude;
 8001d92:	4b26      	ldr	r3, [pc, #152]	@ (8001e2c <main+0x188>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbce 	bl	8000538 <__aeabi_f2d>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4925      	ldr	r1, [pc, #148]	@ (8001e38 <main+0x194>)
 8001da2:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  Lcd.temperature = Baro.temperature;
 8001da6:	4b21      	ldr	r3, [pc, #132]	@ (8001e2c <main+0x188>)
 8001da8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001db0:	edc7 7a01 	vstr	s15, [r7, #4]
 8001db4:	793b      	ldrb	r3, [r7, #4]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e38 <main+0x194>)
 8001dba:	701a      	strb	r2, [r3, #0]
		  Lcd.verticalSpeed = Baro.verticalSpeed;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e2c <main+0x188>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbb9 	bl	8000538 <__aeabi_f2d>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	491b      	ldr	r1, [pc, #108]	@ (8001e38 <main+0x194>)
 8001dcc:	e9c1 2306 	strd	r2, r3, [r1, #24]
		  Lcd.preassure = Baro.preassure;
 8001dd0:	4b16      	ldr	r3, [pc, #88]	@ (8001e2c <main+0x188>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fbaf 	bl	8000538 <__aeabi_f2d>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4916      	ldr	r1, [pc, #88]	@ (8001e38 <main+0x194>)
 8001de0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		  Lcd.batteryPercent = Battery.percent;
 8001de4:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <main+0x184>)
 8001de6:	791a      	ldrb	r2, [r3, #4]
 8001de8:	4b13      	ldr	r3, [pc, #76]	@ (8001e38 <main+0x194>)
 8001dea:	709a      	strb	r2, [r3, #2]
		  UpdateLcd(&Lcd);												// Update all the elements of the display
 8001dec:	4812      	ldr	r0, [pc, #72]	@ (8001e38 <main+0x194>)
 8001dee:	f000 ff1e 	bl	8002c2e <UpdateLcd>
		  lastScreenUpdate = HAL_GetTick();
 8001df2:	f001 fa8b 	bl	800330c <HAL_GetTick>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4a0e      	ldr	r2, [pc, #56]	@ (8001e34 <main+0x190>)
 8001dfa:	6013      	str	r3, [r2, #0]
  {
 8001dfc:	e782      	b.n	8001d04 <main+0x60>
 8001dfe:	bf00      	nop
 8001e00:	0800abf0 	.word	0x0800abf0
 8001e04:	0800abfc 	.word	0x0800abfc
 8001e08:	0800ac10 	.word	0x0800ac10
 8001e0c:	0800ac1c 	.word	0x0800ac1c
 8001e10:	20000170 	.word	0x20000170
 8001e14:	200001bc 	.word	0x200001bc
 8001e18:	0800ac30 	.word	0x0800ac30
 8001e1c:	20000314 	.word	0x20000314
 8001e20:	20000318 	.word	0x20000318
 8001e24:	2000031c 	.word	0x2000031c
 8001e28:	200002f8 	.word	0x200002f8
 8001e2c:	200002c0 	.word	0x200002c0
 8001e30:	20000290 	.word	0x20000290
 8001e34:	20000320 	.word	0x20000320
 8001e38:	200002d8 	.word	0x200002d8

08001e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b096      	sub	sp, #88	@ 0x58
 8001e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	2244      	movs	r2, #68	@ 0x44
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f007 f9e2 	bl	8009214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e50:	463b      	mov	r3, r7
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e5e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001e62:	f003 fd6f 	bl	8005944 <HAL_PWREx_ControlVoltageScaling>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001e6c:	f000 fee9 	bl	8002c42 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e70:	2302      	movs	r3, #2
 8001e72:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e78:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e7a:	2310      	movs	r3, #16
 8001e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e82:	2302      	movs	r3, #2
 8001e84:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001e8a:	230a      	movs	r3, #10
 8001e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001e8e:	2307      	movs	r3, #7
 8001e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e92:	2302      	movs	r3, #2
 8001e94:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e96:	2302      	movs	r3, #2
 8001e98:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f003 fda6 	bl	80059f0 <HAL_RCC_OscConfig>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001eaa:	f000 feca 	bl	8002c42 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eae:	230f      	movs	r3, #15
 8001eb0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ec2:	463b      	mov	r3, r7
 8001ec4:	2104      	movs	r1, #4
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f004 f96e 	bl	80061a8 <HAL_RCC_ClockConfig>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001ed2:	f000 feb6 	bl	8002c42 <Error_Handler>
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	3758      	adds	r7, #88	@ 0x58
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	@ 0x28
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
 8001f00:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f02:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc0 <MX_ADC1_Init+0xe0>)
 8001f04:	4a2f      	ldr	r2, [pc, #188]	@ (8001fc4 <MX_ADC1_Init+0xe4>)
 8001f06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f08:	4b2d      	ldr	r3, [pc, #180]	@ (8001fc0 <MX_ADC1_Init+0xe0>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc0 <MX_ADC1_Init+0xe0>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f14:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc0 <MX_ADC1_Init+0xe0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f1a:	4b29      	ldr	r3, [pc, #164]	@ (8001fc0 <MX_ADC1_Init+0xe0>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f20:	4b27      	ldr	r3, [pc, #156]	@ (8001fc0 <MX_ADC1_Init+0xe0>)
 8001f22:	2204      	movs	r2, #4
 8001f24:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f26:	4b26      	ldr	r3, [pc, #152]	@ (8001fc0 <MX_ADC1_Init+0xe0>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f2c:	4b24      	ldr	r3, [pc, #144]	@ (8001fc0 <MX_ADC1_Init+0xe0>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001f32:	4b23      	ldr	r3, [pc, #140]	@ (8001fc0 <MX_ADC1_Init+0xe0>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f38:	4b21      	ldr	r3, [pc, #132]	@ (8001fc0 <MX_ADC1_Init+0xe0>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f40:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc0 <MX_ADC1_Init+0xe0>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f46:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc0 <MX_ADC1_Init+0xe0>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc0 <MX_ADC1_Init+0xe0>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f54:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <MX_ADC1_Init+0xe0>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001f5a:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <MX_ADC1_Init+0xe0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f62:	4817      	ldr	r0, [pc, #92]	@ (8001fc0 <MX_ADC1_Init+0xe0>)
 8001f64:	f001 fbe6 	bl	8003734 <HAL_ADC_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001f6e:	f000 fe68 	bl	8002c42 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4810      	ldr	r0, [pc, #64]	@ (8001fc0 <MX_ADC1_Init+0xe0>)
 8001f7e:	f002 fb67 	bl	8004650 <HAL_ADCEx_MultiModeConfigChannel>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001f88:	f000 fe5b 	bl	8002c42 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc8 <MX_ADC1_Init+0xe8>)
 8001f8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f90:	2306      	movs	r3, #6
 8001f92:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f98:	237f      	movs	r3, #127	@ 0x7f
 8001f9a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4805      	ldr	r0, [pc, #20]	@ (8001fc0 <MX_ADC1_Init+0xe0>)
 8001faa:	f001 feb3 	bl	8003d14 <HAL_ADC_ConfigChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001fb4:	f000 fe45 	bl	8002c42 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fb8:	bf00      	nop
 8001fba:	3728      	adds	r7, #40	@ 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	200000b8 	.word	0x200000b8
 8001fc4:	50040000 	.word	0x50040000
 8001fc8:	14f00020 	.word	0x14f00020

08001fcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002040 <MX_I2C1_Init+0x74>)
 8001fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8002044 <MX_I2C1_Init+0x78>)
 8001fd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8001fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8002040 <MX_I2C1_Init+0x74>)
 8001fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8002048 <MX_I2C1_Init+0x7c>)
 8001fda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001fdc:	4b18      	ldr	r3, [pc, #96]	@ (8002040 <MX_I2C1_Init+0x74>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fe2:	4b17      	ldr	r3, [pc, #92]	@ (8002040 <MX_I2C1_Init+0x74>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe8:	4b15      	ldr	r3, [pc, #84]	@ (8002040 <MX_I2C1_Init+0x74>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fee:	4b14      	ldr	r3, [pc, #80]	@ (8002040 <MX_I2C1_Init+0x74>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ff4:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <MX_I2C1_Init+0x74>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <MX_I2C1_Init+0x74>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002000:	4b0f      	ldr	r3, [pc, #60]	@ (8002040 <MX_I2C1_Init+0x74>)
 8002002:	2200      	movs	r2, #0
 8002004:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002006:	480e      	ldr	r0, [pc, #56]	@ (8002040 <MX_I2C1_Init+0x74>)
 8002008:	f002 fea6 	bl	8004d58 <HAL_I2C_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002012:	f000 fe16 	bl	8002c42 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002016:	2100      	movs	r1, #0
 8002018:	4809      	ldr	r0, [pc, #36]	@ (8002040 <MX_I2C1_Init+0x74>)
 800201a:	f003 fbed 	bl	80057f8 <HAL_I2CEx_ConfigAnalogFilter>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002024:	f000 fe0d 	bl	8002c42 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002028:	2100      	movs	r1, #0
 800202a:	4805      	ldr	r0, [pc, #20]	@ (8002040 <MX_I2C1_Init+0x74>)
 800202c:	f003 fc2f 	bl	800588e <HAL_I2CEx_ConfigDigitalFilter>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002036:	f000 fe04 	bl	8002c42 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	2000011c 	.word	0x2000011c
 8002044:	40005400 	.word	0x40005400
 8002048:	10d19ce4 	.word	0x10d19ce4

0800204c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08e      	sub	sp, #56	@ 0x38
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002052:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002060:	f107 031c 	add.w	r3, r7, #28
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800206c:	463b      	mov	r3, r7
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	611a      	str	r2, [r3, #16]
 800207a:	615a      	str	r2, [r3, #20]
 800207c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800207e:	4b33      	ldr	r3, [pc, #204]	@ (800214c <MX_TIM2_Init+0x100>)
 8002080:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002084:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 8002086:	4b31      	ldr	r3, [pc, #196]	@ (800214c <MX_TIM2_Init+0x100>)
 8002088:	2250      	movs	r2, #80	@ 0x50
 800208a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208c:	4b2f      	ldr	r3, [pc, #188]	@ (800214c <MX_TIM2_Init+0x100>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 600;
 8002092:	4b2e      	ldr	r3, [pc, #184]	@ (800214c <MX_TIM2_Init+0x100>)
 8002094:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8002098:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209a:	4b2c      	ldr	r3, [pc, #176]	@ (800214c <MX_TIM2_Init+0x100>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a0:	4b2a      	ldr	r3, [pc, #168]	@ (800214c <MX_TIM2_Init+0x100>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020a6:	4829      	ldr	r0, [pc, #164]	@ (800214c <MX_TIM2_Init+0x100>)
 80020a8:	f004 ff5e 	bl	8006f68 <HAL_TIM_Base_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80020b2:	f000 fdc6 	bl	8002c42 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020c0:	4619      	mov	r1, r3
 80020c2:	4822      	ldr	r0, [pc, #136]	@ (800214c <MX_TIM2_Init+0x100>)
 80020c4:	f005 fb9c 	bl	8007800 <HAL_TIM_ConfigClockSource>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80020ce:	f000 fdb8 	bl	8002c42 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020d2:	481e      	ldr	r0, [pc, #120]	@ (800214c <MX_TIM2_Init+0x100>)
 80020d4:	f005 f810 	bl	80070f8 <HAL_TIM_PWM_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80020de:	f000 fdb0 	bl	8002c42 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020ea:	f107 031c 	add.w	r3, r7, #28
 80020ee:	4619      	mov	r1, r3
 80020f0:	4816      	ldr	r0, [pc, #88]	@ (800214c <MX_TIM2_Init+0x100>)
 80020f2:	f006 f8bd 	bl	8008270 <HAL_TIMEx_MasterConfigSynchronization>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80020fc:	f000 fda1 	bl	8002c42 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002100:	2360      	movs	r3, #96	@ 0x60
 8002102:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 300;
 8002104:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002108:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800210e:	2304      	movs	r3, #4
 8002110:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002112:	463b      	mov	r3, r7
 8002114:	2200      	movs	r2, #0
 8002116:	4619      	mov	r1, r3
 8002118:	480c      	ldr	r0, [pc, #48]	@ (800214c <MX_TIM2_Init+0x100>)
 800211a:	f005 fa5d 	bl	80075d8 <HAL_TIM_PWM_ConfigChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002124:	f000 fd8d 	bl	8002c42 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002128:	463b      	mov	r3, r7
 800212a:	2208      	movs	r2, #8
 800212c:	4619      	mov	r1, r3
 800212e:	4807      	ldr	r0, [pc, #28]	@ (800214c <MX_TIM2_Init+0x100>)
 8002130:	f005 fa52 	bl	80075d8 <HAL_TIM_PWM_ConfigChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800213a:	f000 fd82 	bl	8002c42 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800213e:	4803      	ldr	r0, [pc, #12]	@ (800214c <MX_TIM2_Init+0x100>)
 8002140:	f000 fea8 	bl	8002e94 <HAL_TIM_MspPostInit>

}
 8002144:	bf00      	nop
 8002146:	3738      	adds	r7, #56	@ 0x38
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000170 	.word	0x20000170

08002150 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002160:	4b14      	ldr	r3, [pc, #80]	@ (80021b4 <MX_TIM6_Init+0x64>)
 8002162:	4a15      	ldr	r2, [pc, #84]	@ (80021b8 <MX_TIM6_Init+0x68>)
 8002164:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2000;
 8002166:	4b13      	ldr	r3, [pc, #76]	@ (80021b4 <MX_TIM6_Init+0x64>)
 8002168:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800216c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800216e:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <MX_TIM6_Init+0x64>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8002174:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <MX_TIM6_Init+0x64>)
 8002176:	220a      	movs	r2, #10
 8002178:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217a:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <MX_TIM6_Init+0x64>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002180:	480c      	ldr	r0, [pc, #48]	@ (80021b4 <MX_TIM6_Init+0x64>)
 8002182:	f004 fef1 	bl	8006f68 <HAL_TIM_Base_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800218c:	f000 fd59 	bl	8002c42 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002190:	2320      	movs	r3, #32
 8002192:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	4619      	mov	r1, r3
 800219c:	4805      	ldr	r0, [pc, #20]	@ (80021b4 <MX_TIM6_Init+0x64>)
 800219e:	f006 f867 	bl	8008270 <HAL_TIMEx_MasterConfigSynchronization>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80021a8:	f000 fd4b 	bl	8002c42 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	200001bc 	.word	0x200001bc
 80021b8:	40001000 	.word	0x40001000

080021bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021c0:	4b14      	ldr	r3, [pc, #80]	@ (8002214 <MX_USART2_UART_Init+0x58>)
 80021c2:	4a15      	ldr	r2, [pc, #84]	@ (8002218 <MX_USART2_UART_Init+0x5c>)
 80021c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021c6:	4b13      	ldr	r3, [pc, #76]	@ (8002214 <MX_USART2_UART_Init+0x58>)
 80021c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ce:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <MX_USART2_UART_Init+0x58>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002214 <MX_USART2_UART_Init+0x58>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021da:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <MX_USART2_UART_Init+0x58>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <MX_USART2_UART_Init+0x58>)
 80021e2:	220c      	movs	r2, #12
 80021e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <MX_USART2_UART_Init+0x58>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ec:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <MX_USART2_UART_Init+0x58>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021f2:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <MX_USART2_UART_Init+0x58>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021f8:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <MX_USART2_UART_Init+0x58>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021fe:	4805      	ldr	r0, [pc, #20]	@ (8002214 <MX_USART2_UART_Init+0x58>)
 8002200:	f006 f8dc 	bl	80083bc <HAL_UART_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800220a:	f000 fd1a 	bl	8002c42 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000208 	.word	0x20000208
 8002218:	40004400 	.word	0x40004400

0800221c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	@ 0x28
 8002220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002222:	f107 0314 	add.w	r3, r7, #20
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]
 8002230:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002232:	4b2b      	ldr	r3, [pc, #172]	@ (80022e0 <MX_GPIO_Init+0xc4>)
 8002234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002236:	4a2a      	ldr	r2, [pc, #168]	@ (80022e0 <MX_GPIO_Init+0xc4>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800223e:	4b28      	ldr	r3, [pc, #160]	@ (80022e0 <MX_GPIO_Init+0xc4>)
 8002240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800224a:	4b25      	ldr	r3, [pc, #148]	@ (80022e0 <MX_GPIO_Init+0xc4>)
 800224c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800224e:	4a24      	ldr	r2, [pc, #144]	@ (80022e0 <MX_GPIO_Init+0xc4>)
 8002250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002256:	4b22      	ldr	r3, [pc, #136]	@ (80022e0 <MX_GPIO_Init+0xc4>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	4b1f      	ldr	r3, [pc, #124]	@ (80022e0 <MX_GPIO_Init+0xc4>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	4a1e      	ldr	r2, [pc, #120]	@ (80022e0 <MX_GPIO_Init+0xc4>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800226e:	4b1c      	ldr	r3, [pc, #112]	@ (80022e0 <MX_GPIO_Init+0xc4>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800227a:	4b19      	ldr	r3, [pc, #100]	@ (80022e0 <MX_GPIO_Init+0xc4>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227e:	4a18      	ldr	r2, [pc, #96]	@ (80022e0 <MX_GPIO_Init+0xc4>)
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002286:	4b16      	ldr	r3, [pc, #88]	@ (80022e0 <MX_GPIO_Init+0xc4>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002292:	2200      	movs	r2, #0
 8002294:	2120      	movs	r1, #32
 8002296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800229a:	f002 fd45 	bl	8004d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800229e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80022a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	480b      	ldr	r0, [pc, #44]	@ (80022e4 <MX_GPIO_Init+0xc8>)
 80022b6:	f002 fb8d 	bl	80049d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80022ba:	2320      	movs	r3, #32
 80022bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022be:	2301      	movs	r3, #1
 80022c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2300      	movs	r3, #0
 80022c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022d4:	f002 fb7e 	bl	80049d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80022d8:	bf00      	nop
 80022da:	3728      	adds	r7, #40	@ 0x28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	48000800 	.word	0x48000800

080022e8 <LoadSettings>:

/* USER CODE BEGIN 4 */

void LoadSettings(){
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
	// Fill all the values from Settings.h to all structs
	Beeper.climb_threshold = 		CLIMB_THRESHOLD;
 80022ec:	4b21      	ldr	r3, [pc, #132]	@ (8002374 <LoadSettings+0x8c>)
 80022ee:	4a22      	ldr	r2, [pc, #136]	@ (8002378 <LoadSettings+0x90>)
 80022f0:	601a      	str	r2, [r3, #0]
	Beeper.near_climb_threshold = 	NEAR_CLIMB_THRESHOLD;
 80022f2:	4b20      	ldr	r3, [pc, #128]	@ (8002374 <LoadSettings+0x8c>)
 80022f4:	4a21      	ldr	r2, [pc, #132]	@ (800237c <LoadSettings+0x94>)
 80022f6:	605a      	str	r2, [r3, #4]
	Beeper.sink_threshold = 		SINK_THRESHOLD;
 80022f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002374 <LoadSettings+0x8c>)
 80022fa:	4a21      	ldr	r2, [pc, #132]	@ (8002380 <LoadSettings+0x98>)
 80022fc:	609a      	str	r2, [r3, #8]
	Beeper.climb_beeps_start = 		CLIMB_BEEPS_AT_THRESHOLD;
 80022fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002374 <LoadSettings+0x8c>)
 8002300:	4a20      	ldr	r2, [pc, #128]	@ (8002384 <LoadSettings+0x9c>)
 8002302:	60da      	str	r2, [r3, #12]
	Beeper.climb_beeps_stop = 		CLIMB_BEEPS_AT_MAX_VARIO;
 8002304:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <LoadSettings+0x8c>)
 8002306:	4a20      	ldr	r2, [pc, #128]	@ (8002388 <LoadSettings+0xa0>)
 8002308:	611a      	str	r2, [r3, #16]
	Beeper.start_f_climb = 			CLIMB_FREQUENCY_AT_THERSHOLD;
 800230a:	4b1a      	ldr	r3, [pc, #104]	@ (8002374 <LoadSettings+0x8c>)
 800230c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002310:	615a      	str	r2, [r3, #20]
	Beeper.stop_f_climb = 			CLIMB_FREQUENCY_AT_MAX_VARIO;
 8002312:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <LoadSettings+0x8c>)
 8002314:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8002318:	619a      	str	r2, [r3, #24]
	Beeper.start_f_sink = 			SINK_FREQUENCY_AT_THERSHOLD;
 800231a:	4b16      	ldr	r3, [pc, #88]	@ (8002374 <LoadSettings+0x8c>)
 800231c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002320:	61da      	str	r2, [r3, #28]
	Beeper.stop_f_sink = 			SINK_FREQUENCY_AT_MIN_VARIO;
 8002322:	4b14      	ldr	r3, [pc, #80]	@ (8002374 <LoadSettings+0x8c>)
 8002324:	22c8      	movs	r2, #200	@ 0xc8
 8002326:	621a      	str	r2, [r3, #32]
	Beeper.min_peep_time_start = 	MIN_PEEP_TIME_AT_THRESHOLD;
 8002328:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <LoadSettings+0x8c>)
 800232a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800232e:	625a      	str	r2, [r3, #36]	@ 0x24
	Beeper.min_peep_time_stop = 	MIN_PEEP_TIME_AT_MAX_VARIO;
 8002330:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <LoadSettings+0x8c>)
 8002332:	2296      	movs	r2, #150	@ 0x96
 8002334:	629a      	str	r2, [r3, #40]	@ 0x28
	Beeper.volume = 				VOLUME;
 8002336:	4b0f      	ldr	r3, [pc, #60]	@ (8002374 <LoadSettings+0x8c>)
 8002338:	2205      	movs	r2, #5
 800233a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

	Battery.voltAt0Percent = 		BAT_0;
 800233e:	4b13      	ldr	r3, [pc, #76]	@ (800238c <LoadSettings+0xa4>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
	Battery.voltAt5Percent = 		BAT_5;
 8002344:	4b11      	ldr	r3, [pc, #68]	@ (800238c <LoadSettings+0xa4>)
 8002346:	22a5      	movs	r2, #165	@ 0xa5
 8002348:	60da      	str	r2, [r3, #12]
	Battery.voltAt20Percent = 		BAT_20;
 800234a:	4b10      	ldr	r3, [pc, #64]	@ (800238c <LoadSettings+0xa4>)
 800234c:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8002350:	611a      	str	r2, [r3, #16]
	Battery.voltAt75Percent = 		BAT_75;
 8002352:	4b0e      	ldr	r3, [pc, #56]	@ (800238c <LoadSettings+0xa4>)
 8002354:	f640 12ab 	movw	r2, #2475	@ 0x9ab
 8002358:	615a      	str	r2, [r3, #20]
	Battery.voltAt100Percent = 		BAT_100;
 800235a:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <LoadSettings+0xa4>)
 800235c:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002360:	619a      	str	r2, [r3, #24]

	Baro.preassureSealevel = 		PRASSURE_AT_SEALEVEL;
 8002362:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <LoadSettings+0xa8>)
 8002364:	4a0b      	ldr	r2, [pc, #44]	@ (8002394 <LoadSettings+0xac>)
 8002366:	611a      	str	r2, [r3, #16]

}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000290 	.word	0x20000290
 8002378:	3e99999a 	.word	0x3e99999a
 800237c:	3dcccccd 	.word	0x3dcccccd
 8002380:	c0400000 	.word	0xc0400000
 8002384:	3fd9999a 	.word	0x3fd9999a
 8002388:	40d66666 	.word	0x40d66666
 800238c:	200002f8 	.word	0x200002f8
 8002390:	200002c0 	.word	0x200002c0
 8002394:	447d5000 	.word	0x447d5000

08002398 <ReadVoltage>:

void ReadVoltage(Battery_t *tmpBat){
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);
 80023a0:	4813      	ldr	r0, [pc, #76]	@ (80023f0 <ReadVoltage+0x58>)
 80023a2:	f001 fb17 	bl	80039d4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);						// 1 ms Timeout
 80023a6:	2101      	movs	r1, #1
 80023a8:	4811      	ldr	r0, [pc, #68]	@ (80023f0 <ReadVoltage+0x58>)
 80023aa:	f001 fbcd 	bl	8003b48 <HAL_ADC_PollForConversion>
	uint32_t ADC_value = HAL_ADC_GetValue(&hadc1) * ADC_MULTI;	// Read Voltage and scale it to get millivolts
 80023ae:	4810      	ldr	r0, [pc, #64]	@ (80023f0 <ReadVoltage+0x58>)
 80023b0:	f001 fca2 	bl	8003cf8 <HAL_ADC_GetValue>
 80023b4:	ee07 0a90 	vmov	s15, r0
 80023b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023bc:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80023f4 <ReadVoltage+0x5c>
 80023c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023c8:	ee17 3a90 	vmov	r3, s15
 80023cc:	60fb      	str	r3, [r7, #12]
	uint32_t voltage = ((float)ADC_value * (float)RES_RATIO);	// Scale the ADC reading according the Voltage Devider
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	ee07 3a90 	vmov	s15, r3
 80023d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023dc:	ee17 3a90 	vmov	r3, s15
 80023e0:	60bb      	str	r3, [r7, #8]

	//printf("ADC value: %li\n",ADC_value);
	//printf("voltage: %li\n",voltage);

	tmpBat->voltage = voltage;									// Save the result in the struct
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	601a      	str	r2, [r3, #0]
}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200000b8 	.word	0x200000b8
 80023f4:	3f4e4ce5 	.word	0x3f4e4ce5

080023f8 <CalcBatteryPercent>:

/*
 * Map the Battery voltage to a real Discharge curve
 * The curve is based on a 4 point model
 */
void CalcBatteryPercent(Battery_t *tmpBat){
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	@ 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	float x0, y0, x1, y1, yp;
	//Handle Error
	if(tmpBat->voltage < tmpBat->voltAt0Percent){
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	429a      	cmp	r2, r3
 800240a:	d203      	bcs.n	8002414 <CalcBatteryPercent+0x1c>
		tmpBat->percent = 0;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	711a      	strb	r2, [r3, #4]
		return;
 8002412:	e0b7      	b.n	8002584 <CalcBatteryPercent+0x18c>
	}
	if(tmpBat->voltage > tmpBat->voltAt100Percent){
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	429a      	cmp	r2, r3
 800241e:	d903      	bls.n	8002428 <CalcBatteryPercent+0x30>
		tmpBat->percent = 100;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2264      	movs	r2, #100	@ 0x64
 8002424:	711a      	strb	r2, [r3, #4]
		return;  HD44780_Init(2);
 8002426:	e0ad      	b.n	8002584 <CalcBatteryPercent+0x18c>
		  	//HD44780_ScrollDisplayRight(); for scrolling right
		  	HAL_Delay(500);
		    }
	}

	if(tmpBat->voltage >= tmpBat->voltAt0Percent && tmpBat->voltage < tmpBat->voltAt5Percent){
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	429a      	cmp	r2, r3
 8002432:	d31b      	bcc.n	800246c <CalcBatteryPercent+0x74>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	429a      	cmp	r2, r3
 800243e:	d215      	bcs.n	800246c <CalcBatteryPercent+0x74>
		x0=tmpBat->voltAt0Percent;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	ee07 3a90 	vmov	s15, r3
 8002448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244c:	edc7 7a07 	vstr	s15, [r7, #28]
		y0=0;
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
		x1=tmpBat->voltAt5Percent;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002462:	edc7 7a05 	vstr	s15, [r7, #20]
		y1=5;
 8002466:	4b4a      	ldr	r3, [pc, #296]	@ (8002590 <CalcBatteryPercent+0x198>)
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	e061      	b.n	8002530 <CalcBatteryPercent+0x138>
	}else if(tmpBat->voltage >= tmpBat->voltAt5Percent && tmpBat->voltage < tmpBat->voltAt20Percent){
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	429a      	cmp	r2, r3
 8002476:	d31a      	bcc.n	80024ae <CalcBatteryPercent+0xb6>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	429a      	cmp	r2, r3
 8002482:	d214      	bcs.n	80024ae <CalcBatteryPercent+0xb6>
		x0=tmpBat->voltAt5Percent;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	ee07 3a90 	vmov	s15, r3
 800248c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002490:	edc7 7a07 	vstr	s15, [r7, #28]
		y0=5;
 8002494:	4b3e      	ldr	r3, [pc, #248]	@ (8002590 <CalcBatteryPercent+0x198>)
 8002496:	61bb      	str	r3, [r7, #24]
		x1=tmpBat->voltAt20Percent;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	ee07 3a90 	vmov	s15, r3
 80024a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a4:	edc7 7a05 	vstr	s15, [r7, #20]
		y1=20;
 80024a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002594 <CalcBatteryPercent+0x19c>)
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	e040      	b.n	8002530 <CalcBatteryPercent+0x138>
	}else if(tmpBat->voltage >= tmpBat->voltAt20Percent && tmpBat->voltage < tmpBat->voltAt75Percent){
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d31a      	bcc.n	80024f0 <CalcBatteryPercent+0xf8>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d214      	bcs.n	80024f0 <CalcBatteryPercent+0xf8>
		x0=tmpBat->voltAt20Percent;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	ee07 3a90 	vmov	s15, r3
 80024ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024d2:	edc7 7a07 	vstr	s15, [r7, #28]
		y0=20;
 80024d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002594 <CalcBatteryPercent+0x19c>)
 80024d8:	61bb      	str	r3, [r7, #24]
		x1=tmpBat->voltAt75Percent;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e6:	edc7 7a05 	vstr	s15, [r7, #20]
		y1=75;
 80024ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002598 <CalcBatteryPercent+0x1a0>)
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	e01f      	b.n	8002530 <CalcBatteryPercent+0x138>
	}else if(tmpBat->voltage >= tmpBat->voltAt75Percent && tmpBat->voltage <= tmpBat->voltAt100Percent){
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d319      	bcc.n	8002530 <CalcBatteryPercent+0x138>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	429a      	cmp	r2, r3
 8002506:	d813      	bhi.n	8002530 <CalcBatteryPercent+0x138>
		x0=tmpBat->voltAt75Percent;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002514:	edc7 7a07 	vstr	s15, [r7, #28]
		y0=75;
 8002518:	4b1f      	ldr	r3, [pc, #124]	@ (8002598 <CalcBatteryPercent+0x1a0>)
 800251a:	61bb      	str	r3, [r7, #24]
		x1=tmpBat->voltAt100Percent;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002528:	edc7 7a05 	vstr	s15, [r7, #20]
		y1=100;
 800252c:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <CalcBatteryPercent+0x1a4>)
 800252e:	613b      	str	r3, [r7, #16]
	}

	yp = y0 + ((y1-y0)/(x1-x0)) * (tmpBat->voltage - x0);
 8002530:	ed97 7a04 	vldr	s14, [r7, #16]
 8002534:	edd7 7a06 	vldr	s15, [r7, #24]
 8002538:	ee77 6a67 	vsub.f32	s13, s14, s15
 800253c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002540:	edd7 7a07 	vldr	s15, [r7, #28]
 8002544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002548:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002558:	edd7 7a07 	vldr	s15, [r7, #28]
 800255c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002564:	ed97 7a06 	vldr	s14, [r7, #24]
 8002568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256c:	edc7 7a03 	vstr	s15, [r7, #12]
	//return (uint8_t)yp;
	tmpBat->percent = (uint8_t)yp;
 8002570:	edd7 7a03 	vldr	s15, [r7, #12]
 8002574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002578:	edc7 7a00 	vstr	s15, [r7]
 800257c:	783b      	ldrb	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	711a      	strb	r2, [r3, #4]
}
 8002584:	3724      	adds	r7, #36	@ 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40a00000 	.word	0x40a00000
 8002594:	41a00000 	.word	0x41a00000
 8002598:	42960000 	.word	0x42960000
 800259c:	42c80000 	.word	0x42c80000

080025a0 <constrain>:

/*
 * constrain v0 to min v1 and max v2
 */
float constrain(float v0, float v1, float v2){
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80025aa:	edc7 0a02 	vstr	s1, [r7, #8]
 80025ae:	ed87 1a01 	vstr	s2, [r7, #4]
	if(v0 < v1) v0 = v1;
 80025b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80025b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80025ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c2:	d501      	bpl.n	80025c8 <constrain+0x28>
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	60fb      	str	r3, [r7, #12]
	if(v0 > v2) v0 = v2;
 80025c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80025cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d8:	dd01      	ble.n	80025de <constrain+0x3e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	60fb      	str	r3, [r7, #12]
	return v0;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	ee07 3a90 	vmov	s15, r3
}
 80025e4:	eeb0 0a67 	vmov.f32	s0, s15
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <mapfloat>:

/*
 * linear conversion from a value between x and y to a range from a to b
 */
float mapfloat(float x, float in_min, float in_max, float out_min, float out_max) {
 80025f2:	b480      	push	{r7}
 80025f4:	b087      	sub	sp, #28
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	ed87 0a05 	vstr	s0, [r7, #20]
 80025fc:	edc7 0a04 	vstr	s1, [r7, #16]
 8002600:	ed87 1a03 	vstr	s2, [r7, #12]
 8002604:	edc7 1a02 	vstr	s3, [r7, #8]
 8002608:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800260c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002610:	edd7 7a04 	vldr	s15, [r7, #16]
 8002614:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002618:	edd7 6a01 	vldr	s13, [r7, #4]
 800261c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002620:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002624:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002628:	ed97 7a03 	vldr	s14, [r7, #12]
 800262c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002634:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002638:	edd7 7a02 	vldr	s15, [r7, #8]
 800263c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002640:	eeb0 0a67 	vmov.f32	s0, s15
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <InitBaro>:

void InitBaro(){
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
	if(BMP280_Check()== 1)
 8002654:	f7fe fd32 	bl	80010bc <BMP280_Check>
 8002658:	4603      	mov	r3, r0
 800265a:	2b01      	cmp	r3, #1
 800265c:	d103      	bne.n	8002666 <InitBaro+0x16>
		printf("all good");
 800265e:	480d      	ldr	r0, [pc, #52]	@ (8002694 <InitBaro+0x44>)
 8002660:	f006 fc90 	bl	8008f84 <iprintf>
 8002664:	e002      	b.n	800266c <InitBaro+0x1c>
	else
		printf("no i2c device found");
 8002666:	480c      	ldr	r0, [pc, #48]	@ (8002698 <InitBaro+0x48>)
 8002668:	f006 fc8c 	bl	8008f84 <iprintf>

	BMP280_Read_Calibration();				// Read internal calibaration data and save them locally (needed for further calculations)
 800266c:	f7fe fdc8 	bl	8001200 <BMP280_Read_Calibration>
	BMP280_SetStandby(BMP280_STBY_1s);		// Set normal mode inactive duration (standby time)
 8002670:	20a0      	movs	r0, #160	@ 0xa0
 8002672:	f7fe fd70 	bl	8001156 <BMP280_SetStandby>
	BMP280_SetFilter(BMP280_FILTER_2);		// Set IIR filter constant
 8002676:	2004      	movs	r0, #4
 8002678:	f7fe fd51 	bl	800111e <BMP280_SetFilter>
	BMP280_SetOSRST(BMP280_OSRS_T_x2);		// Set oversampling for temperature
 800267c:	2040      	movs	r0, #64	@ 0x40
 800267e:	f7fe fd86 	bl	800118e <BMP280_SetOSRST>
	BMP280_SetOSRSP(BMP280_OSRS_P_x1);		// Set oversampling for pressure
 8002682:	2004      	movs	r0, #4
 8002684:	f7fe fd9f 	bl	80011c6 <BMP280_SetOSRSP>
	BMP280_SetMode(BMP280_MODE_NORMAL);		// Set normal mode (perpetual periodic conversion)
 8002688:	2003      	movs	r0, #3
 800268a:	f7fe fd2c 	bl	80010e6 <BMP280_SetMode>
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	0800ac54 	.word	0x0800ac54
 8002698:	0800ac60 	.word	0x0800ac60
 800269c:	00000000 	.word	0x00000000

080026a0 <ReadBaro>:

void ReadBaro(Barometer_t *tmpBaro){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
	static uint32_t conversionTimer;

	static int32_t raw_preassure, raw_temperature;


	if(HAL_GetTick() - conversionTimer > 12){
 80026a8:	f000 fe30 	bl	800330c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002820 <ReadBaro+0x180>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b0c      	cmp	r3, #12
 80026b6:	d908      	bls.n	80026ca <ReadBaro+0x2a>
		BMP280_Read_UTP(&raw_temperature, &raw_preassure);					// Read the raw data of the baro as often as possible, else the read value does not change much
 80026b8:	495a      	ldr	r1, [pc, #360]	@ (8002824 <ReadBaro+0x184>)
 80026ba:	485b      	ldr	r0, [pc, #364]	@ (8002828 <ReadBaro+0x188>)
 80026bc:	f7fe fdac 	bl	8001218 <BMP280_Read_UTP>
		conversionTimer = HAL_GetTick();
 80026c0:	f000 fe24 	bl	800330c <HAL_GetTick>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4a56      	ldr	r2, [pc, #344]	@ (8002820 <ReadBaro+0x180>)
 80026c8:	6013      	str	r3, [r2, #0]
	}

	if(HAL_GetTick() - lastBaroRead > BARO_UPDATE_TIME){
 80026ca:	f000 fe1f 	bl	800330c <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	4b56      	ldr	r3, [pc, #344]	@ (800282c <ReadBaro+0x18c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2bfa      	cmp	r3, #250	@ 0xfa
 80026d8:	f240 8092 	bls.w	8002800 <ReadBaro+0x160>
		double baroElapsedTime = (HAL_GetTick() - lastBaroRead) / 1000.0f;	// get exact time since last read in Seconds
 80026dc:	f000 fe16 	bl	800330c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b52      	ldr	r3, [pc, #328]	@ (800282c <ReadBaro+0x18c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	ee07 3a90 	vmov	s15, r3
 80026ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026f0:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8002830 <ReadBaro+0x190>
 80026f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026f8:	ee16 0a90 	vmov	r0, s13
 80026fc:	f7fd ff1c 	bl	8000538 <__aeabi_f2d>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	e9c7 2306 	strd	r2, r3, [r7, #24]
		lastBaroRead = HAL_GetTick();
 8002708:	f000 fe00 	bl	800330c <HAL_GetTick>
 800270c:	4603      	mov	r3, r0
 800270e:	4a47      	ldr	r2, [pc, #284]	@ (800282c <ReadBaro+0x18c>)
 8002710:	6013      	str	r3, [r2, #0]

		tmpBaro->temperature = BMP280_CalcT(raw_temperature) / 100.0;		// convert to correct number format (2510 -> 25.10)
 8002712:	4b45      	ldr	r3, [pc, #276]	@ (8002828 <ReadBaro+0x188>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fdb2 	bl	8001280 <BMP280_CalcT>
 800271c:	4603      	mov	r3, r0
 800271e:	4618      	mov	r0, r3
 8002720:	f7fd fef8 	bl	8000514 <__aeabi_i2d>
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	4b42      	ldr	r3, [pc, #264]	@ (8002834 <ReadBaro+0x194>)
 800272a:	f7fe f887 	bl	800083c <__aeabi_ddiv>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f7fe fa27 	bl	8000b88 <__aeabi_d2f>
 800273a:	4602      	mov	r2, r0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	609a      	str	r2, [r3, #8]
		tmpBaro->preassure = BMP280_CalcP(raw_preassure) / 100000.0;		// convert to correct number format (100663688 -> 100663.688) and from mPa to hPa
 8002740:	4b38      	ldr	r3, [pc, #224]	@ (8002824 <ReadBaro+0x184>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fdd7 	bl	80012f8 <BMP280_CalcP>
 800274a:	4603      	mov	r3, r0
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fed1 	bl	80004f4 <__aeabi_ui2d>
 8002752:	a32d      	add	r3, pc, #180	@ (adr r3, 8002808 <ReadBaro+0x168>)
 8002754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002758:	f7fe f870 	bl	800083c <__aeabi_ddiv>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	f7fe fa10 	bl	8000b88 <__aeabi_d2f>
 8002768:	4602      	mov	r2, r0
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	601a      	str	r2, [r3, #0]

		float r= tmpBaro->preassure / tmpBaro->preassureSealevel;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	edd3 6a00 	vldr	s13, [r3]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	ed93 7a04 	vldr	s14, [r3, #16]
 800277a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800277e:	edc7 7a05 	vstr	s15, [r7, #20]
		float newAltitude = (1.0 - pow(r,0.1902949f))*44330.77f;			// Calculate an altitude from preassure
 8002782:	6978      	ldr	r0, [r7, #20]
 8002784:	f7fd fed8 	bl	8000538 <__aeabi_f2d>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	ed9f 1b20 	vldr	d1, [pc, #128]	@ 8002810 <ReadBaro+0x170>
 8002790:	ec43 2b10 	vmov	d0, r2, r3
 8002794:	f007 fac0 	bl	8009d18 <pow>
 8002798:	ec53 2b10 	vmov	r2, r3, d0
 800279c:	f04f 0000 	mov.w	r0, #0
 80027a0:	4925      	ldr	r1, [pc, #148]	@ (8002838 <ReadBaro+0x198>)
 80027a2:	f7fd fd69 	bl	8000278 <__aeabi_dsub>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	a31a      	add	r3, pc, #104	@ (adr r3, 8002818 <ReadBaro+0x178>)
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	f7fd ff18 	bl	80005e8 <__aeabi_dmul>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	f7fe f9e2 	bl	8000b88 <__aeabi_d2f>
 80027c4:	4603      	mov	r3, r0
 80027c6:	613b      	str	r3, [r7, #16]

		float altitudeDelta = tmpBaro->altitude - newAltitude;				// Calculate an altitude delta since last measurement
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80027ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80027d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d6:	edc7 7a03 	vstr	s15, [r7, #12]
		tmpBaro->verticalSpeed = (altitudeDelta / baroElapsedTime);			// Calculate an vertical speed out of altiude delta and time
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f7fd feac 	bl	8000538 <__aeabi_f2d>
 80027e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027e4:	f7fe f82a 	bl	800083c <__aeabi_ddiv>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	f7fe f9ca 	bl	8000b88 <__aeabi_d2f>
 80027f4:	4602      	mov	r2, r0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	60da      	str	r2, [r3, #12]

		tmpBaro->altitude = newAltitude;									// Save the new altitude to use in next loop as old value
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	605a      	str	r2, [r3, #4]
	}
}
 8002800:	bf00      	nop
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	00000000 	.word	0x00000000
 800280c:	40f86a00 	.word	0x40f86a00
 8002810:	60000000 	.word	0x60000000
 8002814:	3fc85b95 	.word	0x3fc85b95
 8002818:	a0000000 	.word	0xa0000000
 800281c:	40e5a558 	.word	0x40e5a558
 8002820:	20000324 	.word	0x20000324
 8002824:	2000032c 	.word	0x2000032c
 8002828:	20000328 	.word	0x20000328
 800282c:	20000330 	.word	0x20000330
 8002830:	447a0000 	.word	0x447a0000
 8002834:	40590000 	.word	0x40590000
 8002838:	3ff00000 	.word	0x3ff00000
 800283c:	00000000 	.word	0x00000000

08002840 <CalculateTone>:


void CalculateTone(float vSpeed, Beeper_t *tmpBeeper){
 8002840:	b5b0      	push	{r4, r5, r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	ed87 0a01 	vstr	s0, [r7, #4]
 800284a:	6038      	str	r0, [r7, #0]
	static float oldVSpeed;
	static uint32_t peep_start;
	vSpeed = constrain(vSpeed, MIN_VARIO , MAX_VARIO);
 800284c:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8002850:	eefa 0a04 	vmov.f32	s1, #164	@ 0xc1200000 -10.0
 8002854:	ed97 0a01 	vldr	s0, [r7, #4]
 8002858:	f7ff fea2 	bl	80025a0 <constrain>
 800285c:	ed87 0a01 	vstr	s0, [r7, #4]

	// This is to only calculate (and apply) a new tone if the old tone is in its LOW state.. so the PWM is in the low phase.
	// Need this to not hear any weired artefacts
	if(oldVSpeed >= tmpBeeper->climb_threshold){
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	ed93 7a00 	vldr	s14, [r3]
 8002866:	4b88      	ldr	r3, [pc, #544]	@ (8002a88 <CalculateTone+0x248>)
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	d82e      	bhi.n	80028d4 <CalculateTone+0x94>
		unsigned int peep_time = (unsigned int)mapfloat(oldVSpeed, tmpBeeper->climb_threshold, MAX_VARIO,
 8002876:	4b84      	ldr	r3, [pc, #528]	@ (8002a88 <CalculateTone+0x248>)
 8002878:	edd3 7a00 	vldr	s15, [r3]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	ed93 7a00 	vldr	s14, [r3]
						(float)tmpBeeper->min_peep_time_start, (float)tmpBeeper->min_peep_time_stop);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
		unsigned int peep_time = (unsigned int)mapfloat(oldVSpeed, tmpBeeper->climb_threshold, MAX_VARIO,
 8002886:	ee06 3a90 	vmov	s13, r3
 800288a:	eef8 6a66 	vcvt.f32.u32	s13, s13
						(float)tmpBeeper->min_peep_time_start, (float)tmpBeeper->min_peep_time_stop);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
		unsigned int peep_time = (unsigned int)mapfloat(oldVSpeed, tmpBeeper->climb_threshold, MAX_VARIO,
 8002892:	ee06 3a10 	vmov	s12, r3
 8002896:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800289a:	eeb0 2a46 	vmov.f32	s4, s12
 800289e:	eef0 1a66 	vmov.f32	s3, s13
 80028a2:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80028a6:	eef0 0a47 	vmov.f32	s1, s14
 80028aa:	eeb0 0a67 	vmov.f32	s0, s15
 80028ae:	f7ff fea0 	bl	80025f2 <mapfloat>
 80028b2:	eef0 7a40 	vmov.f32	s15, s0
 80028b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ba:	ee17 3a90 	vmov	r3, s15
 80028be:	617b      	str	r3, [r7, #20]
		if (HAL_GetTick() - peep_start < peep_time)
 80028c0:	f000 fd24 	bl	800330c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	4b71      	ldr	r3, [pc, #452]	@ (8002a8c <CalculateTone+0x24c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d914      	bls.n	80028fc <CalculateTone+0xbc>
			return;
 80028d2:	e0d2      	b.n	8002a7a <CalculateTone+0x23a>
	}else if(oldVSpeed <= tmpBeeper->sink_threshold){
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	ed93 7a02 	vldr	s14, [r3, #8]
 80028da:	4b6b      	ldr	r3, [pc, #428]	@ (8002a88 <CalculateTone+0x248>)
 80028dc:	edd3 7a00 	vldr	s15, [r3]
 80028e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e8:	db08      	blt.n	80028fc <CalculateTone+0xbc>
		if (HAL_GetTick() - peep_start < 100)
 80028ea:	f000 fd0f 	bl	800330c <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	4b66      	ldr	r3, [pc, #408]	@ (8002a8c <CalculateTone+0x24c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b63      	cmp	r3, #99	@ 0x63
 80028f8:	f240 80bc 	bls.w	8002a74 <CalculateTone+0x234>
			return;
	}

	peep_start = HAL_GetTick();
 80028fc:	f000 fd06 	bl	800330c <HAL_GetTick>
 8002900:	4603      	mov	r3, r0
 8002902:	4a62      	ldr	r2, [pc, #392]	@ (8002a8c <CalculateTone+0x24c>)
 8002904:	6013      	str	r3, [r2, #0]

	if(vSpeed > oldVSpeed-0.1 && vSpeed < oldVSpeed+0.1)	// Check if NO change in vertical speed
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fd fe16 	bl	8000538 <__aeabi_f2d>
 800290c:	4604      	mov	r4, r0
 800290e:	460d      	mov	r5, r1
 8002910:	4b5d      	ldr	r3, [pc, #372]	@ (8002a88 <CalculateTone+0x248>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7fd fe0f 	bl	8000538 <__aeabi_f2d>
 800291a:	a359      	add	r3, pc, #356	@ (adr r3, 8002a80 <CalculateTone+0x240>)
 800291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002920:	f7fd fcaa 	bl	8000278 <__aeabi_dsub>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4620      	mov	r0, r4
 800292a:	4629      	mov	r1, r5
 800292c:	f7fe f8ec 	bl	8000b08 <__aeabi_dcmpgt>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d018      	beq.n	8002968 <CalculateTone+0x128>
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fd fdfe 	bl	8000538 <__aeabi_f2d>
 800293c:	4604      	mov	r4, r0
 800293e:	460d      	mov	r5, r1
 8002940:	4b51      	ldr	r3, [pc, #324]	@ (8002a88 <CalculateTone+0x248>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd fdf7 	bl	8000538 <__aeabi_f2d>
 800294a:	a34d      	add	r3, pc, #308	@ (adr r3, 8002a80 <CalculateTone+0x240>)
 800294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002950:	f7fd fc94 	bl	800027c <__adddf3>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4620      	mov	r0, r4
 800295a:	4629      	mov	r1, r5
 800295c:	f7fe f8b6 	bl	8000acc <__aeabi_dcmplt>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 8088 	bne.w	8002a78 <CalculateTone+0x238>
		return;

	oldVSpeed = vSpeed;										// set oldVSpeed to the new vSpeed for next loop
 8002968:	4a47      	ldr	r2, [pc, #284]	@ (8002a88 <CalculateTone+0x248>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6013      	str	r3, [r2, #0]

	if(vSpeed >= tmpBeeper->climb_threshold){
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	edd3 7a00 	vldr	s15, [r3]
 8002974:	ed97 7a01 	vldr	s14, [r7, #4]
 8002978:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800297c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002980:	db3c      	blt.n	80029fc <CalculateTone+0x1bc>
		unsigned int freqency = mapfloat(vSpeed,0.0, MAX_VARIO, tmpBeeper->start_f_climb, tmpBeeper->stop_f_climb);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	ee07 3a90 	vmov	s15, r3
 800298a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	ee07 3a10 	vmov	s14, r3
 8002996:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800299a:	eeb0 2a47 	vmov.f32	s4, s14
 800299e:	eef0 1a67 	vmov.f32	s3, s15
 80029a2:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80029a6:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8002a90 <CalculateTone+0x250>
 80029aa:	ed97 0a01 	vldr	s0, [r7, #4]
 80029ae:	f7ff fe20 	bl	80025f2 <mapfloat>
 80029b2:	eef0 7a40 	vmov.f32	s15, s0
 80029b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ba:	ee17 3a90 	vmov	r3, s15
 80029be:	60fb      	str	r3, [r7, #12]
		float peepsPS = mapfloat(vSpeed, 0.0, MAX_VARIO, tmpBeeper->climb_beeps_start,tmpBeeper->climb_beeps_stop);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	ed93 7a04 	vldr	s14, [r3, #16]
 80029cc:	eeb0 2a47 	vmov.f32	s4, s14
 80029d0:	eef0 1a67 	vmov.f32	s3, s15
 80029d4:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80029d8:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8002a90 <CalculateTone+0x250>
 80029dc:	ed97 0a01 	vldr	s0, [r7, #4]
 80029e0:	f7ff fe07 	bl	80025f2 <mapfloat>
 80029e4:	ed87 0a02 	vstr	s0, [r7, #8]
		ApplyF(freqency, peepsPS, tmpBeeper->volume);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80029ee:	4619      	mov	r1, r3
 80029f0:	ed97 0a02 	vldr	s0, [r7, #8]
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f84f 	bl	8002a98 <ApplyF>
 80029fa:	e03e      	b.n	8002a7a <CalculateTone+0x23a>

	}else if(vSpeed >= tmpBeeper->near_climb_threshold && vSpeed < tmpBeeper->climb_threshold && ENABLE_NEAR_CLIMB){
		unsigned int freqency = 550;
		ApplyF(freqency, 0.25, tmpBeeper->volume);

	}else if(vSpeed <= tmpBeeper->sink_threshold){
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a02:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0e:	d82e      	bhi.n	8002a6e <CalculateTone+0x22e>
		TIM6->CR1 &= 0xFE;	//Disable Timer
 8002a10:	4b20      	ldr	r3, [pc, #128]	@ (8002a94 <CalculateTone+0x254>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1f      	ldr	r2, [pc, #124]	@ (8002a94 <CalculateTone+0x254>)
 8002a16:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002a1a:	6013      	str	r3, [r2, #0]
		unsigned int freqency = mapfloat(vSpeed,0.0, MIN_VARIO, tmpBeeper->start_f_sink, tmpBeeper->stop_f_sink);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	ee07 3a90 	vmov	s15, r3
 8002a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	ee07 3a10 	vmov	s14, r3
 8002a30:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002a34:	eeb0 2a47 	vmov.f32	s4, s14
 8002a38:	eef0 1a67 	vmov.f32	s3, s15
 8002a3c:	eeba 1a04 	vmov.f32	s2, #164	@ 0xc1200000 -10.0
 8002a40:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8002a90 <CalculateTone+0x250>
 8002a44:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a48:	f7ff fdd3 	bl	80025f2 <mapfloat>
 8002a4c:	eef0 7a40 	vmov.f32	s15, s0
 8002a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a54:	ee17 3a90 	vmov	r3, s15
 8002a58:	613b      	str	r3, [r7, #16]
		ApplyF(freqency, 0.0, tmpBeeper->volume);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002a60:	4619      	mov	r1, r3
 8002a62:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8002a90 <CalculateTone+0x250>
 8002a66:	6938      	ldr	r0, [r7, #16]
 8002a68:	f000 f816 	bl	8002a98 <ApplyF>
 8002a6c:	e005      	b.n	8002a7a <CalculateTone+0x23a>

	}else{	// stop peep
		DisableF();
 8002a6e:	f000 f8b1 	bl	8002bd4 <DisableF>
 8002a72:	e002      	b.n	8002a7a <CalculateTone+0x23a>
			return;
 8002a74:	bf00      	nop
 8002a76:	e000      	b.n	8002a7a <CalculateTone+0x23a>
		return;
 8002a78:	bf00      	nop
	}
}
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a80:	9999999a 	.word	0x9999999a
 8002a84:	3fb99999 	.word	0x3fb99999
 8002a88:	20000334 	.word	0x20000334
 8002a8c:	20000338 	.word	0x20000338
 8002a90:	00000000 	.word	0x00000000
 8002a94:	40001000 	.word	0x40001000

08002a98 <ApplyF>:
 *
 *
 * TIM2 is for PWM, so tone pitch and volume
 * TIM6 is for beeping, so the slow second modulation of this tone
 */
void ApplyF(unsigned int freq, float bps, uint8_t vol){
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	ed2d 8b02 	vpush	{d8}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	71fb      	strb	r3, [r7, #7]
	/*
	 * freq in Hz
	 * bps in float beeps, per seconds
	 * vol 1 - 10
	 */
	if(vol == 0){						// With no volume there is no need to play any sound
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <ApplyF+0x20>
		DisableF();
 8002ab2:	f000 f88f 	bl	8002bd4 <DisableF>
		return;
 8002ab6:	e073      	b.n	8002ba0 <ApplyF+0x108>
	}
	uint32_t period = 1000000/freq;				//new counter period = freq (in µs)
 8002ab8:	4a41      	ldr	r2, [pc, #260]	@ (8002bc0 <ApplyF+0x128>)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac0:	61fb      	str	r3, [r7, #28]
	uint32_t Bperiod = 40000.0f/(bps * 2.0); 	// * 2.0
 8002ac2:	68b8      	ldr	r0, [r7, #8]
 8002ac4:	f7fd fd38 	bl	8000538 <__aeabi_f2d>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	f7fd fbd6 	bl	800027c <__adddf3>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	a136      	add	r1, pc, #216	@ (adr r1, 8002bb0 <ApplyF+0x118>)
 8002ad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ada:	f7fd feaf 	bl	800083c <__aeabi_ddiv>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f7fe f82f 	bl	8000b48 <__aeabi_d2uiz>
 8002aea:	4603      	mov	r3, r0
 8002aec:	61bb      	str	r3, [r7, #24]
	uint32_t volume = (float)period / mapfloat((float)vol, 1.0, 10.0, 1000.0, 1.1);	//new pulse width = volume (max 1/2 freq)
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	ee07 3a90 	vmov	s15, r3
 8002afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b02:	ed9f 2a30 	vldr	s4, [pc, #192]	@ 8002bc4 <ApplyF+0x12c>
 8002b06:	eddf 1a30 	vldr	s3, [pc, #192]	@ 8002bc8 <ApplyF+0x130>
 8002b0a:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8002b0e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002b12:	eeb0 0a67 	vmov.f32	s0, s15
 8002b16:	f7ff fd6c 	bl	80025f2 <mapfloat>
 8002b1a:	eeb0 7a40 	vmov.f32	s14, s0
 8002b1e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b26:	ee17 3a90 	vmov	r3, s15
 8002b2a:	617b      	str	r3, [r7, #20]

	DisableF();							// Disable the sound, to not hear any weired sound while configer new sound
 8002b2c:	f000 f852 	bl	8002bd4 <DisableF>
	TIM2->ARR = period -1 ;				// Set Timer 2 to frequency we want to hear
 8002b30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if(TIM2->CNT >= TIM2->ARR)
 8002b3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d303      	bcc.n	8002b52 <ApplyF+0xba>
		TIM2->CNT = 0;
 8002b4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b4e:	2200      	movs	r2, #0
 8002b50:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CCR1 = volume;				// Set the Pulse width according the volume (PWM)
 8002b52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	6353      	str	r3, [r2, #52]	@ 0x34
	if(bps > 0.001){					// Only if there actually is "something"
 8002b5a:	68b8      	ldr	r0, [r7, #8]
 8002b5c:	f7fd fcec 	bl	8000538 <__aeabi_f2d>
 8002b60:	a315      	add	r3, pc, #84	@ (adr r3, 8002bb8 <ApplyF+0x120>)
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	f7fd ffcf 	bl	8000b08 <__aeabi_dcmpgt>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00c      	beq.n	8002b8a <ApplyF+0xf2>
		TIM6->CNT = 0;
 8002b70:	4b16      	ldr	r3, [pc, #88]	@ (8002bcc <ApplyF+0x134>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	625a      	str	r2, [r3, #36]	@ 0x24
		TIM6->ARR = Bperiod- 1;			// Set Timer 6 to the slow beep freq. modulated to the high pitch of TIM2
 8002b76:	4a15      	ldr	r2, [pc, #84]	@ (8002bcc <ApplyF+0x134>)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
		TIM6->CR1 |= 0x01;				//Enable  Timer 6
 8002b7e:	4b13      	ldr	r3, [pc, #76]	@ (8002bcc <ApplyF+0x134>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a12      	ldr	r2, [pc, #72]	@ (8002bcc <ApplyF+0x134>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6013      	str	r3, [r2, #0]
	}
	TIM2->CR1 |= 0x01;					// Enable  Timer 2
 8002b8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6013      	str	r3, [r2, #0]
	peepState = 1;						// write, that Buzzer is on
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd0 <ApplyF+0x138>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
}
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	ecbd 8b02 	vpop	{d8}
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	f3af 8000 	nop.w
 8002bb0:	00000000 	.word	0x00000000
 8002bb4:	40e38800 	.word	0x40e38800
 8002bb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002bbc:	3f50624d 	.word	0x3f50624d
 8002bc0:	000f4240 	.word	0x000f4240
 8002bc4:	3f8ccccd 	.word	0x3f8ccccd
 8002bc8:	447a0000 	.word	0x447a0000
 8002bcc:	40001000 	.word	0x40001000
 8002bd0:	200000b5 	.word	0x200000b5

08002bd4 <DisableF>:

extern inline void DisableF(void){		// Turn off both timers and make them ready for a smooth restart
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
	if(TIM2->CNT < TIM2->ARR){
 8002bd8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002bdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bde:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d206      	bcs.n	8002bf6 <DisableF+0x22>
		TIM2->CNT = TIM2->ARR + 1;		// Set Timer 2 actual counter to one above the auto-reload-level
 8002be8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	6253      	str	r3, [r2, #36]	@ 0x24
	}
	TIM6->CR1 &= 0xFE;					// Disable Timer
 8002bf6:	4b09      	ldr	r3, [pc, #36]	@ (8002c1c <DisableF+0x48>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a08      	ldr	r2, [pc, #32]	@ (8002c1c <DisableF+0x48>)
 8002bfc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002c00:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= 0xFE;					// Disable Timer
 8002c02:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002c0c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002c10:	6013      	str	r3, [r2, #0]
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	40001000 	.word	0x40001000

08002c20 <InitLcd>:

/*
 * TODO
 */
void InitLcd(){
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
	HD44780_Init(2);
 8002c24:	2002      	movs	r0, #2
 8002c26:	f7fe fe63 	bl	80018f0 <HD44780_Init>
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <UpdateLcd>:

/*
 * TODO
 */
void UpdateLcd(Lcd_t *tmpLcd){
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
	HD44780_SetCursor(0,0);
	HD44780_PrintStr("Welcome To");
	HD44780_SetCursor(0,1);
	HD44780_PrintStr("CircuitGator HQ");
	*/
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c46:	b672      	cpsid	i
}
 8002c48:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c4a:	bf00      	nop
 8002c4c:	e7fd      	b.n	8002c4a <Error_Handler+0x8>
	...

08002c50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	4b0f      	ldr	r3, [pc, #60]	@ (8002c94 <HAL_MspInit+0x44>)
 8002c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c94 <HAL_MspInit+0x44>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c62:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <HAL_MspInit+0x44>)
 8002c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c6e:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <HAL_MspInit+0x44>)
 8002c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c72:	4a08      	ldr	r2, [pc, #32]	@ (8002c94 <HAL_MspInit+0x44>)
 8002c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c7a:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <HAL_MspInit+0x44>)
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000

08002c98 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b0ac      	sub	sp, #176	@ 0xb0
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	2288      	movs	r2, #136	@ 0x88
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f006 faab 	bl	8009214 <memset>
  if(hadc->Instance==ADC1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a27      	ldr	r2, [pc, #156]	@ (8002d60 <HAL_ADC_MspInit+0xc8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d147      	bne.n	8002d58 <HAL_ADC_MspInit+0xc0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002cc8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ccc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002cce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002cd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002cde:	2308      	movs	r3, #8
 8002ce0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002ce2:	2307      	movs	r3, #7
 8002ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002cea:	2302      	movs	r3, #2
 8002cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002cee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cf2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f003 fc79 	bl	80065f0 <HAL_RCCEx_PeriphCLKConfig>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002d04:	f7ff ff9d 	bl	8002c42 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d08:	4b16      	ldr	r3, [pc, #88]	@ (8002d64 <HAL_ADC_MspInit+0xcc>)
 8002d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d0c:	4a15      	ldr	r2, [pc, #84]	@ (8002d64 <HAL_ADC_MspInit+0xcc>)
 8002d0e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d14:	4b13      	ldr	r3, [pc, #76]	@ (8002d64 <HAL_ADC_MspInit+0xcc>)
 8002d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d20:	4b10      	ldr	r3, [pc, #64]	@ (8002d64 <HAL_ADC_MspInit+0xcc>)
 8002d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d24:	4a0f      	ldr	r2, [pc, #60]	@ (8002d64 <HAL_ADC_MspInit+0xcc>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d64 <HAL_ADC_MspInit+0xcc>)
 8002d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Analog_IN_A0_ADC1_IN5_Pin;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d3e:	230b      	movs	r3, #11
 8002d40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(Analog_IN_A0_ADC1_IN5_GPIO_Port, &GPIO_InitStruct);
 8002d4a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d4e:	4619      	mov	r1, r3
 8002d50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d54:	f001 fe3e 	bl	80049d4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002d58:	bf00      	nop
 8002d5a:	37b0      	adds	r7, #176	@ 0xb0
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	50040000 	.word	0x50040000
 8002d64:	40021000 	.word	0x40021000

08002d68 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b0ac      	sub	sp, #176	@ 0xb0
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
 8002d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	2288      	movs	r2, #136	@ 0x88
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f006 fa43 	bl	8009214 <memset>
  if(hi2c->Instance==I2C1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a21      	ldr	r2, [pc, #132]	@ (8002e18 <HAL_I2C_MspInit+0xb0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d13b      	bne.n	8002e10 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d98:	2340      	movs	r3, #64	@ 0x40
 8002d9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	4618      	mov	r0, r3
 8002da6:	f003 fc23 	bl	80065f0 <HAL_RCCEx_PeriphCLKConfig>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002db0:	f7ff ff47 	bl	8002c42 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db4:	4b19      	ldr	r3, [pc, #100]	@ (8002e1c <HAL_I2C_MspInit+0xb4>)
 8002db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db8:	4a18      	ldr	r2, [pc, #96]	@ (8002e1c <HAL_I2C_MspInit+0xb4>)
 8002dba:	f043 0302 	orr.w	r3, r3, #2
 8002dbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dc0:	4b16      	ldr	r3, [pc, #88]	@ (8002e1c <HAL_I2C_MspInit+0xb4>)
 8002dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002dcc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002dd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dd4:	2312      	movs	r3, #18
 8002dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de0:	2303      	movs	r3, #3
 8002de2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002de6:	2304      	movs	r3, #4
 8002de8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002df0:	4619      	mov	r1, r3
 8002df2:	480b      	ldr	r0, [pc, #44]	@ (8002e20 <HAL_I2C_MspInit+0xb8>)
 8002df4:	f001 fdee 	bl	80049d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002df8:	4b08      	ldr	r3, [pc, #32]	@ (8002e1c <HAL_I2C_MspInit+0xb4>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	4a07      	ldr	r2, [pc, #28]	@ (8002e1c <HAL_I2C_MspInit+0xb4>)
 8002dfe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e04:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <HAL_I2C_MspInit+0xb4>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002e10:	bf00      	nop
 8002e12:	37b0      	adds	r7, #176	@ 0xb0
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40005400 	.word	0x40005400
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	48000400 	.word	0x48000400

08002e24 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e34:	d10c      	bne.n	8002e50 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e36:	4b15      	ldr	r3, [pc, #84]	@ (8002e8c <HAL_TIM_Base_MspInit+0x68>)
 8002e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3a:	4a14      	ldr	r2, [pc, #80]	@ (8002e8c <HAL_TIM_Base_MspInit+0x68>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e42:	4b12      	ldr	r3, [pc, #72]	@ (8002e8c <HAL_TIM_Base_MspInit+0x68>)
 8002e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002e4e:	e018      	b.n	8002e82 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a0e      	ldr	r2, [pc, #56]	@ (8002e90 <HAL_TIM_Base_MspInit+0x6c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d113      	bne.n	8002e82 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e8c <HAL_TIM_Base_MspInit+0x68>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e8c <HAL_TIM_Base_MspInit+0x68>)
 8002e60:	f043 0310 	orr.w	r3, r3, #16
 8002e64:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e66:	4b09      	ldr	r3, [pc, #36]	@ (8002e8c <HAL_TIM_Base_MspInit+0x68>)
 8002e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2100      	movs	r1, #0
 8002e76:	2036      	movs	r0, #54	@ 0x36
 8002e78:	f001 fd75 	bl	8004966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e7c:	2036      	movs	r0, #54	@ 0x36
 8002e7e:	f001 fd8e 	bl	800499e <HAL_NVIC_EnableIRQ>
}
 8002e82:	bf00      	nop
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40001000 	.word	0x40001000

08002e94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08a      	sub	sp, #40	@ 0x28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9c:	f107 0314 	add.w	r3, r7, #20
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eb4:	d13a      	bne.n	8002f2c <HAL_TIM_MspPostInit+0x98>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002f34 <HAL_TIM_MspPostInit+0xa0>)
 8002eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eba:	4a1e      	ldr	r2, [pc, #120]	@ (8002f34 <HAL_TIM_MspPostInit+0xa0>)
 8002ebc:	f043 0302 	orr.w	r3, r3, #2
 8002ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8002f34 <HAL_TIM_MspPostInit+0xa0>)
 8002ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ece:	4b19      	ldr	r3, [pc, #100]	@ (8002f34 <HAL_TIM_MspPostInit+0xa0>)
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed2:	4a18      	ldr	r2, [pc, #96]	@ (8002f34 <HAL_TIM_MspPostInit+0xa0>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eda:	4b16      	ldr	r3, [pc, #88]	@ (8002f34 <HAL_TIM_MspPostInit+0xa0>)
 8002edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ee6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eec:	2302      	movs	r3, #2
 8002eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efc:	f107 0314 	add.w	r3, r7, #20
 8002f00:	4619      	mov	r1, r3
 8002f02:	480d      	ldr	r0, [pc, #52]	@ (8002f38 <HAL_TIM_MspPostInit+0xa4>)
 8002f04:	f001 fd66 	bl	80049d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002f08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f16:	2300      	movs	r3, #0
 8002f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1e:	f107 0314 	add.w	r3, r7, #20
 8002f22:	4619      	mov	r1, r3
 8002f24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f28:	f001 fd54 	bl	80049d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002f2c:	bf00      	nop
 8002f2e:	3728      	adds	r7, #40	@ 0x28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021000 	.word	0x40021000
 8002f38:	48000400 	.word	0x48000400

08002f3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b0ac      	sub	sp, #176	@ 0xb0
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f44:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	2288      	movs	r2, #136	@ 0x88
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f006 f959 	bl	8009214 <memset>
  if(huart->Instance==USART2)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a21      	ldr	r2, [pc, #132]	@ (8002fec <HAL_UART_MspInit+0xb0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d13b      	bne.n	8002fe4 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f70:	2300      	movs	r3, #0
 8002f72:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f003 fb39 	bl	80065f0 <HAL_RCCEx_PeriphCLKConfig>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f84:	f7ff fe5d 	bl	8002c42 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f88:	4b19      	ldr	r3, [pc, #100]	@ (8002ff0 <HAL_UART_MspInit+0xb4>)
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8c:	4a18      	ldr	r2, [pc, #96]	@ (8002ff0 <HAL_UART_MspInit+0xb4>)
 8002f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f92:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f94:	4b16      	ldr	r3, [pc, #88]	@ (8002ff0 <HAL_UART_MspInit+0xb4>)
 8002f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa0:	4b13      	ldr	r3, [pc, #76]	@ (8002ff0 <HAL_UART_MspInit+0xb4>)
 8002fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa4:	4a12      	ldr	r2, [pc, #72]	@ (8002ff0 <HAL_UART_MspInit+0xb4>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fac:	4b10      	ldr	r3, [pc, #64]	@ (8002ff0 <HAL_UART_MspInit+0xb4>)
 8002fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb0:	f003 0301 	and.w	r3, r3, #1
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002fb8:	230c      	movs	r3, #12
 8002fba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fd0:	2307      	movs	r3, #7
 8002fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002fda:	4619      	mov	r1, r3
 8002fdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fe0:	f001 fcf8 	bl	80049d4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002fe4:	bf00      	nop
 8002fe6:	37b0      	adds	r7, #176	@ 0xb0
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40004400 	.word	0x40004400
 8002ff0:	40021000 	.word	0x40021000

08002ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ff8:	bf00      	nop
 8002ffa:	e7fd      	b.n	8002ff8 <NMI_Handler+0x4>

08002ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003000:	bf00      	nop
 8003002:	e7fd      	b.n	8003000 <HardFault_Handler+0x4>

08003004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003008:	bf00      	nop
 800300a:	e7fd      	b.n	8003008 <MemManage_Handler+0x4>

0800300c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003010:	bf00      	nop
 8003012:	e7fd      	b.n	8003010 <BusFault_Handler+0x4>

08003014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003018:	bf00      	nop
 800301a:	e7fd      	b.n	8003018 <UsageFault_Handler+0x4>

0800301c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800304a:	f000 f94b 	bl	80032e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003058:	4803      	ldr	r0, [pc, #12]	@ (8003068 <TIM6_DAC_IRQHandler+0x14>)
 800305a:	f004 f9b5 	bl	80073c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  PeepTimCallback();
 800305e:	f7fe fdfb 	bl	8001c58 <PeepTimCallback>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	200001bc 	.word	0x200001bc

0800306c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	e00a      	b.n	8003094 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800307e:	f3af 8000 	nop.w
 8003082:	4601      	mov	r1, r0
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	60ba      	str	r2, [r7, #8]
 800308a:	b2ca      	uxtb	r2, r1
 800308c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	3301      	adds	r3, #1
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	429a      	cmp	r2, r3
 800309a:	dbf0      	blt.n	800307e <_read+0x12>
  }

  return len;
 800309c:	687b      	ldr	r3, [r7, #4]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b086      	sub	sp, #24
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	e009      	b.n	80030cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	60ba      	str	r2, [r7, #8]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	3301      	adds	r3, #1
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	dbf1      	blt.n	80030b8 <_write+0x12>
  }
  return len;
 80030d4:	687b      	ldr	r3, [r7, #4]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <_close>:

int _close(int file)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003106:	605a      	str	r2, [r3, #4]
  return 0;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <_isatty>:

int _isatty(int file)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800311e:	2301      	movs	r3, #1
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003150:	4a14      	ldr	r2, [pc, #80]	@ (80031a4 <_sbrk+0x5c>)
 8003152:	4b15      	ldr	r3, [pc, #84]	@ (80031a8 <_sbrk+0x60>)
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800315c:	4b13      	ldr	r3, [pc, #76]	@ (80031ac <_sbrk+0x64>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d102      	bne.n	800316a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003164:	4b11      	ldr	r3, [pc, #68]	@ (80031ac <_sbrk+0x64>)
 8003166:	4a12      	ldr	r2, [pc, #72]	@ (80031b0 <_sbrk+0x68>)
 8003168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800316a:	4b10      	ldr	r3, [pc, #64]	@ (80031ac <_sbrk+0x64>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	429a      	cmp	r2, r3
 8003176:	d207      	bcs.n	8003188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003178:	f006 f89a 	bl	80092b0 <__errno>
 800317c:	4603      	mov	r3, r0
 800317e:	220c      	movs	r2, #12
 8003180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003182:	f04f 33ff 	mov.w	r3, #4294967295
 8003186:	e009      	b.n	800319c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003188:	4b08      	ldr	r3, [pc, #32]	@ (80031ac <_sbrk+0x64>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800318e:	4b07      	ldr	r3, [pc, #28]	@ (80031ac <_sbrk+0x64>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	4a05      	ldr	r2, [pc, #20]	@ (80031ac <_sbrk+0x64>)
 8003198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800319a:	68fb      	ldr	r3, [r7, #12]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20018000 	.word	0x20018000
 80031a8:	00000400 	.word	0x00000400
 80031ac:	2000033c 	.word	0x2000033c
 80031b0:	20000490 	.word	0x20000490

080031b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80031b8:	4b06      	ldr	r3, [pc, #24]	@ (80031d4 <SystemInit+0x20>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031be:	4a05      	ldr	r2, [pc, #20]	@ (80031d4 <SystemInit+0x20>)
 80031c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80031d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003210 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80031dc:	f7ff ffea 	bl	80031b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031e0:	480c      	ldr	r0, [pc, #48]	@ (8003214 <LoopForever+0x6>)
  ldr r1, =_edata
 80031e2:	490d      	ldr	r1, [pc, #52]	@ (8003218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80031e4:	4a0d      	ldr	r2, [pc, #52]	@ (800321c <LoopForever+0xe>)
  movs r3, #0
 80031e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031e8:	e002      	b.n	80031f0 <LoopCopyDataInit>

080031ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ee:	3304      	adds	r3, #4

080031f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031f4:	d3f9      	bcc.n	80031ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031f8:	4c0a      	ldr	r4, [pc, #40]	@ (8003224 <LoopForever+0x16>)
  movs r3, #0
 80031fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031fc:	e001      	b.n	8003202 <LoopFillZerobss>

080031fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003200:	3204      	adds	r2, #4

08003202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003204:	d3fb      	bcc.n	80031fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003206:	f006 f859 	bl	80092bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800320a:	f7fe fd4b 	bl	8001ca4 <main>

0800320e <LoopForever>:

LoopForever:
    b LoopForever
 800320e:	e7fe      	b.n	800320e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003210:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003218:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800321c:	0800ad40 	.word	0x0800ad40
  ldr r2, =_sbss
 8003220:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003224:	20000490 	.word	0x20000490

08003228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003228:	e7fe      	b.n	8003228 <ADC1_2_IRQHandler>
	...

0800322c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003236:	4b0c      	ldr	r3, [pc, #48]	@ (8003268 <HAL_Init+0x3c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a0b      	ldr	r2, [pc, #44]	@ (8003268 <HAL_Init+0x3c>)
 800323c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003240:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003242:	2003      	movs	r0, #3
 8003244:	f001 fb84 	bl	8004950 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003248:	2000      	movs	r0, #0
 800324a:	f000 f80f 	bl	800326c <HAL_InitTick>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	71fb      	strb	r3, [r7, #7]
 8003258:	e001      	b.n	800325e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800325a:	f7ff fcf9 	bl	8002c50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800325e:	79fb      	ldrb	r3, [r7, #7]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40022000 	.word	0x40022000

0800326c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003278:	4b17      	ldr	r3, [pc, #92]	@ (80032d8 <HAL_InitTick+0x6c>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d023      	beq.n	80032c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003280:	4b16      	ldr	r3, [pc, #88]	@ (80032dc <HAL_InitTick+0x70>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b14      	ldr	r3, [pc, #80]	@ (80032d8 <HAL_InitTick+0x6c>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4619      	mov	r1, r3
 800328a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800328e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003292:	fbb2 f3f3 	udiv	r3, r2, r3
 8003296:	4618      	mov	r0, r3
 8003298:	f001 fb8f 	bl	80049ba <HAL_SYSTICK_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10f      	bne.n	80032c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b0f      	cmp	r3, #15
 80032a6:	d809      	bhi.n	80032bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032a8:	2200      	movs	r2, #0
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295
 80032b0:	f001 fb59 	bl	8004966 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032b4:	4a0a      	ldr	r2, [pc, #40]	@ (80032e0 <HAL_InitTick+0x74>)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e007      	b.n	80032cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]
 80032c0:	e004      	b.n	80032cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	73fb      	strb	r3, [r7, #15]
 80032c6:	e001      	b.n	80032cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000018 	.word	0x20000018
 80032dc:	20000010 	.word	0x20000010
 80032e0:	20000014 	.word	0x20000014

080032e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032e8:	4b06      	ldr	r3, [pc, #24]	@ (8003304 <HAL_IncTick+0x20>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	4b06      	ldr	r3, [pc, #24]	@ (8003308 <HAL_IncTick+0x24>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4413      	add	r3, r2
 80032f4:	4a04      	ldr	r2, [pc, #16]	@ (8003308 <HAL_IncTick+0x24>)
 80032f6:	6013      	str	r3, [r2, #0]
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000018 	.word	0x20000018
 8003308:	20000340 	.word	0x20000340

0800330c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return uwTick;
 8003310:	4b03      	ldr	r3, [pc, #12]	@ (8003320 <HAL_GetTick+0x14>)
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000340 	.word	0x20000340

08003324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800332c:	f7ff ffee 	bl	800330c <HAL_GetTick>
 8003330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d005      	beq.n	800334a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800333e:	4b0a      	ldr	r3, [pc, #40]	@ (8003368 <HAL_Delay+0x44>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4413      	add	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800334a:	bf00      	nop
 800334c:	f7ff ffde 	bl	800330c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	429a      	cmp	r2, r3
 800335a:	d8f7      	bhi.n	800334c <HAL_Delay+0x28>
  {
  }
}
 800335c:	bf00      	nop
 800335e:	bf00      	nop
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000018 	.word	0x20000018

0800336c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	609a      	str	r2, [r3, #8]
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	609a      	str	r2, [r3, #8]
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3360      	adds	r3, #96	@ 0x60
 80033e6:	461a      	mov	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b08      	ldr	r3, [pc, #32]	@ (8003418 <LL_ADC_SetOffset+0x44>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	4313      	orrs	r3, r2
 8003404:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800340c:	bf00      	nop
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	03fff000 	.word	0x03fff000

0800341c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3360      	adds	r3, #96	@ 0x60
 800342a:	461a      	mov	r2, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	3360      	adds	r3, #96	@ 0x60
 8003458:	461a      	mov	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	431a      	orrs	r2, r3
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3330      	adds	r3, #48	@ 0x30
 80034b4:	461a      	mov	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	0a1b      	lsrs	r3, r3, #8
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	4413      	add	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	211f      	movs	r1, #31
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	401a      	ands	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	0e9b      	lsrs	r3, r3, #26
 80034dc:	f003 011f 	and.w	r1, r3, #31
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	431a      	orrs	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80034f0:	bf00      	nop
 80034f2:	371c      	adds	r7, #28
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3314      	adds	r3, #20
 800350c:	461a      	mov	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	0e5b      	lsrs	r3, r3, #25
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	4413      	add	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	0d1b      	lsrs	r3, r3, #20
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2107      	movs	r1, #7
 800352a:	fa01 f303 	lsl.w	r3, r1, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	401a      	ands	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	0d1b      	lsrs	r3, r3, #20
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	fa01 f303 	lsl.w	r3, r1, r3
 8003540:	431a      	orrs	r2, r3
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003546:	bf00      	nop
 8003548:	371c      	adds	r7, #28
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800356c:	43db      	mvns	r3, r3
 800356e:	401a      	ands	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f003 0318 	and.w	r3, r3, #24
 8003576:	4908      	ldr	r1, [pc, #32]	@ (8003598 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003578:	40d9      	lsrs	r1, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	400b      	ands	r3, r1
 800357e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003582:	431a      	orrs	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	0007ffff 	.word	0x0007ffff

0800359c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 031f 	and.w	r3, r3, #31
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80035e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6093      	str	r3, [r2, #8]
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003608:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800360c:	d101      	bne.n	8003612 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003630:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003634:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003658:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800365c:	d101      	bne.n	8003662 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003680:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003684:	f043 0201 	orr.w	r2, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <LL_ADC_IsEnabled+0x18>
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <LL_ADC_IsEnabled+0x1a>
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036ce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036d2:	f043 0204 	orr.w	r2, r3, #4
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d101      	bne.n	80036fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b08      	cmp	r3, #8
 800371e:	d101      	bne.n	8003724 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003720:	2301      	movs	r3, #1
 8003722:	e000      	b.n	8003726 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b089      	sub	sp, #36	@ 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e130      	b.n	80039b0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003758:	2b00      	cmp	r3, #0
 800375a:	d109      	bne.n	8003770 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff fa9b 	bl	8002c98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff ff3f 	bl	80035f8 <LL_ADC_IsDeepPowerDownEnabled>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d004      	beq.n	800378a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff ff25 	bl	80035d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff ff5a 	bl	8003648 <LL_ADC_IsInternalRegulatorEnabled>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d115      	bne.n	80037c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff ff3e 	bl	8003620 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037a4:	4b84      	ldr	r3, [pc, #528]	@ (80039b8 <HAL_ADC_Init+0x284>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	099b      	lsrs	r3, r3, #6
 80037aa:	4a84      	ldr	r2, [pc, #528]	@ (80039bc <HAL_ADC_Init+0x288>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	099b      	lsrs	r3, r3, #6
 80037b2:	3301      	adds	r3, #1
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80037b8:	e002      	b.n	80037c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3b01      	subs	r3, #1
 80037be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f9      	bne.n	80037ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff ff3c 	bl	8003648 <LL_ADC_IsInternalRegulatorEnabled>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10d      	bne.n	80037f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037da:	f043 0210 	orr.w	r2, r3, #16
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e6:	f043 0201 	orr.w	r2, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff ff75 	bl	80036e6 <LL_ADC_REG_IsConversionOngoing>
 80037fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	f040 80c9 	bne.w	800399e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 80c5 	bne.w	800399e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003818:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800381c:	f043 0202 	orr.w	r2, r3, #2
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff ff35 	bl	8003698 <LL_ADC_IsEnabled>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d115      	bne.n	8003860 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003834:	4862      	ldr	r0, [pc, #392]	@ (80039c0 <HAL_ADC_Init+0x28c>)
 8003836:	f7ff ff2f 	bl	8003698 <LL_ADC_IsEnabled>
 800383a:	4604      	mov	r4, r0
 800383c:	4861      	ldr	r0, [pc, #388]	@ (80039c4 <HAL_ADC_Init+0x290>)
 800383e:	f7ff ff2b 	bl	8003698 <LL_ADC_IsEnabled>
 8003842:	4603      	mov	r3, r0
 8003844:	431c      	orrs	r4, r3
 8003846:	4860      	ldr	r0, [pc, #384]	@ (80039c8 <HAL_ADC_Init+0x294>)
 8003848:	f7ff ff26 	bl	8003698 <LL_ADC_IsEnabled>
 800384c:	4603      	mov	r3, r0
 800384e:	4323      	orrs	r3, r4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d105      	bne.n	8003860 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4619      	mov	r1, r3
 800385a:	485c      	ldr	r0, [pc, #368]	@ (80039cc <HAL_ADC_Init+0x298>)
 800385c:	f7ff fd86 	bl	800336c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	7e5b      	ldrb	r3, [r3, #25]
 8003864:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800386a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003870:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003876:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800387e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3020 	ldrb.w	r3, [r3, #32]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d106      	bne.n	800389c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	3b01      	subs	r3, #1
 8003894:	045b      	lsls	r3, r3, #17
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d009      	beq.n	80038b8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	4b44      	ldr	r3, [pc, #272]	@ (80039d0 <HAL_ADC_Init+0x29c>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	69b9      	ldr	r1, [r7, #24]
 80038c8:	430b      	orrs	r3, r1
 80038ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff1b 	bl	800370c <LL_ADC_INJ_IsConversionOngoing>
 80038d6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d13d      	bne.n	800395a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d13a      	bne.n	800395a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80038e8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80038f0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003900:	f023 0302 	bic.w	r3, r3, #2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	69b9      	ldr	r1, [r7, #24]
 800390a:	430b      	orrs	r3, r1
 800390c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003914:	2b01      	cmp	r3, #1
 8003916:	d118      	bne.n	800394a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003922:	f023 0304 	bic.w	r3, r3, #4
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800392e:	4311      	orrs	r1, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003934:	4311      	orrs	r1, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800393a:	430a      	orrs	r2, r1
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	611a      	str	r2, [r3, #16]
 8003948:	e007      	b.n	800395a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0201 	bic.w	r2, r2, #1
 8003958:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d10c      	bne.n	800397c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003968:	f023 010f 	bic.w	r1, r3, #15
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	1e5a      	subs	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	631a      	str	r2, [r3, #48]	@ 0x30
 800397a:	e007      	b.n	800398c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 020f 	bic.w	r2, r2, #15
 800398a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003990:	f023 0303 	bic.w	r3, r3, #3
 8003994:	f043 0201 	orr.w	r2, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	655a      	str	r2, [r3, #84]	@ 0x54
 800399c:	e007      	b.n	80039ae <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a2:	f043 0210 	orr.w	r2, r3, #16
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80039ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3724      	adds	r7, #36	@ 0x24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd90      	pop	{r4, r7, pc}
 80039b8:	20000010 	.word	0x20000010
 80039bc:	053e2d63 	.word	0x053e2d63
 80039c0:	50040000 	.word	0x50040000
 80039c4:	50040100 	.word	0x50040100
 80039c8:	50040200 	.word	0x50040200
 80039cc:	50040300 	.word	0x50040300
 80039d0:	fff0c007 	.word	0xfff0c007

080039d4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039dc:	4857      	ldr	r0, [pc, #348]	@ (8003b3c <HAL_ADC_Start+0x168>)
 80039de:	f7ff fddd 	bl	800359c <LL_ADC_GetMultimode>
 80039e2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff fe7c 	bl	80036e6 <LL_ADC_REG_IsConversionOngoing>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f040 809c 	bne.w	8003b2e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_ADC_Start+0x30>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e097      	b.n	8003b34 <HAL_ADC_Start+0x160>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fd73 	bl	80044f8 <ADC_Enable>
 8003a12:	4603      	mov	r3, r0
 8003a14:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f040 8083 	bne.w	8003b24 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a42      	ldr	r2, [pc, #264]	@ (8003b40 <HAL_ADC_Start+0x16c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d002      	beq.n	8003a42 <HAL_ADC_Start+0x6e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	e000      	b.n	8003a44 <HAL_ADC_Start+0x70>
 8003a42:	4b40      	ldr	r3, [pc, #256]	@ (8003b44 <HAL_ADC_Start+0x170>)
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d002      	beq.n	8003a52 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d105      	bne.n	8003a5e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a56:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a6a:	d106      	bne.n	8003a7a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a70:	f023 0206 	bic.w	r2, r3, #6
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a78:	e002      	b.n	8003a80 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	221c      	movs	r2, #28
 8003a86:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a2a      	ldr	r2, [pc, #168]	@ (8003b40 <HAL_ADC_Start+0x16c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d002      	beq.n	8003aa0 <HAL_ADC_Start+0xcc>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	e000      	b.n	8003aa2 <HAL_ADC_Start+0xce>
 8003aa0:	4b28      	ldr	r3, [pc, #160]	@ (8003b44 <HAL_ADC_Start+0x170>)
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6812      	ldr	r2, [r2, #0]
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d008      	beq.n	8003abc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	2b05      	cmp	r3, #5
 8003ab4:	d002      	beq.n	8003abc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	2b09      	cmp	r3, #9
 8003aba:	d114      	bne.n	8003ae6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ace:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003ad2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fded 	bl	80036be <LL_ADC_REG_StartConversion>
 8003ae4:	e025      	b.n	8003b32 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a12      	ldr	r2, [pc, #72]	@ (8003b40 <HAL_ADC_Start+0x16c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d002      	beq.n	8003b02 <HAL_ADC_Start+0x12e>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	e000      	b.n	8003b04 <HAL_ADC_Start+0x130>
 8003b02:	4b10      	ldr	r3, [pc, #64]	@ (8003b44 <HAL_ADC_Start+0x170>)
 8003b04:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00f      	beq.n	8003b32 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b16:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b1a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	655a      	str	r2, [r3, #84]	@ 0x54
 8003b22:	e006      	b.n	8003b32 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003b2c:	e001      	b.n	8003b32 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	50040300 	.word	0x50040300
 8003b40:	50040100 	.word	0x50040100
 8003b44:	50040000 	.word	0x50040000

08003b48 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b52:	4866      	ldr	r0, [pc, #408]	@ (8003cec <HAL_ADC_PollForConversion+0x1a4>)
 8003b54:	f7ff fd22 	bl	800359c <LL_ADC_GetMultimode>
 8003b58:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d102      	bne.n	8003b68 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003b62:	2308      	movs	r3, #8
 8003b64:	61fb      	str	r3, [r7, #28]
 8003b66:	e02a      	b.n	8003bbe <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b05      	cmp	r3, #5
 8003b72:	d002      	beq.n	8003b7a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b09      	cmp	r3, #9
 8003b78:	d111      	bne.n	8003b9e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d007      	beq.n	8003b98 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b8c:	f043 0220 	orr.w	r2, r3, #32
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0a4      	b.n	8003ce2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003b98:	2304      	movs	r3, #4
 8003b9a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003b9c:	e00f      	b.n	8003bbe <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b9e:	4853      	ldr	r0, [pc, #332]	@ (8003cec <HAL_ADC_PollForConversion+0x1a4>)
 8003ba0:	f7ff fd0a 	bl	80035b8 <LL_ADC_GetMultiDMATransfer>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d007      	beq.n	8003bba <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bae:	f043 0220 	orr.w	r2, r3, #32
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e093      	b.n	8003ce2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003bba:	2304      	movs	r3, #4
 8003bbc:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003bbe:	f7ff fba5 	bl	800330c <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003bc4:	e021      	b.n	8003c0a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bcc:	d01d      	beq.n	8003c0a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003bce:	f7ff fb9d 	bl	800330c <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d302      	bcc.n	8003be4 <HAL_ADC_PollForConversion+0x9c>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d112      	bne.n	8003c0a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10b      	bne.n	8003c0a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf6:	f043 0204 	orr.w	r2, r3, #4
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e06b      	b.n	8003ce2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0d6      	beq.n	8003bc6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c1c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff fc28 	bl	800347e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01c      	beq.n	8003c6e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	7e5b      	ldrb	r3, [r3, #25]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d118      	bne.n	8003c6e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d111      	bne.n	8003c6e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d105      	bne.n	8003c6e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c66:	f043 0201 	orr.w	r2, r3, #1
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1f      	ldr	r2, [pc, #124]	@ (8003cf0 <HAL_ADC_PollForConversion+0x1a8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d002      	beq.n	8003c7e <HAL_ADC_PollForConversion+0x136>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	e000      	b.n	8003c80 <HAL_ADC_PollForConversion+0x138>
 8003c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf4 <HAL_ADC_PollForConversion+0x1ac>)
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d008      	beq.n	8003c9a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b05      	cmp	r3, #5
 8003c92:	d002      	beq.n	8003c9a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2b09      	cmp	r3, #9
 8003c98:	d104      	bne.n	8003ca4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	e00c      	b.n	8003cbe <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a11      	ldr	r2, [pc, #68]	@ (8003cf0 <HAL_ADC_PollForConversion+0x1a8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d002      	beq.n	8003cb4 <HAL_ADC_PollForConversion+0x16c>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	e000      	b.n	8003cb6 <HAL_ADC_PollForConversion+0x16e>
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf4 <HAL_ADC_PollForConversion+0x1ac>)
 8003cb6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d104      	bne.n	8003cce <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2208      	movs	r2, #8
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	e008      	b.n	8003ce0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d103      	bne.n	8003ce0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	220c      	movs	r2, #12
 8003cde:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	50040300 	.word	0x50040300
 8003cf0:	50040100 	.word	0x50040100
 8003cf4:	50040000 	.word	0x50040000

08003cf8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b0b6      	sub	sp, #216	@ 0xd8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x22>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e3c9      	b.n	80044ca <HAL_ADC_ConfigChannel+0x7b6>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fccf 	bl	80036e6 <LL_ADC_REG_IsConversionOngoing>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 83aa 	bne.w	80044a4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b05      	cmp	r3, #5
 8003d5e:	d824      	bhi.n	8003daa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	3b02      	subs	r3, #2
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d81b      	bhi.n	8003da2 <HAL_ADC_ConfigChannel+0x8e>
 8003d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d70 <HAL_ADC_ConfigChannel+0x5c>)
 8003d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d70:	08003d81 	.word	0x08003d81
 8003d74:	08003d89 	.word	0x08003d89
 8003d78:	08003d91 	.word	0x08003d91
 8003d7c:	08003d99 	.word	0x08003d99
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003d80:	230c      	movs	r3, #12
 8003d82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003d86:	e010      	b.n	8003daa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003d88:	2312      	movs	r3, #18
 8003d8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003d8e:	e00c      	b.n	8003daa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003d90:	2318      	movs	r3, #24
 8003d92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003d96:	e008      	b.n	8003daa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003d98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003da0:	e003      	b.n	8003daa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003da2:	2306      	movs	r3, #6
 8003da4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003da8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003db8:	f7ff fb74 	bl	80034a4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fc90 	bl	80036e6 <LL_ADC_REG_IsConversionOngoing>
 8003dc6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fc9c 	bl	800370c <LL_ADC_INJ_IsConversionOngoing>
 8003dd4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f040 81a4 	bne.w	800412a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003de2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f040 819f 	bne.w	800412a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	6819      	ldr	r1, [r3, #0]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	f7ff fb7f 	bl	80034fc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	08db      	lsrs	r3, r3, #3
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d00a      	beq.n	8003e36 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6919      	ldr	r1, [r3, #16]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e30:	f7ff fad0 	bl	80033d4 <LL_ADC_SetOffset>
 8003e34:	e179      	b.n	800412a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff faed 	bl	800341c <LL_ADC_GetOffsetChannel>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x14e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2100      	movs	r1, #0
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff fae2 	bl	800341c <LL_ADC_GetOffsetChannel>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	0e9b      	lsrs	r3, r3, #26
 8003e5c:	f003 021f 	and.w	r2, r3, #31
 8003e60:	e01e      	b.n	8003ea0 <HAL_ADC_ConfigChannel+0x18c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2100      	movs	r1, #0
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fad7 	bl	800341c <LL_ADC_GetOffsetChannel>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e78:	fa93 f3a3 	rbit	r3, r3
 8003e7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003e90:	2320      	movs	r3, #32
 8003e92:	e004      	b.n	8003e9e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003e94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003e98:	fab3 f383 	clz	r3, r3
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x1a4>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	0e9b      	lsrs	r3, r3, #26
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	e018      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1d6>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ec4:	fa93 f3a3 	rbit	r3, r3
 8003ec8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003ecc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003ed4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003edc:	2320      	movs	r3, #32
 8003ede:	e004      	b.n	8003eea <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003ee0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003ee4:	fab3 f383 	clz	r3, r3
 8003ee8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d106      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff faa6 	bl	8003448 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2101      	movs	r1, #1
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff fa8a 	bl	800341c <LL_ADC_GetOffsetChannel>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x214>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2101      	movs	r1, #1
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff fa7f 	bl	800341c <LL_ADC_GetOffsetChannel>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	0e9b      	lsrs	r3, r3, #26
 8003f22:	f003 021f 	and.w	r2, r3, #31
 8003f26:	e01e      	b.n	8003f66 <HAL_ADC_ConfigChannel+0x252>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fa74 	bl	800341c <LL_ADC_GetOffsetChannel>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f3e:	fa93 f3a3 	rbit	r3, r3
 8003f42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003f46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003f4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003f56:	2320      	movs	r3, #32
 8003f58:	e004      	b.n	8003f64 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f5e:	fab3 f383 	clz	r3, r3
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d105      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x26a>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	0e9b      	lsrs	r3, r3, #26
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	e018      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x29c>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f8a:	fa93 f3a3 	rbit	r3, r3
 8003f8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003f9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003fa2:	2320      	movs	r3, #32
 8003fa4:	e004      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003fa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003faa:	fab3 f383 	clz	r3, r3
 8003fae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d106      	bne.n	8003fc2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2101      	movs	r1, #1
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fa43 	bl	8003448 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fa27 	bl	800341c <LL_ADC_GetOffsetChannel>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <HAL_ADC_ConfigChannel+0x2da>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2102      	movs	r1, #2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff fa1c 	bl	800341c <LL_ADC_GetOffsetChannel>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	0e9b      	lsrs	r3, r3, #26
 8003fe8:	f003 021f 	and.w	r2, r3, #31
 8003fec:	e01e      	b.n	800402c <HAL_ADC_ConfigChannel+0x318>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2102      	movs	r1, #2
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fa11 	bl	800341c <LL_ADC_GetOffsetChannel>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004000:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004004:	fa93 f3a3 	rbit	r3, r3
 8004008:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800400c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004010:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004014:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800401c:	2320      	movs	r3, #32
 800401e:	e004      	b.n	800402a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004020:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004024:	fab3 f383 	clz	r3, r3
 8004028:	b2db      	uxtb	r3, r3
 800402a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004034:	2b00      	cmp	r3, #0
 8004036:	d105      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x330>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	0e9b      	lsrs	r3, r3, #26
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	e014      	b.n	800406e <HAL_ADC_ConfigChannel+0x35a>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800404c:	fa93 f3a3 	rbit	r3, r3
 8004050:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004052:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004054:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004058:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004060:	2320      	movs	r3, #32
 8004062:	e004      	b.n	800406e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004064:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004068:	fab3 f383 	clz	r3, r3
 800406c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800406e:	429a      	cmp	r2, r3
 8004070:	d106      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2200      	movs	r2, #0
 8004078:	2102      	movs	r1, #2
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff f9e4 	bl	8003448 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2103      	movs	r1, #3
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff f9c8 	bl	800341c <LL_ADC_GetOffsetChannel>
 800408c:	4603      	mov	r3, r0
 800408e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x398>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2103      	movs	r1, #3
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff f9bd 	bl	800341c <LL_ADC_GetOffsetChannel>
 80040a2:	4603      	mov	r3, r0
 80040a4:	0e9b      	lsrs	r3, r3, #26
 80040a6:	f003 021f 	and.w	r2, r3, #31
 80040aa:	e017      	b.n	80040dc <HAL_ADC_ConfigChannel+0x3c8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2103      	movs	r1, #3
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff f9b2 	bl	800341c <LL_ADC_GetOffsetChannel>
 80040b8:	4603      	mov	r3, r0
 80040ba:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040be:	fa93 f3a3 	rbit	r3, r3
 80040c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80040c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040c6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80040c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80040ce:	2320      	movs	r3, #32
 80040d0:	e003      	b.n	80040da <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80040d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040d4:	fab3 f383 	clz	r3, r3
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d105      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x3e0>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	0e9b      	lsrs	r3, r3, #26
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	e011      	b.n	8004118 <HAL_ADC_ConfigChannel+0x404>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004102:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004104:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004106:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800410c:	2320      	movs	r3, #32
 800410e:	e003      	b.n	8004118 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004110:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004118:	429a      	cmp	r2, r3
 800411a:	d106      	bne.n	800412a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2200      	movs	r2, #0
 8004122:	2103      	movs	r1, #3
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff f98f 	bl	8003448 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff fab2 	bl	8003698 <LL_ADC_IsEnabled>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	f040 8140 	bne.w	80043bc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	6819      	ldr	r1, [r3, #0]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	461a      	mov	r2, r3
 800414a:	f7ff fa03 	bl	8003554 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	4a8f      	ldr	r2, [pc, #572]	@ (8004390 <HAL_ADC_ConfigChannel+0x67c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	f040 8131 	bne.w	80043bc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10b      	bne.n	8004182 <HAL_ADC_ConfigChannel+0x46e>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	0e9b      	lsrs	r3, r3, #26
 8004170:	3301      	adds	r3, #1
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	2b09      	cmp	r3, #9
 8004178:	bf94      	ite	ls
 800417a:	2301      	movls	r3, #1
 800417c:	2300      	movhi	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	e019      	b.n	80041b6 <HAL_ADC_ConfigChannel+0x4a2>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004188:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800418a:	fa93 f3a3 	rbit	r3, r3
 800418e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004192:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004194:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800419a:	2320      	movs	r3, #32
 800419c:	e003      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800419e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041a0:	fab3 f383 	clz	r3, r3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	3301      	adds	r3, #1
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	2b09      	cmp	r3, #9
 80041ae:	bf94      	ite	ls
 80041b0:	2301      	movls	r3, #1
 80041b2:	2300      	movhi	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d079      	beq.n	80042ae <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d107      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x4c2>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	0e9b      	lsrs	r3, r3, #26
 80041cc:	3301      	adds	r3, #1
 80041ce:	069b      	lsls	r3, r3, #26
 80041d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041d4:	e015      	b.n	8004202 <HAL_ADC_ConfigChannel+0x4ee>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041de:	fa93 f3a3 	rbit	r3, r3
 80041e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80041e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041e6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80041e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80041ee:	2320      	movs	r3, #32
 80041f0:	e003      	b.n	80041fa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80041f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041f4:	fab3 f383 	clz	r3, r3
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	3301      	adds	r3, #1
 80041fc:	069b      	lsls	r3, r3, #26
 80041fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x50e>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	0e9b      	lsrs	r3, r3, #26
 8004214:	3301      	adds	r3, #1
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	2101      	movs	r1, #1
 800421c:	fa01 f303 	lsl.w	r3, r1, r3
 8004220:	e017      	b.n	8004252 <HAL_ADC_ConfigChannel+0x53e>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800422a:	fa93 f3a3 	rbit	r3, r3
 800422e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004232:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800423a:	2320      	movs	r3, #32
 800423c:	e003      	b.n	8004246 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800423e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004240:	fab3 f383 	clz	r3, r3
 8004244:	b2db      	uxtb	r3, r3
 8004246:	3301      	adds	r3, #1
 8004248:	f003 031f 	and.w	r3, r3, #31
 800424c:	2101      	movs	r1, #1
 800424e:	fa01 f303 	lsl.w	r3, r1, r3
 8004252:	ea42 0103 	orr.w	r1, r2, r3
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x564>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	0e9b      	lsrs	r3, r3, #26
 8004268:	3301      	adds	r3, #1
 800426a:	f003 021f 	and.w	r2, r3, #31
 800426e:	4613      	mov	r3, r2
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	4413      	add	r3, r2
 8004274:	051b      	lsls	r3, r3, #20
 8004276:	e018      	b.n	80042aa <HAL_ADC_ConfigChannel+0x596>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004280:	fa93 f3a3 	rbit	r3, r3
 8004284:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004288:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800428a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004290:	2320      	movs	r3, #32
 8004292:	e003      	b.n	800429c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004296:	fab3 f383 	clz	r3, r3
 800429a:	b2db      	uxtb	r3, r3
 800429c:	3301      	adds	r3, #1
 800429e:	f003 021f 	and.w	r2, r3, #31
 80042a2:	4613      	mov	r3, r2
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	4413      	add	r3, r2
 80042a8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042aa:	430b      	orrs	r3, r1
 80042ac:	e081      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d107      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x5b6>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	0e9b      	lsrs	r3, r3, #26
 80042c0:	3301      	adds	r3, #1
 80042c2:	069b      	lsls	r3, r3, #26
 80042c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042c8:	e015      	b.n	80042f6 <HAL_ADC_ConfigChannel+0x5e2>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d2:	fa93 f3a3 	rbit	r3, r3
 80042d6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80042d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80042dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80042e2:	2320      	movs	r3, #32
 80042e4:	e003      	b.n	80042ee <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80042e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e8:	fab3 f383 	clz	r3, r3
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	3301      	adds	r3, #1
 80042f0:	069b      	lsls	r3, r3, #26
 80042f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x602>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	0e9b      	lsrs	r3, r3, #26
 8004308:	3301      	adds	r3, #1
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	2101      	movs	r1, #1
 8004310:	fa01 f303 	lsl.w	r3, r1, r3
 8004314:	e017      	b.n	8004346 <HAL_ADC_ConfigChannel+0x632>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	61bb      	str	r3, [r7, #24]
  return result;
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800432e:	2320      	movs	r3, #32
 8004330:	e003      	b.n	800433a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	fab3 f383 	clz	r3, r3
 8004338:	b2db      	uxtb	r3, r3
 800433a:	3301      	adds	r3, #1
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	2101      	movs	r1, #1
 8004342:	fa01 f303 	lsl.w	r3, r1, r3
 8004346:	ea42 0103 	orr.w	r1, r2, r3
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10d      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x65e>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	0e9b      	lsrs	r3, r3, #26
 800435c:	3301      	adds	r3, #1
 800435e:	f003 021f 	and.w	r2, r3, #31
 8004362:	4613      	mov	r3, r2
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	4413      	add	r3, r2
 8004368:	3b1e      	subs	r3, #30
 800436a:	051b      	lsls	r3, r3, #20
 800436c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004370:	e01e      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x69c>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	fa93 f3a3 	rbit	r3, r3
 800437e:	60fb      	str	r3, [r7, #12]
  return result;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d104      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800438a:	2320      	movs	r3, #32
 800438c:	e006      	b.n	800439c <HAL_ADC_ConfigChannel+0x688>
 800438e:	bf00      	nop
 8004390:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	fab3 f383 	clz	r3, r3
 800439a:	b2db      	uxtb	r3, r3
 800439c:	3301      	adds	r3, #1
 800439e:	f003 021f 	and.w	r2, r3, #31
 80043a2:	4613      	mov	r3, r2
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	4413      	add	r3, r2
 80043a8:	3b1e      	subs	r3, #30
 80043aa:	051b      	lsls	r3, r3, #20
 80043ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043b6:	4619      	mov	r1, r3
 80043b8:	f7ff f8a0 	bl	80034fc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b44      	ldr	r3, [pc, #272]	@ (80044d4 <HAL_ADC_ConfigChannel+0x7c0>)
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d07a      	beq.n	80044be <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043c8:	4843      	ldr	r0, [pc, #268]	@ (80044d8 <HAL_ADC_ConfigChannel+0x7c4>)
 80043ca:	f7fe fff5 	bl	80033b8 <LL_ADC_GetCommonPathInternalCh>
 80043ce:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a41      	ldr	r2, [pc, #260]	@ (80044dc <HAL_ADC_ConfigChannel+0x7c8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d12c      	bne.n	8004436 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80043e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d126      	bne.n	8004436 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a3c      	ldr	r2, [pc, #240]	@ (80044e0 <HAL_ADC_ConfigChannel+0x7cc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d004      	beq.n	80043fc <HAL_ADC_ConfigChannel+0x6e8>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a3b      	ldr	r2, [pc, #236]	@ (80044e4 <HAL_ADC_ConfigChannel+0x7d0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d15d      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004400:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004404:	4619      	mov	r1, r3
 8004406:	4834      	ldr	r0, [pc, #208]	@ (80044d8 <HAL_ADC_ConfigChannel+0x7c4>)
 8004408:	f7fe ffc3 	bl	8003392 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800440c:	4b36      	ldr	r3, [pc, #216]	@ (80044e8 <HAL_ADC_ConfigChannel+0x7d4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	099b      	lsrs	r3, r3, #6
 8004412:	4a36      	ldr	r2, [pc, #216]	@ (80044ec <HAL_ADC_ConfigChannel+0x7d8>)
 8004414:	fba2 2303 	umull	r2, r3, r2, r3
 8004418:	099b      	lsrs	r3, r3, #6
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	4613      	mov	r3, r2
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004426:	e002      	b.n	800442e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	3b01      	subs	r3, #1
 800442c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1f9      	bne.n	8004428 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004434:	e040      	b.n	80044b8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a2d      	ldr	r2, [pc, #180]	@ (80044f0 <HAL_ADC_ConfigChannel+0x7dc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d118      	bne.n	8004472 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004440:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004444:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d112      	bne.n	8004472 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a23      	ldr	r2, [pc, #140]	@ (80044e0 <HAL_ADC_ConfigChannel+0x7cc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <HAL_ADC_ConfigChannel+0x74c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a22      	ldr	r2, [pc, #136]	@ (80044e4 <HAL_ADC_ConfigChannel+0x7d0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d12d      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004460:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004464:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004468:	4619      	mov	r1, r3
 800446a:	481b      	ldr	r0, [pc, #108]	@ (80044d8 <HAL_ADC_ConfigChannel+0x7c4>)
 800446c:	f7fe ff91 	bl	8003392 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004470:	e024      	b.n	80044bc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1f      	ldr	r2, [pc, #124]	@ (80044f4 <HAL_ADC_ConfigChannel+0x7e0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d120      	bne.n	80044be <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800447c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004480:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d11a      	bne.n	80044be <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a14      	ldr	r2, [pc, #80]	@ (80044e0 <HAL_ADC_ConfigChannel+0x7cc>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d115      	bne.n	80044be <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004492:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004496:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800449a:	4619      	mov	r1, r3
 800449c:	480e      	ldr	r0, [pc, #56]	@ (80044d8 <HAL_ADC_ConfigChannel+0x7c4>)
 800449e:	f7fe ff78 	bl	8003392 <LL_ADC_SetCommonPathInternalCh>
 80044a2:	e00c      	b.n	80044be <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a8:	f043 0220 	orr.w	r2, r3, #32
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80044b6:	e002      	b.n	80044be <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044b8:	bf00      	nop
 80044ba:	e000      	b.n	80044be <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80044c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	37d8      	adds	r7, #216	@ 0xd8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	80080000 	.word	0x80080000
 80044d8:	50040300 	.word	0x50040300
 80044dc:	c7520000 	.word	0xc7520000
 80044e0:	50040000 	.word	0x50040000
 80044e4:	50040200 	.word	0x50040200
 80044e8:	20000010 	.word	0x20000010
 80044ec:	053e2d63 	.word	0x053e2d63
 80044f0:	cb840000 	.word	0xcb840000
 80044f4:	80000001 	.word	0x80000001

080044f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004500:	2300      	movs	r3, #0
 8004502:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff f8c5 	bl	8003698 <LL_ADC_IsEnabled>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d169      	bne.n	80045e8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	4b36      	ldr	r3, [pc, #216]	@ (80045f4 <ADC_Enable+0xfc>)
 800451c:	4013      	ands	r3, r2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00d      	beq.n	800453e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004526:	f043 0210 	orr.w	r2, r3, #16
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004532:	f043 0201 	orr.w	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e055      	b.n	80045ea <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff f894 	bl	8003670 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004548:	482b      	ldr	r0, [pc, #172]	@ (80045f8 <ADC_Enable+0x100>)
 800454a:	f7fe ff35 	bl	80033b8 <LL_ADC_GetCommonPathInternalCh>
 800454e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004550:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004554:	2b00      	cmp	r3, #0
 8004556:	d013      	beq.n	8004580 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004558:	4b28      	ldr	r3, [pc, #160]	@ (80045fc <ADC_Enable+0x104>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	099b      	lsrs	r3, r3, #6
 800455e:	4a28      	ldr	r2, [pc, #160]	@ (8004600 <ADC_Enable+0x108>)
 8004560:	fba2 2303 	umull	r2, r3, r2, r3
 8004564:	099b      	lsrs	r3, r3, #6
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	4613      	mov	r3, r2
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004572:	e002      	b.n	800457a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	3b01      	subs	r3, #1
 8004578:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f9      	bne.n	8004574 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004580:	f7fe fec4 	bl	800330c <HAL_GetTick>
 8004584:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004586:	e028      	b.n	80045da <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff f883 	bl	8003698 <LL_ADC_IsEnabled>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d104      	bne.n	80045a2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff f867 	bl	8003670 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045a2:	f7fe feb3 	bl	800330c <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d914      	bls.n	80045da <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d00d      	beq.n	80045da <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c2:	f043 0210 	orr.w	r2, r3, #16
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ce:	f043 0201 	orr.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e007      	b.n	80045ea <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d1cf      	bne.n	8004588 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	8000003f 	.word	0x8000003f
 80045f8:	50040300 	.word	0x50040300
 80045fc:	20000010 	.word	0x20000010
 8004600:	053e2d63 	.word	0x053e2d63

08004604 <LL_ADC_IsEnabled>:
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <LL_ADC_IsEnabled+0x18>
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <LL_ADC_IsEnabled+0x1a>
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <LL_ADC_REG_IsConversionOngoing>:
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	2b04      	cmp	r3, #4
 800463c:	d101      	bne.n	8004642 <LL_ADC_REG_IsConversionOngoing+0x18>
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004650:	b590      	push	{r4, r7, lr}
 8004652:	b09f      	sub	sp, #124	@ 0x7c
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800466a:	2302      	movs	r3, #2
 800466c:	e093      	b.n	8004796 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004676:	2300      	movs	r3, #0
 8004678:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800467a:	2300      	movs	r3, #0
 800467c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a47      	ldr	r2, [pc, #284]	@ (80047a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d102      	bne.n	800468e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004688:	4b46      	ldr	r3, [pc, #280]	@ (80047a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800468a:	60bb      	str	r3, [r7, #8]
 800468c:	e001      	b.n	8004692 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800468e:	2300      	movs	r3, #0
 8004690:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10b      	bne.n	80046b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469c:	f043 0220 	orr.w	r2, r3, #32
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e072      	b.n	8004796 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff ffb9 	bl	800462a <LL_ADC_REG_IsConversionOngoing>
 80046b8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff ffb3 	bl	800462a <LL_ADC_REG_IsConversionOngoing>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d154      	bne.n	8004774 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80046ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d151      	bne.n	8004774 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80046d0:	4b35      	ldr	r3, [pc, #212]	@ (80047a8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80046d2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d02c      	beq.n	8004736 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80046dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	6859      	ldr	r1, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046ee:	035b      	lsls	r3, r3, #13
 80046f0:	430b      	orrs	r3, r1
 80046f2:	431a      	orrs	r2, r3
 80046f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046f8:	4829      	ldr	r0, [pc, #164]	@ (80047a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80046fa:	f7ff ff83 	bl	8004604 <LL_ADC_IsEnabled>
 80046fe:	4604      	mov	r4, r0
 8004700:	4828      	ldr	r0, [pc, #160]	@ (80047a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004702:	f7ff ff7f 	bl	8004604 <LL_ADC_IsEnabled>
 8004706:	4603      	mov	r3, r0
 8004708:	431c      	orrs	r4, r3
 800470a:	4828      	ldr	r0, [pc, #160]	@ (80047ac <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800470c:	f7ff ff7a 	bl	8004604 <LL_ADC_IsEnabled>
 8004710:	4603      	mov	r3, r0
 8004712:	4323      	orrs	r3, r4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d137      	bne.n	8004788 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004718:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004720:	f023 030f 	bic.w	r3, r3, #15
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	6811      	ldr	r1, [r2, #0]
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	6892      	ldr	r2, [r2, #8]
 800472c:	430a      	orrs	r2, r1
 800472e:	431a      	orrs	r2, r3
 8004730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004732:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004734:	e028      	b.n	8004788 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004736:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800473e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004740:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004742:	4817      	ldr	r0, [pc, #92]	@ (80047a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004744:	f7ff ff5e 	bl	8004604 <LL_ADC_IsEnabled>
 8004748:	4604      	mov	r4, r0
 800474a:	4816      	ldr	r0, [pc, #88]	@ (80047a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800474c:	f7ff ff5a 	bl	8004604 <LL_ADC_IsEnabled>
 8004750:	4603      	mov	r3, r0
 8004752:	431c      	orrs	r4, r3
 8004754:	4815      	ldr	r0, [pc, #84]	@ (80047ac <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004756:	f7ff ff55 	bl	8004604 <LL_ADC_IsEnabled>
 800475a:	4603      	mov	r3, r0
 800475c:	4323      	orrs	r3, r4
 800475e:	2b00      	cmp	r3, #0
 8004760:	d112      	bne.n	8004788 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004762:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800476a:	f023 030f 	bic.w	r3, r3, #15
 800476e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004770:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004772:	e009      	b.n	8004788 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004786:	e000      	b.n	800478a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004788:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004792:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004796:	4618      	mov	r0, r3
 8004798:	377c      	adds	r7, #124	@ 0x7c
 800479a:	46bd      	mov	sp, r7
 800479c:	bd90      	pop	{r4, r7, pc}
 800479e:	bf00      	nop
 80047a0:	50040000 	.word	0x50040000
 80047a4:	50040100 	.word	0x50040100
 80047a8:	50040300 	.word	0x50040300
 80047ac:	50040200 	.word	0x50040200

080047b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047c0:	4b0c      	ldr	r3, [pc, #48]	@ (80047f4 <__NVIC_SetPriorityGrouping+0x44>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80047cc:	4013      	ands	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047e2:	4a04      	ldr	r2, [pc, #16]	@ (80047f4 <__NVIC_SetPriorityGrouping+0x44>)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	60d3      	str	r3, [r2, #12]
}
 80047e8:	bf00      	nop
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	e000ed00 	.word	0xe000ed00

080047f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047fc:	4b04      	ldr	r3, [pc, #16]	@ (8004810 <__NVIC_GetPriorityGrouping+0x18>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	0a1b      	lsrs	r3, r3, #8
 8004802:	f003 0307 	and.w	r3, r3, #7
}
 8004806:	4618      	mov	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	e000ed00 	.word	0xe000ed00

08004814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800481e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004822:	2b00      	cmp	r3, #0
 8004824:	db0b      	blt.n	800483e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	f003 021f 	and.w	r2, r3, #31
 800482c:	4907      	ldr	r1, [pc, #28]	@ (800484c <__NVIC_EnableIRQ+0x38>)
 800482e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	2001      	movs	r0, #1
 8004836:	fa00 f202 	lsl.w	r2, r0, r2
 800483a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	e000e100 	.word	0xe000e100

08004850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	6039      	str	r1, [r7, #0]
 800485a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800485c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004860:	2b00      	cmp	r3, #0
 8004862:	db0a      	blt.n	800487a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	b2da      	uxtb	r2, r3
 8004868:	490c      	ldr	r1, [pc, #48]	@ (800489c <__NVIC_SetPriority+0x4c>)
 800486a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486e:	0112      	lsls	r2, r2, #4
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	440b      	add	r3, r1
 8004874:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004878:	e00a      	b.n	8004890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	b2da      	uxtb	r2, r3
 800487e:	4908      	ldr	r1, [pc, #32]	@ (80048a0 <__NVIC_SetPriority+0x50>)
 8004880:	79fb      	ldrb	r3, [r7, #7]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	3b04      	subs	r3, #4
 8004888:	0112      	lsls	r2, r2, #4
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	440b      	add	r3, r1
 800488e:	761a      	strb	r2, [r3, #24]
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	e000e100 	.word	0xe000e100
 80048a0:	e000ed00 	.word	0xe000ed00

080048a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b089      	sub	sp, #36	@ 0x24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f1c3 0307 	rsb	r3, r3, #7
 80048be:	2b04      	cmp	r3, #4
 80048c0:	bf28      	it	cs
 80048c2:	2304      	movcs	r3, #4
 80048c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	3304      	adds	r3, #4
 80048ca:	2b06      	cmp	r3, #6
 80048cc:	d902      	bls.n	80048d4 <NVIC_EncodePriority+0x30>
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	3b03      	subs	r3, #3
 80048d2:	e000      	b.n	80048d6 <NVIC_EncodePriority+0x32>
 80048d4:	2300      	movs	r3, #0
 80048d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d8:	f04f 32ff 	mov.w	r2, #4294967295
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	43da      	mvns	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	401a      	ands	r2, r3
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048ec:	f04f 31ff 	mov.w	r1, #4294967295
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	fa01 f303 	lsl.w	r3, r1, r3
 80048f6:	43d9      	mvns	r1, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048fc:	4313      	orrs	r3, r2
         );
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3724      	adds	r7, #36	@ 0x24
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
	...

0800490c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3b01      	subs	r3, #1
 8004918:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800491c:	d301      	bcc.n	8004922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800491e:	2301      	movs	r3, #1
 8004920:	e00f      	b.n	8004942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004922:	4a0a      	ldr	r2, [pc, #40]	@ (800494c <SysTick_Config+0x40>)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3b01      	subs	r3, #1
 8004928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800492a:	210f      	movs	r1, #15
 800492c:	f04f 30ff 	mov.w	r0, #4294967295
 8004930:	f7ff ff8e 	bl	8004850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004934:	4b05      	ldr	r3, [pc, #20]	@ (800494c <SysTick_Config+0x40>)
 8004936:	2200      	movs	r2, #0
 8004938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800493a:	4b04      	ldr	r3, [pc, #16]	@ (800494c <SysTick_Config+0x40>)
 800493c:	2207      	movs	r2, #7
 800493e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	e000e010 	.word	0xe000e010

08004950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff ff29 	bl	80047b0 <__NVIC_SetPriorityGrouping>
}
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b086      	sub	sp, #24
 800496a:	af00      	add	r7, sp, #0
 800496c:	4603      	mov	r3, r0
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	607a      	str	r2, [r7, #4]
 8004972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004978:	f7ff ff3e 	bl	80047f8 <__NVIC_GetPriorityGrouping>
 800497c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	6978      	ldr	r0, [r7, #20]
 8004984:	f7ff ff8e 	bl	80048a4 <NVIC_EncodePriority>
 8004988:	4602      	mov	r2, r0
 800498a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800498e:	4611      	mov	r1, r2
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff ff5d 	bl	8004850 <__NVIC_SetPriority>
}
 8004996:	bf00      	nop
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b082      	sub	sp, #8
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	4603      	mov	r3, r0
 80049a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff ff31 	bl	8004814 <__NVIC_EnableIRQ>
}
 80049b2:	bf00      	nop
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b082      	sub	sp, #8
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff ffa2 	bl	800490c <SysTick_Config>
 80049c8:	4603      	mov	r3, r0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049de:	2300      	movs	r3, #0
 80049e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049e2:	e17f      	b.n	8004ce4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	2101      	movs	r1, #1
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	fa01 f303 	lsl.w	r3, r1, r3
 80049f0:	4013      	ands	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 8171 	beq.w	8004cde <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d005      	beq.n	8004a14 <HAL_GPIO_Init+0x40>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d130      	bne.n	8004a76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	2203      	movs	r2, #3
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	43db      	mvns	r3, r3
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	43db      	mvns	r3, r3
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4013      	ands	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	091b      	lsrs	r3, r3, #4
 8004a60:	f003 0201 	and.w	r2, r3, #1
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d118      	bne.n	8004ab4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004a88:	2201      	movs	r2, #1
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43db      	mvns	r3, r3
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4013      	ands	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	08db      	lsrs	r3, r3, #3
 8004a9e:	f003 0201 	and.w	r2, r3, #1
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d017      	beq.n	8004af0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	2203      	movs	r2, #3
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 0303 	and.w	r3, r3, #3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d123      	bne.n	8004b44 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	08da      	lsrs	r2, r3, #3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3208      	adds	r2, #8
 8004b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	220f      	movs	r2, #15
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	08da      	lsrs	r2, r3, #3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3208      	adds	r2, #8
 8004b3e:	6939      	ldr	r1, [r7, #16]
 8004b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	2203      	movs	r2, #3
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	43db      	mvns	r3, r3
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 0203 	and.w	r2, r3, #3
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80ac 	beq.w	8004cde <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b86:	4b5f      	ldr	r3, [pc, #380]	@ (8004d04 <HAL_GPIO_Init+0x330>)
 8004b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b8a:	4a5e      	ldr	r2, [pc, #376]	@ (8004d04 <HAL_GPIO_Init+0x330>)
 8004b8c:	f043 0301 	orr.w	r3, r3, #1
 8004b90:	6613      	str	r3, [r2, #96]	@ 0x60
 8004b92:	4b5c      	ldr	r3, [pc, #368]	@ (8004d04 <HAL_GPIO_Init+0x330>)
 8004b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	60bb      	str	r3, [r7, #8]
 8004b9c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004b9e:	4a5a      	ldr	r2, [pc, #360]	@ (8004d08 <HAL_GPIO_Init+0x334>)
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	089b      	lsrs	r3, r3, #2
 8004ba4:	3302      	adds	r3, #2
 8004ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004baa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	220f      	movs	r2, #15
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004bc8:	d025      	beq.n	8004c16 <HAL_GPIO_Init+0x242>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a4f      	ldr	r2, [pc, #316]	@ (8004d0c <HAL_GPIO_Init+0x338>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01f      	beq.n	8004c12 <HAL_GPIO_Init+0x23e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a4e      	ldr	r2, [pc, #312]	@ (8004d10 <HAL_GPIO_Init+0x33c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d019      	beq.n	8004c0e <HAL_GPIO_Init+0x23a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a4d      	ldr	r2, [pc, #308]	@ (8004d14 <HAL_GPIO_Init+0x340>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <HAL_GPIO_Init+0x236>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a4c      	ldr	r2, [pc, #304]	@ (8004d18 <HAL_GPIO_Init+0x344>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00d      	beq.n	8004c06 <HAL_GPIO_Init+0x232>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a4b      	ldr	r2, [pc, #300]	@ (8004d1c <HAL_GPIO_Init+0x348>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d007      	beq.n	8004c02 <HAL_GPIO_Init+0x22e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a4a      	ldr	r2, [pc, #296]	@ (8004d20 <HAL_GPIO_Init+0x34c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d101      	bne.n	8004bfe <HAL_GPIO_Init+0x22a>
 8004bfa:	2306      	movs	r3, #6
 8004bfc:	e00c      	b.n	8004c18 <HAL_GPIO_Init+0x244>
 8004bfe:	2307      	movs	r3, #7
 8004c00:	e00a      	b.n	8004c18 <HAL_GPIO_Init+0x244>
 8004c02:	2305      	movs	r3, #5
 8004c04:	e008      	b.n	8004c18 <HAL_GPIO_Init+0x244>
 8004c06:	2304      	movs	r3, #4
 8004c08:	e006      	b.n	8004c18 <HAL_GPIO_Init+0x244>
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e004      	b.n	8004c18 <HAL_GPIO_Init+0x244>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e002      	b.n	8004c18 <HAL_GPIO_Init+0x244>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <HAL_GPIO_Init+0x244>
 8004c16:	2300      	movs	r3, #0
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	f002 0203 	and.w	r2, r2, #3
 8004c1e:	0092      	lsls	r2, r2, #2
 8004c20:	4093      	lsls	r3, r2
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c28:	4937      	ldr	r1, [pc, #220]	@ (8004d08 <HAL_GPIO_Init+0x334>)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	089b      	lsrs	r3, r3, #2
 8004c2e:	3302      	adds	r3, #2
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c36:	4b3b      	ldr	r3, [pc, #236]	@ (8004d24 <HAL_GPIO_Init+0x350>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4013      	ands	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c5a:	4a32      	ldr	r2, [pc, #200]	@ (8004d24 <HAL_GPIO_Init+0x350>)
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c60:	4b30      	ldr	r3, [pc, #192]	@ (8004d24 <HAL_GPIO_Init+0x350>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	43db      	mvns	r3, r3
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c84:	4a27      	ldr	r2, [pc, #156]	@ (8004d24 <HAL_GPIO_Init+0x350>)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004c8a:	4b26      	ldr	r3, [pc, #152]	@ (8004d24 <HAL_GPIO_Init+0x350>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	43db      	mvns	r3, r3
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4013      	ands	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cae:	4a1d      	ldr	r2, [pc, #116]	@ (8004d24 <HAL_GPIO_Init+0x350>)
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d24 <HAL_GPIO_Init+0x350>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cd8:	4a12      	ldr	r2, [pc, #72]	@ (8004d24 <HAL_GPIO_Init+0x350>)
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	fa22 f303 	lsr.w	r3, r2, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f47f ae78 	bne.w	80049e4 <HAL_GPIO_Init+0x10>
  }
}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop
 8004cf8:	371c      	adds	r7, #28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40021000 	.word	0x40021000
 8004d08:	40010000 	.word	0x40010000
 8004d0c:	48000400 	.word	0x48000400
 8004d10:	48000800 	.word	0x48000800
 8004d14:	48000c00 	.word	0x48000c00
 8004d18:	48001000 	.word	0x48001000
 8004d1c:	48001400 	.word	0x48001400
 8004d20:	48001800 	.word	0x48001800
 8004d24:	40010400 	.word	0x40010400

08004d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	807b      	strh	r3, [r7, #2]
 8004d34:	4613      	mov	r3, r2
 8004d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d38:	787b      	ldrb	r3, [r7, #1]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d3e:	887a      	ldrh	r2, [r7, #2]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d44:	e002      	b.n	8004d4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d46:	887a      	ldrh	r2, [r7, #2]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e08d      	b.n	8004e86 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fd fff2 	bl	8002d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2224      	movs	r2, #36	@ 0x24
 8004d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0201 	bic.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004da8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004db8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d107      	bne.n	8004dd2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	e006      	b.n	8004de0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004dde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d108      	bne.n	8004dfa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004df6:	605a      	str	r2, [r3, #4]
 8004df8:	e007      	b.n	8004e0a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6812      	ldr	r2, [r2, #0]
 8004e14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691a      	ldr	r2, [r3, #16]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69d9      	ldr	r1, [r3, #28]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1a      	ldr	r2, [r3, #32]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	607a      	str	r2, [r7, #4]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	817b      	strh	r3, [r7, #10]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b20      	cmp	r3, #32
 8004eae:	f040 80fd 	bne.w	80050ac <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_I2C_Master_Transmit+0x30>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e0f6      	b.n	80050ae <HAL_I2C_Master_Transmit+0x21e>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ec8:	f7fe fa20 	bl	800330c <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	2319      	movs	r3, #25
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fa0a 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e0e1      	b.n	80050ae <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2221      	movs	r2, #33	@ 0x21
 8004eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2210      	movs	r2, #16
 8004ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	893a      	ldrh	r2, [r7, #8]
 8004f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2bff      	cmp	r3, #255	@ 0xff
 8004f1a:	d906      	bls.n	8004f2a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	22ff      	movs	r2, #255	@ 0xff
 8004f20:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004f22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	e007      	b.n	8004f3a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004f34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f38:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d024      	beq.n	8004f8c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f46:	781a      	ldrb	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	3301      	adds	r3, #1
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	8979      	ldrh	r1, [r7, #10]
 8004f7e:	4b4e      	ldr	r3, [pc, #312]	@ (80050b8 <HAL_I2C_Master_Transmit+0x228>)
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 fc05 	bl	8005794 <I2C_TransferConfig>
 8004f8a:	e066      	b.n	800505a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	8979      	ldrh	r1, [r7, #10]
 8004f94:	4b48      	ldr	r3, [pc, #288]	@ (80050b8 <HAL_I2C_Master_Transmit+0x228>)
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 fbfa 	bl	8005794 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004fa0:	e05b      	b.n	800505a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	6a39      	ldr	r1, [r7, #32]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 f9fd 	bl	80053a6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e07b      	b.n	80050ae <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	781a      	ldrb	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d034      	beq.n	800505a <HAL_I2C_Master_Transmit+0x1ca>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d130      	bne.n	800505a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	2200      	movs	r2, #0
 8005000:	2180      	movs	r1, #128	@ 0x80
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f976 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e04d      	b.n	80050ae <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	2bff      	cmp	r3, #255	@ 0xff
 800501a:	d90e      	bls.n	800503a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	22ff      	movs	r2, #255	@ 0xff
 8005020:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005026:	b2da      	uxtb	r2, r3
 8005028:	8979      	ldrh	r1, [r7, #10]
 800502a:	2300      	movs	r3, #0
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 fbae 	bl	8005794 <I2C_TransferConfig>
 8005038:	e00f      	b.n	800505a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005048:	b2da      	uxtb	r2, r3
 800504a:	8979      	ldrh	r1, [r7, #10]
 800504c:	2300      	movs	r3, #0
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 fb9d 	bl	8005794 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d19e      	bne.n	8004fa2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	6a39      	ldr	r1, [r7, #32]
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 f9e3 	bl	8005434 <I2C_WaitOnSTOPFlagUntilTimeout>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e01a      	b.n	80050ae <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2220      	movs	r2, #32
 800507e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6859      	ldr	r1, [r3, #4]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4b0c      	ldr	r3, [pc, #48]	@ (80050bc <HAL_I2C_Master_Transmit+0x22c>)
 800508c:	400b      	ands	r3, r1
 800508e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	e000      	b.n	80050ae <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80050ac:	2302      	movs	r3, #2
  }
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	80002000 	.word	0x80002000
 80050bc:	fe00e800 	.word	0xfe00e800

080050c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	607a      	str	r2, [r7, #4]
 80050ca:	461a      	mov	r2, r3
 80050cc:	460b      	mov	r3, r1
 80050ce:	817b      	strh	r3, [r7, #10]
 80050d0:	4613      	mov	r3, r2
 80050d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b20      	cmp	r3, #32
 80050de:	f040 80db 	bne.w	8005298 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_I2C_Master_Receive+0x30>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e0d4      	b.n	800529a <HAL_I2C_Master_Receive+0x1da>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050f8:	f7fe f908 	bl	800330c <HAL_GetTick>
 80050fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	2319      	movs	r3, #25
 8005104:	2201      	movs	r2, #1
 8005106:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f8f2 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e0bf      	b.n	800529a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2222      	movs	r2, #34	@ 0x22
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2210      	movs	r2, #16
 8005126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	893a      	ldrh	r2, [r7, #8]
 800513a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005146:	b29b      	uxth	r3, r3
 8005148:	2bff      	cmp	r3, #255	@ 0xff
 800514a:	d90e      	bls.n	800516a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2201      	movs	r2, #1
 8005150:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005156:	b2da      	uxtb	r2, r3
 8005158:	8979      	ldrh	r1, [r7, #10]
 800515a:	4b52      	ldr	r3, [pc, #328]	@ (80052a4 <HAL_I2C_Master_Receive+0x1e4>)
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f000 fb16 	bl	8005794 <I2C_TransferConfig>
 8005168:	e06d      	b.n	8005246 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005178:	b2da      	uxtb	r2, r3
 800517a:	8979      	ldrh	r1, [r7, #10]
 800517c:	4b49      	ldr	r3, [pc, #292]	@ (80052a4 <HAL_I2C_Master_Receive+0x1e4>)
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f000 fb05 	bl	8005794 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800518a:	e05c      	b.n	8005246 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	6a39      	ldr	r1, [r7, #32]
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f993 	bl	80054bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e07c      	b.n	800529a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d034      	beq.n	8005246 <HAL_I2C_Master_Receive+0x186>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d130      	bne.n	8005246 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	2200      	movs	r2, #0
 80051ec:	2180      	movs	r1, #128	@ 0x80
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f880 	bl	80052f4 <I2C_WaitOnFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e04d      	b.n	800529a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005202:	b29b      	uxth	r3, r3
 8005204:	2bff      	cmp	r3, #255	@ 0xff
 8005206:	d90e      	bls.n	8005226 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	22ff      	movs	r2, #255	@ 0xff
 800520c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005212:	b2da      	uxtb	r2, r3
 8005214:	8979      	ldrh	r1, [r7, #10]
 8005216:	2300      	movs	r3, #0
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 fab8 	bl	8005794 <I2C_TransferConfig>
 8005224:	e00f      	b.n	8005246 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005234:	b2da      	uxtb	r2, r3
 8005236:	8979      	ldrh	r1, [r7, #10]
 8005238:	2300      	movs	r3, #0
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 faa7 	bl	8005794 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d19d      	bne.n	800518c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	6a39      	ldr	r1, [r7, #32]
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f8ed 	bl	8005434 <I2C_WaitOnSTOPFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e01a      	b.n	800529a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2220      	movs	r2, #32
 800526a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6859      	ldr	r1, [r3, #4]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b0c      	ldr	r3, [pc, #48]	@ (80052a8 <HAL_I2C_Master_Receive+0x1e8>)
 8005278:	400b      	ands	r3, r1
 800527a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005294:	2300      	movs	r3, #0
 8005296:	e000      	b.n	800529a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005298:	2302      	movs	r3, #2
  }
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	80002400 	.word	0x80002400
 80052a8:	fe00e800 	.word	0xfe00e800

080052ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d103      	bne.n	80052ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2200      	movs	r2, #0
 80052c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d007      	beq.n	80052e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0201 	orr.w	r2, r2, #1
 80052e6:	619a      	str	r2, [r3, #24]
  }
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	4613      	mov	r3, r2
 8005302:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005304:	e03b      	b.n	800537e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f962 	bl	80055d4 <I2C_IsErrorOccurred>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e041      	b.n	800539e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005320:	d02d      	beq.n	800537e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005322:	f7fd fff3 	bl	800330c <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d302      	bcc.n	8005338 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d122      	bne.n	800537e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4013      	ands	r3, r2
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	429a      	cmp	r2, r3
 8005346:	bf0c      	ite	eq
 8005348:	2301      	moveq	r3, #1
 800534a:	2300      	movne	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	461a      	mov	r2, r3
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	429a      	cmp	r2, r3
 8005354:	d113      	bne.n	800537e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535a:	f043 0220 	orr.w	r2, r3, #32
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2220      	movs	r2, #32
 8005366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e00f      	b.n	800539e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699a      	ldr	r2, [r3, #24]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	4013      	ands	r3, r2
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	429a      	cmp	r2, r3
 800538c:	bf0c      	ite	eq
 800538e:	2301      	moveq	r3, #1
 8005390:	2300      	movne	r3, #0
 8005392:	b2db      	uxtb	r3, r3
 8005394:	461a      	mov	r2, r3
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	429a      	cmp	r2, r3
 800539a:	d0b4      	beq.n	8005306 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	60b9      	str	r1, [r7, #8]
 80053b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053b2:	e033      	b.n	800541c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f90b 	bl	80055d4 <I2C_IsErrorOccurred>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e031      	b.n	800542c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ce:	d025      	beq.n	800541c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d0:	f7fd ff9c 	bl	800330c <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d302      	bcc.n	80053e6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d11a      	bne.n	800541c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d013      	beq.n	800541c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f8:	f043 0220 	orr.w	r2, r3, #32
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2220      	movs	r2, #32
 8005404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e007      	b.n	800542c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b02      	cmp	r3, #2
 8005428:	d1c4      	bne.n	80053b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005440:	e02f      	b.n	80054a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f8c4 	bl	80055d4 <I2C_IsErrorOccurred>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e02d      	b.n	80054b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005456:	f7fd ff59 	bl	800330c <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	429a      	cmp	r2, r3
 8005464:	d302      	bcc.n	800546c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d11a      	bne.n	80054a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b20      	cmp	r3, #32
 8005478:	d013      	beq.n	80054a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547e:	f043 0220 	orr.w	r2, r3, #32
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e007      	b.n	80054b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	f003 0320 	and.w	r3, r3, #32
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	d1c8      	bne.n	8005442 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80054cc:	e071      	b.n	80055b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	68b9      	ldr	r1, [r7, #8]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f87e 	bl	80055d4 <I2C_IsErrorOccurred>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	f003 0320 	and.w	r3, r3, #32
 80054ec:	2b20      	cmp	r3, #32
 80054ee:	d13b      	bne.n	8005568 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d138      	bne.n	8005568 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b04      	cmp	r3, #4
 8005502:	d105      	bne.n	8005510 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f003 0310 	and.w	r3, r3, #16
 800551a:	2b10      	cmp	r3, #16
 800551c:	d121      	bne.n	8005562 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2210      	movs	r2, #16
 8005524:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2204      	movs	r2, #4
 800552a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2220      	movs	r2, #32
 8005532:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6859      	ldr	r1, [r3, #4]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	4b24      	ldr	r3, [pc, #144]	@ (80055d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005540:	400b      	ands	r3, r1
 8005542:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	75fb      	strb	r3, [r7, #23]
 8005560:	e002      	b.n	8005568 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005568:	f7fd fed0 	bl	800330c <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	429a      	cmp	r2, r3
 8005576:	d302      	bcc.n	800557e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d119      	bne.n	80055b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800557e:	7dfb      	ldrb	r3, [r7, #23]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d116      	bne.n	80055b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f003 0304 	and.w	r3, r3, #4
 800558e:	2b04      	cmp	r3, #4
 8005590:	d00f      	beq.n	80055b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005596:	f043 0220 	orr.w	r2, r3, #32
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d002      	beq.n	80055c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d083      	beq.n	80054ce <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	fe00e800 	.word	0xfe00e800

080055d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	@ 0x28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	f003 0310 	and.w	r3, r3, #16
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d068      	beq.n	80056d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2210      	movs	r2, #16
 8005606:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005608:	e049      	b.n	800569e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005610:	d045      	beq.n	800569e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005612:	f7fd fe7b 	bl	800330c <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	429a      	cmp	r2, r3
 8005620:	d302      	bcc.n	8005628 <I2C_IsErrorOccurred+0x54>
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d13a      	bne.n	800569e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005632:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800563a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800564a:	d121      	bne.n	8005690 <I2C_IsErrorOccurred+0xbc>
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005652:	d01d      	beq.n	8005690 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005654:	7cfb      	ldrb	r3, [r7, #19]
 8005656:	2b20      	cmp	r3, #32
 8005658:	d01a      	beq.n	8005690 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005668:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800566a:	f7fd fe4f 	bl	800330c <HAL_GetTick>
 800566e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005670:	e00e      	b.n	8005690 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005672:	f7fd fe4b 	bl	800330c <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b19      	cmp	r3, #25
 800567e:	d907      	bls.n	8005690 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	f043 0320 	orr.w	r3, r3, #32
 8005686:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800568e:	e006      	b.n	800569e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b20      	cmp	r3, #32
 800569c:	d1e9      	bne.n	8005672 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	f003 0320 	and.w	r3, r3, #32
 80056a8:	2b20      	cmp	r3, #32
 80056aa:	d003      	beq.n	80056b4 <I2C_IsErrorOccurred+0xe0>
 80056ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0aa      	beq.n	800560a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80056b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d103      	bne.n	80056c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2220      	movs	r2, #32
 80056c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	f043 0304 	orr.w	r3, r3, #4
 80056ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00b      	beq.n	80056fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	f043 0301 	orr.w	r3, r3, #1
 80056ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00b      	beq.n	800571e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	f043 0308 	orr.w	r3, r3, #8
 800570c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005716:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00b      	beq.n	8005740 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	f043 0302 	orr.w	r3, r3, #2
 800572e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005738:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01c      	beq.n	8005782 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f7ff fdaf 	bl	80052ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6859      	ldr	r1, [r3, #4]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	4b0d      	ldr	r3, [pc, #52]	@ (8005790 <I2C_IsErrorOccurred+0x1bc>)
 800575a:	400b      	ands	r3, r1
 800575c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	431a      	orrs	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2220      	movs	r2, #32
 800576e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005782:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005786:	4618      	mov	r0, r3
 8005788:	3728      	adds	r7, #40	@ 0x28
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	fe00e800 	.word	0xfe00e800

08005794 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	607b      	str	r3, [r7, #4]
 800579e:	460b      	mov	r3, r1
 80057a0:	817b      	strh	r3, [r7, #10]
 80057a2:	4613      	mov	r3, r2
 80057a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057a6:	897b      	ldrh	r3, [r7, #10]
 80057a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057ac:	7a7b      	ldrb	r3, [r7, #9]
 80057ae:	041b      	lsls	r3, r3, #16
 80057b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	4313      	orrs	r3, r2
 80057be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	0d5b      	lsrs	r3, r3, #21
 80057ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80057d2:	4b08      	ldr	r3, [pc, #32]	@ (80057f4 <I2C_TransferConfig+0x60>)
 80057d4:	430b      	orrs	r3, r1
 80057d6:	43db      	mvns	r3, r3
 80057d8:	ea02 0103 	and.w	r1, r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	03ff63ff 	.word	0x03ff63ff

080057f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b20      	cmp	r3, #32
 800580c:	d138      	bne.n	8005880 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005818:	2302      	movs	r3, #2
 800581a:	e032      	b.n	8005882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2224      	movs	r2, #36	@ 0x24
 8005828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0201 	bic.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800584a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6819      	ldr	r1, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	e000      	b.n	8005882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005880:	2302      	movs	r3, #2
  }
}
 8005882:	4618      	mov	r0, r3
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800588e:	b480      	push	{r7}
 8005890:	b085      	sub	sp, #20
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d139      	bne.n	8005918 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e033      	b.n	800591a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2224      	movs	r2, #36	@ 0x24
 80058be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0201 	bic.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80058e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0201 	orr.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	e000      	b.n	800591a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005918:	2302      	movs	r3, #2
  }
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
	...

08005928 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800592c:	4b04      	ldr	r3, [pc, #16]	@ (8005940 <HAL_PWREx_GetVoltageRange+0x18>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005934:	4618      	mov	r0, r3
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40007000 	.word	0x40007000

08005944 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005952:	d130      	bne.n	80059b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005954:	4b23      	ldr	r3, [pc, #140]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800595c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005960:	d038      	beq.n	80059d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005962:	4b20      	ldr	r3, [pc, #128]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800596a:	4a1e      	ldr	r2, [pc, #120]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800596c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005970:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005972:	4b1d      	ldr	r3, [pc, #116]	@ (80059e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2232      	movs	r2, #50	@ 0x32
 8005978:	fb02 f303 	mul.w	r3, r2, r3
 800597c:	4a1b      	ldr	r2, [pc, #108]	@ (80059ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	0c9b      	lsrs	r3, r3, #18
 8005984:	3301      	adds	r3, #1
 8005986:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005988:	e002      	b.n	8005990 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	3b01      	subs	r3, #1
 800598e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005990:	4b14      	ldr	r3, [pc, #80]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005998:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800599c:	d102      	bne.n	80059a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1f2      	bne.n	800598a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059a4:	4b0f      	ldr	r3, [pc, #60]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059b0:	d110      	bne.n	80059d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e00f      	b.n	80059d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80059b6:	4b0b      	ldr	r3, [pc, #44]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059c2:	d007      	beq.n	80059d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80059c4:	4b07      	ldr	r3, [pc, #28]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80059cc:	4a05      	ldr	r2, [pc, #20]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80059d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40007000 	.word	0x40007000
 80059e8:	20000010 	.word	0x20000010
 80059ec:	431bde83 	.word	0x431bde83

080059f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b088      	sub	sp, #32
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e3ca      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a02:	4b97      	ldr	r3, [pc, #604]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
 8005a0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a0c:	4b94      	ldr	r3, [pc, #592]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f003 0303 	and.w	r3, r3, #3
 8005a14:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0310 	and.w	r3, r3, #16
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 80e4 	beq.w	8005bec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d007      	beq.n	8005a3a <HAL_RCC_OscConfig+0x4a>
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b0c      	cmp	r3, #12
 8005a2e:	f040 808b 	bne.w	8005b48 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	f040 8087 	bne.w	8005b48 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a3a:	4b89      	ldr	r3, [pc, #548]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d005      	beq.n	8005a52 <HAL_RCC_OscConfig+0x62>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e3a2      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1a      	ldr	r2, [r3, #32]
 8005a56:	4b82      	ldr	r3, [pc, #520]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0308 	and.w	r3, r3, #8
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d004      	beq.n	8005a6c <HAL_RCC_OscConfig+0x7c>
 8005a62:	4b7f      	ldr	r3, [pc, #508]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a6a:	e005      	b.n	8005a78 <HAL_RCC_OscConfig+0x88>
 8005a6c:	4b7c      	ldr	r3, [pc, #496]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a72:	091b      	lsrs	r3, r3, #4
 8005a74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d223      	bcs.n	8005ac4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 fd55 	bl	8006530 <RCC_SetFlashLatencyFromMSIRange>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e383      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a90:	4b73      	ldr	r3, [pc, #460]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a72      	ldr	r2, [pc, #456]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005a96:	f043 0308 	orr.w	r3, r3, #8
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	4b70      	ldr	r3, [pc, #448]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	496d      	ldr	r1, [pc, #436]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005aae:	4b6c      	ldr	r3, [pc, #432]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	021b      	lsls	r3, r3, #8
 8005abc:	4968      	ldr	r1, [pc, #416]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	604b      	str	r3, [r1, #4]
 8005ac2:	e025      	b.n	8005b10 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ac4:	4b66      	ldr	r3, [pc, #408]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a65      	ldr	r2, [pc, #404]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005aca:	f043 0308 	orr.w	r3, r3, #8
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	4b63      	ldr	r3, [pc, #396]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	4960      	ldr	r1, [pc, #384]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ae2:	4b5f      	ldr	r3, [pc, #380]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	021b      	lsls	r3, r3, #8
 8005af0:	495b      	ldr	r1, [pc, #364]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d109      	bne.n	8005b10 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fd15 	bl	8006530 <RCC_SetFlashLatencyFromMSIRange>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e343      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b10:	f000 fc4a 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8005b14:	4602      	mov	r2, r0
 8005b16:	4b52      	ldr	r3, [pc, #328]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	091b      	lsrs	r3, r3, #4
 8005b1c:	f003 030f 	and.w	r3, r3, #15
 8005b20:	4950      	ldr	r1, [pc, #320]	@ (8005c64 <HAL_RCC_OscConfig+0x274>)
 8005b22:	5ccb      	ldrb	r3, [r1, r3]
 8005b24:	f003 031f 	and.w	r3, r3, #31
 8005b28:	fa22 f303 	lsr.w	r3, r2, r3
 8005b2c:	4a4e      	ldr	r2, [pc, #312]	@ (8005c68 <HAL_RCC_OscConfig+0x278>)
 8005b2e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005b30:	4b4e      	ldr	r3, [pc, #312]	@ (8005c6c <HAL_RCC_OscConfig+0x27c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fd fb99 	bl	800326c <HAL_InitTick>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d052      	beq.n	8005bea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	e327      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d032      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b50:	4b43      	ldr	r3, [pc, #268]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a42      	ldr	r2, [pc, #264]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005b56:	f043 0301 	orr.w	r3, r3, #1
 8005b5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b5c:	f7fd fbd6 	bl	800330c <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b64:	f7fd fbd2 	bl	800330c <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e310      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b76:	4b3a      	ldr	r3, [pc, #232]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0f0      	beq.n	8005b64 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b82:	4b37      	ldr	r3, [pc, #220]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a36      	ldr	r2, [pc, #216]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005b88:	f043 0308 	orr.w	r3, r3, #8
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	4b34      	ldr	r3, [pc, #208]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	4931      	ldr	r1, [pc, #196]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	021b      	lsls	r3, r3, #8
 8005bae:	492c      	ldr	r1, [pc, #176]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	604b      	str	r3, [r1, #4]
 8005bb4:	e01a      	b.n	8005bec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a29      	ldr	r2, [pc, #164]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005bbc:	f023 0301 	bic.w	r3, r3, #1
 8005bc0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005bc2:	f7fd fba3 	bl	800330c <HAL_GetTick>
 8005bc6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005bc8:	e008      	b.n	8005bdc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bca:	f7fd fb9f 	bl	800330c <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e2dd      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005bdc:	4b20      	ldr	r3, [pc, #128]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1f0      	bne.n	8005bca <HAL_RCC_OscConfig+0x1da>
 8005be8:	e000      	b.n	8005bec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005bea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d074      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d005      	beq.n	8005c0a <HAL_RCC_OscConfig+0x21a>
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2b0c      	cmp	r3, #12
 8005c02:	d10e      	bne.n	8005c22 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d10b      	bne.n	8005c22 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c0a:	4b15      	ldr	r3, [pc, #84]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d064      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x2f0>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d160      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e2ba      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c2a:	d106      	bne.n	8005c3a <HAL_RCC_OscConfig+0x24a>
 8005c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a0b      	ldr	r2, [pc, #44]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	e026      	b.n	8005c88 <HAL_RCC_OscConfig+0x298>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c42:	d115      	bne.n	8005c70 <HAL_RCC_OscConfig+0x280>
 8005c44:	4b06      	ldr	r3, [pc, #24]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a05      	ldr	r2, [pc, #20]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005c4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	4b03      	ldr	r3, [pc, #12]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a02      	ldr	r2, [pc, #8]	@ (8005c60 <HAL_RCC_OscConfig+0x270>)
 8005c56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	e014      	b.n	8005c88 <HAL_RCC_OscConfig+0x298>
 8005c5e:	bf00      	nop
 8005c60:	40021000 	.word	0x40021000
 8005c64:	0800ac74 	.word	0x0800ac74
 8005c68:	20000010 	.word	0x20000010
 8005c6c:	20000014 	.word	0x20000014
 8005c70:	4ba0      	ldr	r3, [pc, #640]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a9f      	ldr	r2, [pc, #636]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	4b9d      	ldr	r3, [pc, #628]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a9c      	ldr	r2, [pc, #624]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005c82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d013      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c90:	f7fd fb3c 	bl	800330c <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c98:	f7fd fb38 	bl	800330c <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b64      	cmp	r3, #100	@ 0x64
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e276      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005caa:	4b92      	ldr	r3, [pc, #584]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f0      	beq.n	8005c98 <HAL_RCC_OscConfig+0x2a8>
 8005cb6:	e014      	b.n	8005ce2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb8:	f7fd fb28 	bl	800330c <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cc0:	f7fd fb24 	bl	800330c <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b64      	cmp	r3, #100	@ 0x64
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e262      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cd2:	4b88      	ldr	r3, [pc, #544]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1f0      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x2d0>
 8005cde:	e000      	b.n	8005ce2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d060      	beq.n	8005db0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d005      	beq.n	8005d00 <HAL_RCC_OscConfig+0x310>
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	2b0c      	cmp	r3, #12
 8005cf8:	d119      	bne.n	8005d2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d116      	bne.n	8005d2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d00:	4b7c      	ldr	r3, [pc, #496]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_RCC_OscConfig+0x328>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e23f      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d18:	4b76      	ldr	r3, [pc, #472]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	061b      	lsls	r3, r3, #24
 8005d26:	4973      	ldr	r1, [pc, #460]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d2c:	e040      	b.n	8005db0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d023      	beq.n	8005d7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d36:	4b6f      	ldr	r3, [pc, #444]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a6e      	ldr	r2, [pc, #440]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005d3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d42:	f7fd fae3 	bl	800330c <HAL_GetTick>
 8005d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d48:	e008      	b.n	8005d5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d4a:	f7fd fadf 	bl	800330c <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e21d      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d5c:	4b65      	ldr	r3, [pc, #404]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d0f0      	beq.n	8005d4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d68:	4b62      	ldr	r3, [pc, #392]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	061b      	lsls	r3, r3, #24
 8005d76:	495f      	ldr	r1, [pc, #380]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	604b      	str	r3, [r1, #4]
 8005d7c:	e018      	b.n	8005db0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d7e:	4b5d      	ldr	r3, [pc, #372]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a5c      	ldr	r2, [pc, #368]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8a:	f7fd fabf 	bl	800330c <HAL_GetTick>
 8005d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d90:	e008      	b.n	8005da4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d92:	f7fd fabb 	bl	800330c <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d901      	bls.n	8005da4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e1f9      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005da4:	4b53      	ldr	r3, [pc, #332]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1f0      	bne.n	8005d92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0308 	and.w	r3, r3, #8
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d03c      	beq.n	8005e36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d01c      	beq.n	8005dfe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dc4:	4b4b      	ldr	r3, [pc, #300]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dca:	4a4a      	ldr	r2, [pc, #296]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005dcc:	f043 0301 	orr.w	r3, r3, #1
 8005dd0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd4:	f7fd fa9a 	bl	800330c <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ddc:	f7fd fa96 	bl	800330c <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e1d4      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dee:	4b41      	ldr	r3, [pc, #260]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0ef      	beq.n	8005ddc <HAL_RCC_OscConfig+0x3ec>
 8005dfc:	e01b      	b.n	8005e36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dfe:	4b3d      	ldr	r3, [pc, #244]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e04:	4a3b      	ldr	r2, [pc, #236]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005e06:	f023 0301 	bic.w	r3, r3, #1
 8005e0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e0e:	f7fd fa7d 	bl	800330c <HAL_GetTick>
 8005e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e14:	e008      	b.n	8005e28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e16:	f7fd fa79 	bl	800330c <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e1b7      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e28:	4b32      	ldr	r3, [pc, #200]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1ef      	bne.n	8005e16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 80a6 	beq.w	8005f90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e44:	2300      	movs	r3, #0
 8005e46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005e48:	4b2a      	ldr	r3, [pc, #168]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10d      	bne.n	8005e70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e54:	4b27      	ldr	r3, [pc, #156]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e58:	4a26      	ldr	r2, [pc, #152]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005e5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e60:	4b24      	ldr	r3, [pc, #144]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e68:	60bb      	str	r3, [r7, #8]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e70:	4b21      	ldr	r3, [pc, #132]	@ (8005ef8 <HAL_RCC_OscConfig+0x508>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d118      	bne.n	8005eae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ef8 <HAL_RCC_OscConfig+0x508>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a1d      	ldr	r2, [pc, #116]	@ (8005ef8 <HAL_RCC_OscConfig+0x508>)
 8005e82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e88:	f7fd fa40 	bl	800330c <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e90:	f7fd fa3c 	bl	800330c <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e17a      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ea2:	4b15      	ldr	r3, [pc, #84]	@ (8005ef8 <HAL_RCC_OscConfig+0x508>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0f0      	beq.n	8005e90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d108      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x4d8>
 8005eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005ebe:	f043 0301 	orr.w	r3, r3, #1
 8005ec2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ec6:	e029      	b.n	8005f1c <HAL_RCC_OscConfig+0x52c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	2b05      	cmp	r3, #5
 8005ece:	d115      	bne.n	8005efc <HAL_RCC_OscConfig+0x50c>
 8005ed0:	4b08      	ldr	r3, [pc, #32]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed6:	4a07      	ldr	r2, [pc, #28]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005ed8:	f043 0304 	orr.w	r3, r3, #4
 8005edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ee0:	4b04      	ldr	r3, [pc, #16]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ee6:	4a03      	ldr	r2, [pc, #12]	@ (8005ef4 <HAL_RCC_OscConfig+0x504>)
 8005ee8:	f043 0301 	orr.w	r3, r3, #1
 8005eec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ef0:	e014      	b.n	8005f1c <HAL_RCC_OscConfig+0x52c>
 8005ef2:	bf00      	nop
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	40007000 	.word	0x40007000
 8005efc:	4b9c      	ldr	r3, [pc, #624]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 8005efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f02:	4a9b      	ldr	r2, [pc, #620]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 8005f04:	f023 0301 	bic.w	r3, r3, #1
 8005f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f0c:	4b98      	ldr	r3, [pc, #608]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 8005f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f12:	4a97      	ldr	r2, [pc, #604]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 8005f14:	f023 0304 	bic.w	r3, r3, #4
 8005f18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d016      	beq.n	8005f52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f24:	f7fd f9f2 	bl	800330c <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f2a:	e00a      	b.n	8005f42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f2c:	f7fd f9ee 	bl	800330c <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e12a      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f42:	4b8b      	ldr	r3, [pc, #556]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 8005f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0ed      	beq.n	8005f2c <HAL_RCC_OscConfig+0x53c>
 8005f50:	e015      	b.n	8005f7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f52:	f7fd f9db 	bl	800330c <HAL_GetTick>
 8005f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f58:	e00a      	b.n	8005f70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f5a:	f7fd f9d7 	bl	800330c <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e113      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f70:	4b7f      	ldr	r3, [pc, #508]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 8005f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1ed      	bne.n	8005f5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f7e:	7ffb      	ldrb	r3, [r7, #31]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d105      	bne.n	8005f90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f84:	4b7a      	ldr	r3, [pc, #488]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 8005f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f88:	4a79      	ldr	r2, [pc, #484]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 8005f8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f8e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 80fe 	beq.w	8006196 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	f040 80d0 	bne.w	8006144 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005fa4:	4b72      	ldr	r3, [pc, #456]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f003 0203 	and.w	r2, r3, #3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d130      	bne.n	800601a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d127      	bne.n	800601a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d11f      	bne.n	800601a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005fe4:	2a07      	cmp	r2, #7
 8005fe6:	bf14      	ite	ne
 8005fe8:	2201      	movne	r2, #1
 8005fea:	2200      	moveq	r2, #0
 8005fec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d113      	bne.n	800601a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ffc:	085b      	lsrs	r3, r3, #1
 8005ffe:	3b01      	subs	r3, #1
 8006000:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006002:	429a      	cmp	r2, r3
 8006004:	d109      	bne.n	800601a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006010:	085b      	lsrs	r3, r3, #1
 8006012:	3b01      	subs	r3, #1
 8006014:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006016:	429a      	cmp	r2, r3
 8006018:	d06e      	beq.n	80060f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	2b0c      	cmp	r3, #12
 800601e:	d069      	beq.n	80060f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006020:	4b53      	ldr	r3, [pc, #332]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d105      	bne.n	8006038 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800602c:	4b50      	ldr	r3, [pc, #320]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e0ad      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800603c:	4b4c      	ldr	r3, [pc, #304]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a4b      	ldr	r2, [pc, #300]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 8006042:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006046:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006048:	f7fd f960 	bl	800330c <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006050:	f7fd f95c 	bl	800330c <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b02      	cmp	r3, #2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e09a      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006062:	4b43      	ldr	r3, [pc, #268]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f0      	bne.n	8006050 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800606e:	4b40      	ldr	r3, [pc, #256]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	4b40      	ldr	r3, [pc, #256]	@ (8006174 <HAL_RCC_OscConfig+0x784>)
 8006074:	4013      	ands	r3, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800607e:	3a01      	subs	r2, #1
 8006080:	0112      	lsls	r2, r2, #4
 8006082:	4311      	orrs	r1, r2
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006088:	0212      	lsls	r2, r2, #8
 800608a:	4311      	orrs	r1, r2
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006090:	0852      	lsrs	r2, r2, #1
 8006092:	3a01      	subs	r2, #1
 8006094:	0552      	lsls	r2, r2, #21
 8006096:	4311      	orrs	r1, r2
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800609c:	0852      	lsrs	r2, r2, #1
 800609e:	3a01      	subs	r2, #1
 80060a0:	0652      	lsls	r2, r2, #25
 80060a2:	4311      	orrs	r1, r2
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80060a8:	0912      	lsrs	r2, r2, #4
 80060aa:	0452      	lsls	r2, r2, #17
 80060ac:	430a      	orrs	r2, r1
 80060ae:	4930      	ldr	r1, [pc, #192]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80060b4:	4b2e      	ldr	r3, [pc, #184]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a2d      	ldr	r2, [pc, #180]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 80060ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	4a2a      	ldr	r2, [pc, #168]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 80060c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80060cc:	f7fd f91e 	bl	800330c <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d4:	f7fd f91a 	bl	800330c <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e058      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060e6:	4b22      	ldr	r3, [pc, #136]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0f0      	beq.n	80060d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060f2:	e050      	b.n	8006196 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e04f      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d148      	bne.n	8006196 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006104:	4b1a      	ldr	r3, [pc, #104]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a19      	ldr	r2, [pc, #100]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 800610a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800610e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006110:	4b17      	ldr	r3, [pc, #92]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	4a16      	ldr	r2, [pc, #88]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 8006116:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800611a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800611c:	f7fd f8f6 	bl	800330c <HAL_GetTick>
 8006120:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006122:	e008      	b.n	8006136 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006124:	f7fd f8f2 	bl	800330c <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b02      	cmp	r3, #2
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e030      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006136:	4b0e      	ldr	r3, [pc, #56]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d0f0      	beq.n	8006124 <HAL_RCC_OscConfig+0x734>
 8006142:	e028      	b.n	8006196 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	2b0c      	cmp	r3, #12
 8006148:	d023      	beq.n	8006192 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800614a:	4b09      	ldr	r3, [pc, #36]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a08      	ldr	r2, [pc, #32]	@ (8006170 <HAL_RCC_OscConfig+0x780>)
 8006150:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006156:	f7fd f8d9 	bl	800330c <HAL_GetTick>
 800615a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800615c:	e00c      	b.n	8006178 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800615e:	f7fd f8d5 	bl	800330c <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d905      	bls.n	8006178 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e013      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
 8006170:	40021000 	.word	0x40021000
 8006174:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006178:	4b09      	ldr	r3, [pc, #36]	@ (80061a0 <HAL_RCC_OscConfig+0x7b0>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1ec      	bne.n	800615e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006184:	4b06      	ldr	r3, [pc, #24]	@ (80061a0 <HAL_RCC_OscConfig+0x7b0>)
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	4905      	ldr	r1, [pc, #20]	@ (80061a0 <HAL_RCC_OscConfig+0x7b0>)
 800618a:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <HAL_RCC_OscConfig+0x7b4>)
 800618c:	4013      	ands	r3, r2
 800618e:	60cb      	str	r3, [r1, #12]
 8006190:	e001      	b.n	8006196 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e000      	b.n	8006198 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3720      	adds	r7, #32
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40021000 	.word	0x40021000
 80061a4:	feeefffc 	.word	0xfeeefffc

080061a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0e7      	b.n	800638c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061bc:	4b75      	ldr	r3, [pc, #468]	@ (8006394 <HAL_RCC_ClockConfig+0x1ec>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0307 	and.w	r3, r3, #7
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d910      	bls.n	80061ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ca:	4b72      	ldr	r3, [pc, #456]	@ (8006394 <HAL_RCC_ClockConfig+0x1ec>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f023 0207 	bic.w	r2, r3, #7
 80061d2:	4970      	ldr	r1, [pc, #448]	@ (8006394 <HAL_RCC_ClockConfig+0x1ec>)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061da:	4b6e      	ldr	r3, [pc, #440]	@ (8006394 <HAL_RCC_ClockConfig+0x1ec>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d001      	beq.n	80061ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e0cf      	b.n	800638c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d010      	beq.n	800621a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	4b66      	ldr	r3, [pc, #408]	@ (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006204:	429a      	cmp	r2, r3
 8006206:	d908      	bls.n	800621a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006208:	4b63      	ldr	r3, [pc, #396]	@ (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	4960      	ldr	r1, [pc, #384]	@ (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006216:	4313      	orrs	r3, r2
 8006218:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d04c      	beq.n	80062c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2b03      	cmp	r3, #3
 800622c:	d107      	bne.n	800623e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800622e:	4b5a      	ldr	r3, [pc, #360]	@ (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d121      	bne.n	800627e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e0a6      	b.n	800638c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2b02      	cmp	r3, #2
 8006244:	d107      	bne.n	8006256 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006246:	4b54      	ldr	r3, [pc, #336]	@ (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d115      	bne.n	800627e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e09a      	b.n	800638c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d107      	bne.n	800626e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800625e:	4b4e      	ldr	r3, [pc, #312]	@ (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d109      	bne.n	800627e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e08e      	b.n	800638c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800626e:	4b4a      	ldr	r3, [pc, #296]	@ (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e086      	b.n	800638c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800627e:	4b46      	ldr	r3, [pc, #280]	@ (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f023 0203 	bic.w	r2, r3, #3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	4943      	ldr	r1, [pc, #268]	@ (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 800628c:	4313      	orrs	r3, r2
 800628e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006290:	f7fd f83c 	bl	800330c <HAL_GetTick>
 8006294:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006296:	e00a      	b.n	80062ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006298:	f7fd f838 	bl	800330c <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e06e      	b.n	800638c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ae:	4b3a      	ldr	r3, [pc, #232]	@ (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 020c 	and.w	r2, r3, #12
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	429a      	cmp	r2, r3
 80062be:	d1eb      	bne.n	8006298 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d010      	beq.n	80062ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	4b31      	ldr	r3, [pc, #196]	@ (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062d8:	429a      	cmp	r2, r3
 80062da:	d208      	bcs.n	80062ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062dc:	4b2e      	ldr	r3, [pc, #184]	@ (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	492b      	ldr	r1, [pc, #172]	@ (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062ee:	4b29      	ldr	r3, [pc, #164]	@ (8006394 <HAL_RCC_ClockConfig+0x1ec>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d210      	bcs.n	800631e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062fc:	4b25      	ldr	r3, [pc, #148]	@ (8006394 <HAL_RCC_ClockConfig+0x1ec>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f023 0207 	bic.w	r2, r3, #7
 8006304:	4923      	ldr	r1, [pc, #140]	@ (8006394 <HAL_RCC_ClockConfig+0x1ec>)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	4313      	orrs	r3, r2
 800630a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800630c:	4b21      	ldr	r3, [pc, #132]	@ (8006394 <HAL_RCC_ClockConfig+0x1ec>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d001      	beq.n	800631e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e036      	b.n	800638c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	d008      	beq.n	800633c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800632a:	4b1b      	ldr	r3, [pc, #108]	@ (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	4918      	ldr	r1, [pc, #96]	@ (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006338:	4313      	orrs	r3, r2
 800633a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0308 	and.w	r3, r3, #8
 8006344:	2b00      	cmp	r3, #0
 8006346:	d009      	beq.n	800635c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006348:	4b13      	ldr	r3, [pc, #76]	@ (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	4910      	ldr	r1, [pc, #64]	@ (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006358:	4313      	orrs	r3, r2
 800635a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800635c:	f000 f824 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8006360:	4602      	mov	r2, r0
 8006362:	4b0d      	ldr	r3, [pc, #52]	@ (8006398 <HAL_RCC_ClockConfig+0x1f0>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	091b      	lsrs	r3, r3, #4
 8006368:	f003 030f 	and.w	r3, r3, #15
 800636c:	490b      	ldr	r1, [pc, #44]	@ (800639c <HAL_RCC_ClockConfig+0x1f4>)
 800636e:	5ccb      	ldrb	r3, [r1, r3]
 8006370:	f003 031f 	and.w	r3, r3, #31
 8006374:	fa22 f303 	lsr.w	r3, r2, r3
 8006378:	4a09      	ldr	r2, [pc, #36]	@ (80063a0 <HAL_RCC_ClockConfig+0x1f8>)
 800637a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800637c:	4b09      	ldr	r3, [pc, #36]	@ (80063a4 <HAL_RCC_ClockConfig+0x1fc>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f7fc ff73 	bl	800326c <HAL_InitTick>
 8006386:	4603      	mov	r3, r0
 8006388:	72fb      	strb	r3, [r7, #11]

  return status;
 800638a:	7afb      	ldrb	r3, [r7, #11]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	40022000 	.word	0x40022000
 8006398:	40021000 	.word	0x40021000
 800639c:	0800ac74 	.word	0x0800ac74
 80063a0:	20000010 	.word	0x20000010
 80063a4:	20000014 	.word	0x20000014

080063a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b089      	sub	sp, #36	@ 0x24
 80063ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	61fb      	str	r3, [r7, #28]
 80063b2:	2300      	movs	r3, #0
 80063b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063b6:	4b3e      	ldr	r3, [pc, #248]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f003 030c 	and.w	r3, r3, #12
 80063be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063c0:	4b3b      	ldr	r3, [pc, #236]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0303 	and.w	r3, r3, #3
 80063c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d005      	beq.n	80063dc <HAL_RCC_GetSysClockFreq+0x34>
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2b0c      	cmp	r3, #12
 80063d4:	d121      	bne.n	800641a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d11e      	bne.n	800641a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80063dc:	4b34      	ldr	r3, [pc, #208]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d107      	bne.n	80063f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80063e8:	4b31      	ldr	r3, [pc, #196]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	f003 030f 	and.w	r3, r3, #15
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	e005      	b.n	8006404 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80063f8:	4b2d      	ldr	r3, [pc, #180]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	091b      	lsrs	r3, r3, #4
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006404:	4a2b      	ldr	r2, [pc, #172]	@ (80064b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800640c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10d      	bne.n	8006430 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006418:	e00a      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b04      	cmp	r3, #4
 800641e:	d102      	bne.n	8006426 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006420:	4b25      	ldr	r3, [pc, #148]	@ (80064b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	e004      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b08      	cmp	r3, #8
 800642a:	d101      	bne.n	8006430 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800642c:	4b23      	ldr	r3, [pc, #140]	@ (80064bc <HAL_RCC_GetSysClockFreq+0x114>)
 800642e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	2b0c      	cmp	r3, #12
 8006434:	d134      	bne.n	80064a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006436:	4b1e      	ldr	r3, [pc, #120]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b02      	cmp	r3, #2
 8006444:	d003      	beq.n	800644e <HAL_RCC_GetSysClockFreq+0xa6>
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b03      	cmp	r3, #3
 800644a:	d003      	beq.n	8006454 <HAL_RCC_GetSysClockFreq+0xac>
 800644c:	e005      	b.n	800645a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800644e:	4b1a      	ldr	r3, [pc, #104]	@ (80064b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006450:	617b      	str	r3, [r7, #20]
      break;
 8006452:	e005      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006454:	4b19      	ldr	r3, [pc, #100]	@ (80064bc <HAL_RCC_GetSysClockFreq+0x114>)
 8006456:	617b      	str	r3, [r7, #20]
      break;
 8006458:	e002      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	617b      	str	r3, [r7, #20]
      break;
 800645e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006460:	4b13      	ldr	r3, [pc, #76]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	091b      	lsrs	r3, r3, #4
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	3301      	adds	r3, #1
 800646c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800646e:	4b10      	ldr	r3, [pc, #64]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	0a1b      	lsrs	r3, r3, #8
 8006474:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	fb03 f202 	mul.w	r2, r3, r2
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	fbb2 f3f3 	udiv	r3, r2, r3
 8006484:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006486:	4b0a      	ldr	r3, [pc, #40]	@ (80064b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	0e5b      	lsrs	r3, r3, #25
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	3301      	adds	r3, #1
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80064a0:	69bb      	ldr	r3, [r7, #24]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3724      	adds	r7, #36	@ 0x24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40021000 	.word	0x40021000
 80064b4:	0800ac8c 	.word	0x0800ac8c
 80064b8:	00f42400 	.word	0x00f42400
 80064bc:	007a1200 	.word	0x007a1200

080064c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064c4:	4b03      	ldr	r3, [pc, #12]	@ (80064d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80064c6:	681b      	ldr	r3, [r3, #0]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	20000010 	.word	0x20000010

080064d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80064dc:	f7ff fff0 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 80064e0:	4602      	mov	r2, r0
 80064e2:	4b06      	ldr	r3, [pc, #24]	@ (80064fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	0a1b      	lsrs	r3, r3, #8
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	4904      	ldr	r1, [pc, #16]	@ (8006500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064ee:	5ccb      	ldrb	r3, [r1, r3]
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40021000 	.word	0x40021000
 8006500:	0800ac84 	.word	0x0800ac84

08006504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006508:	f7ff ffda 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 800650c:	4602      	mov	r2, r0
 800650e:	4b06      	ldr	r3, [pc, #24]	@ (8006528 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	0adb      	lsrs	r3, r3, #11
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	4904      	ldr	r1, [pc, #16]	@ (800652c <HAL_RCC_GetPCLK2Freq+0x28>)
 800651a:	5ccb      	ldrb	r3, [r1, r3]
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006524:	4618      	mov	r0, r3
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40021000 	.word	0x40021000
 800652c:	0800ac84 	.word	0x0800ac84

08006530 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006538:	2300      	movs	r3, #0
 800653a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800653c:	4b2a      	ldr	r3, [pc, #168]	@ (80065e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800653e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006548:	f7ff f9ee 	bl	8005928 <HAL_PWREx_GetVoltageRange>
 800654c:	6178      	str	r0, [r7, #20]
 800654e:	e014      	b.n	800657a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006550:	4b25      	ldr	r3, [pc, #148]	@ (80065e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006554:	4a24      	ldr	r2, [pc, #144]	@ (80065e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800655a:	6593      	str	r3, [r2, #88]	@ 0x58
 800655c:	4b22      	ldr	r3, [pc, #136]	@ (80065e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800655e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006568:	f7ff f9de 	bl	8005928 <HAL_PWREx_GetVoltageRange>
 800656c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800656e:	4b1e      	ldr	r3, [pc, #120]	@ (80065e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006572:	4a1d      	ldr	r2, [pc, #116]	@ (80065e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006574:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006578:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006580:	d10b      	bne.n	800659a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b80      	cmp	r3, #128	@ 0x80
 8006586:	d919      	bls.n	80065bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2ba0      	cmp	r3, #160	@ 0xa0
 800658c:	d902      	bls.n	8006594 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800658e:	2302      	movs	r3, #2
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	e013      	b.n	80065bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006594:	2301      	movs	r3, #1
 8006596:	613b      	str	r3, [r7, #16]
 8006598:	e010      	b.n	80065bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b80      	cmp	r3, #128	@ 0x80
 800659e:	d902      	bls.n	80065a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80065a0:	2303      	movs	r3, #3
 80065a2:	613b      	str	r3, [r7, #16]
 80065a4:	e00a      	b.n	80065bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b80      	cmp	r3, #128	@ 0x80
 80065aa:	d102      	bne.n	80065b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80065ac:	2302      	movs	r3, #2
 80065ae:	613b      	str	r3, [r7, #16]
 80065b0:	e004      	b.n	80065bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b70      	cmp	r3, #112	@ 0x70
 80065b6:	d101      	bne.n	80065bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80065b8:	2301      	movs	r3, #1
 80065ba:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80065bc:	4b0b      	ldr	r3, [pc, #44]	@ (80065ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f023 0207 	bic.w	r2, r3, #7
 80065c4:	4909      	ldr	r1, [pc, #36]	@ (80065ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80065cc:	4b07      	ldr	r3, [pc, #28]	@ (80065ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0307 	and.w	r3, r3, #7
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d001      	beq.n	80065de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e000      	b.n	80065e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	40021000 	.word	0x40021000
 80065ec:	40022000 	.word	0x40022000

080065f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065f8:	2300      	movs	r3, #0
 80065fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065fc:	2300      	movs	r3, #0
 80065fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006608:	2b00      	cmp	r3, #0
 800660a:	d041      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006610:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006614:	d02a      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006616:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800661a:	d824      	bhi.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800661c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006620:	d008      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006622:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006626:	d81e      	bhi.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00a      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800662c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006630:	d010      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006632:	e018      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006634:	4b86      	ldr	r3, [pc, #536]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4a85      	ldr	r2, [pc, #532]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800663a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800663e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006640:	e015      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	3304      	adds	r3, #4
 8006646:	2100      	movs	r1, #0
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fabb 	bl	8006bc4 <RCCEx_PLLSAI1_Config>
 800664e:	4603      	mov	r3, r0
 8006650:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006652:	e00c      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3320      	adds	r3, #32
 8006658:	2100      	movs	r1, #0
 800665a:	4618      	mov	r0, r3
 800665c:	f000 fba6 	bl	8006dac <RCCEx_PLLSAI2_Config>
 8006660:	4603      	mov	r3, r0
 8006662:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006664:	e003      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	74fb      	strb	r3, [r7, #19]
      break;
 800666a:	e000      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800666c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800666e:	7cfb      	ldrb	r3, [r7, #19]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10b      	bne.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006674:	4b76      	ldr	r3, [pc, #472]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800667a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006682:	4973      	ldr	r1, [pc, #460]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006684:	4313      	orrs	r3, r2
 8006686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800668a:	e001      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668c:	7cfb      	ldrb	r3, [r7, #19]
 800668e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d041      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80066a4:	d02a      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80066a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80066aa:	d824      	bhi.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80066ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066b0:	d008      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80066b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80066b6:	d81e      	bhi.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80066bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066c0:	d010      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80066c2:	e018      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80066c4:	4b62      	ldr	r3, [pc, #392]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	4a61      	ldr	r2, [pc, #388]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80066d0:	e015      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	3304      	adds	r3, #4
 80066d6:	2100      	movs	r1, #0
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 fa73 	bl	8006bc4 <RCCEx_PLLSAI1_Config>
 80066de:	4603      	mov	r3, r0
 80066e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80066e2:	e00c      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3320      	adds	r3, #32
 80066e8:	2100      	movs	r1, #0
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fb5e 	bl	8006dac <RCCEx_PLLSAI2_Config>
 80066f0:	4603      	mov	r3, r0
 80066f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80066f4:	e003      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	74fb      	strb	r3, [r7, #19]
      break;
 80066fa:	e000      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80066fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066fe:	7cfb      	ldrb	r3, [r7, #19]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10b      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006704:	4b52      	ldr	r3, [pc, #328]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800670a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006712:	494f      	ldr	r1, [pc, #316]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006714:	4313      	orrs	r3, r2
 8006716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800671a:	e001      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671c:	7cfb      	ldrb	r3, [r7, #19]
 800671e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 80a0 	beq.w	800686e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800672e:	2300      	movs	r3, #0
 8006730:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006732:	4b47      	ldr	r3, [pc, #284]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d101      	bne.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800673e:	2301      	movs	r3, #1
 8006740:	e000      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006742:	2300      	movs	r3, #0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00d      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006748:	4b41      	ldr	r3, [pc, #260]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800674a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800674c:	4a40      	ldr	r2, [pc, #256]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800674e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006752:	6593      	str	r3, [r2, #88]	@ 0x58
 8006754:	4b3e      	ldr	r3, [pc, #248]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800675c:	60bb      	str	r3, [r7, #8]
 800675e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006760:	2301      	movs	r3, #1
 8006762:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006764:	4b3b      	ldr	r3, [pc, #236]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a3a      	ldr	r2, [pc, #232]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800676a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800676e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006770:	f7fc fdcc 	bl	800330c <HAL_GetTick>
 8006774:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006776:	e009      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006778:	f7fc fdc8 	bl	800330c <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d902      	bls.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	74fb      	strb	r3, [r7, #19]
        break;
 800678a:	e005      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800678c:	4b31      	ldr	r3, [pc, #196]	@ (8006854 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0ef      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006798:	7cfb      	ldrb	r3, [r7, #19]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d15c      	bne.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800679e:	4b2c      	ldr	r3, [pc, #176]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01f      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d019      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80067bc:	4b24      	ldr	r3, [pc, #144]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80067c8:	4b21      	ldr	r3, [pc, #132]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ce:	4a20      	ldr	r2, [pc, #128]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80067d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067de:	4a1c      	ldr	r2, [pc, #112]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80067e8:	4a19      	ldr	r2, [pc, #100]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d016      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fa:	f7fc fd87 	bl	800330c <HAL_GetTick>
 80067fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006800:	e00b      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006802:	f7fc fd83 	bl	800330c <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006810:	4293      	cmp	r3, r2
 8006812:	d902      	bls.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	74fb      	strb	r3, [r7, #19]
            break;
 8006818:	e006      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800681a:	4b0d      	ldr	r3, [pc, #52]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800681c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d0ec      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006828:	7cfb      	ldrb	r3, [r7, #19]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10c      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800682e:	4b08      	ldr	r3, [pc, #32]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006834:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800683e:	4904      	ldr	r1, [pc, #16]	@ (8006850 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006840:	4313      	orrs	r3, r2
 8006842:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006846:	e009      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006848:	7cfb      	ldrb	r3, [r7, #19]
 800684a:	74bb      	strb	r3, [r7, #18]
 800684c:	e006      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800684e:	bf00      	nop
 8006850:	40021000 	.word	0x40021000
 8006854:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006858:	7cfb      	ldrb	r3, [r7, #19]
 800685a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800685c:	7c7b      	ldrb	r3, [r7, #17]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d105      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006862:	4b9e      	ldr	r3, [pc, #632]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006866:	4a9d      	ldr	r2, [pc, #628]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006868:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800686c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800687a:	4b98      	ldr	r3, [pc, #608]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800687c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006880:	f023 0203 	bic.w	r2, r3, #3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006888:	4994      	ldr	r1, [pc, #592]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800688a:	4313      	orrs	r3, r2
 800688c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800689c:	4b8f      	ldr	r3, [pc, #572]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800689e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a2:	f023 020c 	bic.w	r2, r3, #12
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068aa:	498c      	ldr	r1, [pc, #560]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0304 	and.w	r3, r3, #4
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068be:	4b87      	ldr	r3, [pc, #540]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068cc:	4983      	ldr	r1, [pc, #524]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0308 	and.w	r3, r3, #8
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00a      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80068e0:	4b7e      	ldr	r3, [pc, #504]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ee:	497b      	ldr	r1, [pc, #492]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0310 	and.w	r3, r3, #16
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006902:	4b76      	ldr	r3, [pc, #472]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006908:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006910:	4972      	ldr	r1, [pc, #456]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006912:	4313      	orrs	r3, r2
 8006914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0320 	and.w	r3, r3, #32
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00a      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006924:	4b6d      	ldr	r3, [pc, #436]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800692a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006932:	496a      	ldr	r1, [pc, #424]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006934:	4313      	orrs	r3, r2
 8006936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006946:	4b65      	ldr	r3, [pc, #404]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800694c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006954:	4961      	ldr	r1, [pc, #388]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006956:	4313      	orrs	r3, r2
 8006958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006968:	4b5c      	ldr	r3, [pc, #368]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800696a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800696e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006976:	4959      	ldr	r1, [pc, #356]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006978:	4313      	orrs	r3, r2
 800697a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800698a:	4b54      	ldr	r3, [pc, #336]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800698c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006990:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006998:	4950      	ldr	r1, [pc, #320]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800699a:	4313      	orrs	r3, r2
 800699c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80069ac:	4b4b      	ldr	r3, [pc, #300]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ba:	4948      	ldr	r1, [pc, #288]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069ce:	4b43      	ldr	r3, [pc, #268]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069dc:	493f      	ldr	r1, [pc, #252]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d028      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069f0:	4b3a      	ldr	r3, [pc, #232]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069fe:	4937      	ldr	r1, [pc, #220]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a0e:	d106      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a10:	4b32      	ldr	r3, [pc, #200]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	4a31      	ldr	r2, [pc, #196]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a1a:	60d3      	str	r3, [r2, #12]
 8006a1c:	e011      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a26:	d10c      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 f8c8 	bl	8006bc4 <RCCEx_PLLSAI1_Config>
 8006a34:	4603      	mov	r3, r0
 8006a36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006a38:	7cfb      	ldrb	r3, [r7, #19]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006a3e:	7cfb      	ldrb	r3, [r7, #19]
 8006a40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d028      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a4e:	4b23      	ldr	r3, [pc, #140]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a54:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a5c:	491f      	ldr	r1, [pc, #124]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a6c:	d106      	bne.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	4a1a      	ldr	r2, [pc, #104]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a78:	60d3      	str	r3, [r2, #12]
 8006a7a:	e011      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a84:	d10c      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	3304      	adds	r3, #4
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 f899 	bl	8006bc4 <RCCEx_PLLSAI1_Config>
 8006a92:	4603      	mov	r3, r0
 8006a94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a96:	7cfb      	ldrb	r3, [r7, #19]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006a9c:	7cfb      	ldrb	r3, [r7, #19]
 8006a9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d02b      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006aac:	4b0b      	ldr	r3, [pc, #44]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ab2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aba:	4908      	ldr	r1, [pc, #32]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ac6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006aca:	d109      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006acc:	4b03      	ldr	r3, [pc, #12]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	4a02      	ldr	r2, [pc, #8]	@ (8006adc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ad6:	60d3      	str	r3, [r2, #12]
 8006ad8:	e014      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006ada:	bf00      	nop
 8006adc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ae4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ae8:	d10c      	bne.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	3304      	adds	r3, #4
 8006aee:	2101      	movs	r1, #1
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 f867 	bl	8006bc4 <RCCEx_PLLSAI1_Config>
 8006af6:	4603      	mov	r3, r0
 8006af8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006afa:	7cfb      	ldrb	r3, [r7, #19]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006b00:	7cfb      	ldrb	r3, [r7, #19]
 8006b02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d02f      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b10:	4b2b      	ldr	r3, [pc, #172]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b1e:	4928      	ldr	r1, [pc, #160]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b2e:	d10d      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3304      	adds	r3, #4
 8006b34:	2102      	movs	r1, #2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 f844 	bl	8006bc4 <RCCEx_PLLSAI1_Config>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b40:	7cfb      	ldrb	r3, [r7, #19]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d014      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006b46:	7cfb      	ldrb	r3, [r7, #19]
 8006b48:	74bb      	strb	r3, [r7, #18]
 8006b4a:	e011      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b54:	d10c      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3320      	adds	r3, #32
 8006b5a:	2102      	movs	r1, #2
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 f925 	bl	8006dac <RCCEx_PLLSAI2_Config>
 8006b62:	4603      	mov	r3, r0
 8006b64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b66:	7cfb      	ldrb	r3, [r7, #19]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006b6c:	7cfb      	ldrb	r3, [r7, #19]
 8006b6e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00a      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b7c:	4b10      	ldr	r3, [pc, #64]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b82:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b8a:	490d      	ldr	r1, [pc, #52]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00b      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b9e:	4b08      	ldr	r3, [pc, #32]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ba4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bae:	4904      	ldr	r1, [pc, #16]	@ (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006bb6:	7cbb      	ldrb	r3, [r7, #18]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3718      	adds	r7, #24
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	40021000 	.word	0x40021000

08006bc4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006bd2:	4b75      	ldr	r3, [pc, #468]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f003 0303 	and.w	r3, r3, #3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d018      	beq.n	8006c10 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006bde:	4b72      	ldr	r3, [pc, #456]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f003 0203 	and.w	r2, r3, #3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d10d      	bne.n	8006c0a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
       ||
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d009      	beq.n	8006c0a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006bf6:	4b6c      	ldr	r3, [pc, #432]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	091b      	lsrs	r3, r3, #4
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
       ||
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d047      	beq.n	8006c9a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	73fb      	strb	r3, [r7, #15]
 8006c0e:	e044      	b.n	8006c9a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b03      	cmp	r3, #3
 8006c16:	d018      	beq.n	8006c4a <RCCEx_PLLSAI1_Config+0x86>
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d825      	bhi.n	8006c68 <RCCEx_PLLSAI1_Config+0xa4>
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d002      	beq.n	8006c26 <RCCEx_PLLSAI1_Config+0x62>
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d009      	beq.n	8006c38 <RCCEx_PLLSAI1_Config+0x74>
 8006c24:	e020      	b.n	8006c68 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c26:	4b60      	ldr	r3, [pc, #384]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d11d      	bne.n	8006c6e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c36:	e01a      	b.n	8006c6e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c38:	4b5b      	ldr	r3, [pc, #364]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d116      	bne.n	8006c72 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c48:	e013      	b.n	8006c72 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c4a:	4b57      	ldr	r3, [pc, #348]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10f      	bne.n	8006c76 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c56:	4b54      	ldr	r3, [pc, #336]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d109      	bne.n	8006c76 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c66:	e006      	b.n	8006c76 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c6c:	e004      	b.n	8006c78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c6e:	bf00      	nop
 8006c70:	e002      	b.n	8006c78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c72:	bf00      	nop
 8006c74:	e000      	b.n	8006c78 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c76:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10d      	bne.n	8006c9a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6819      	ldr	r1, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	011b      	lsls	r3, r3, #4
 8006c92:	430b      	orrs	r3, r1
 8006c94:	4944      	ldr	r1, [pc, #272]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d17d      	bne.n	8006d9c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006ca0:	4b41      	ldr	r3, [pc, #260]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a40      	ldr	r2, [pc, #256]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ca6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006caa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cac:	f7fc fb2e 	bl	800330c <HAL_GetTick>
 8006cb0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006cb2:	e009      	b.n	8006cc8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006cb4:	f7fc fb2a 	bl	800330c <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d902      	bls.n	8006cc8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	73fb      	strb	r3, [r7, #15]
        break;
 8006cc6:	e005      	b.n	8006cd4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006cc8:	4b37      	ldr	r3, [pc, #220]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1ef      	bne.n	8006cb4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d160      	bne.n	8006d9c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d111      	bne.n	8006d04 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ce0:	4b31      	ldr	r3, [pc, #196]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006ce8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6892      	ldr	r2, [r2, #8]
 8006cf0:	0211      	lsls	r1, r2, #8
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	68d2      	ldr	r2, [r2, #12]
 8006cf6:	0912      	lsrs	r2, r2, #4
 8006cf8:	0452      	lsls	r2, r2, #17
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	492a      	ldr	r1, [pc, #168]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	610b      	str	r3, [r1, #16]
 8006d02:	e027      	b.n	8006d54 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d112      	bne.n	8006d30 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d0a:	4b27      	ldr	r3, [pc, #156]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006d12:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	6892      	ldr	r2, [r2, #8]
 8006d1a:	0211      	lsls	r1, r2, #8
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	6912      	ldr	r2, [r2, #16]
 8006d20:	0852      	lsrs	r2, r2, #1
 8006d22:	3a01      	subs	r2, #1
 8006d24:	0552      	lsls	r2, r2, #21
 8006d26:	430a      	orrs	r2, r1
 8006d28:	491f      	ldr	r1, [pc, #124]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	610b      	str	r3, [r1, #16]
 8006d2e:	e011      	b.n	8006d54 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d30:	4b1d      	ldr	r3, [pc, #116]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006d38:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	6892      	ldr	r2, [r2, #8]
 8006d40:	0211      	lsls	r1, r2, #8
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6952      	ldr	r2, [r2, #20]
 8006d46:	0852      	lsrs	r2, r2, #1
 8006d48:	3a01      	subs	r2, #1
 8006d4a:	0652      	lsls	r2, r2, #25
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	4916      	ldr	r1, [pc, #88]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006d54:	4b14      	ldr	r3, [pc, #80]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a13      	ldr	r2, [pc, #76]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d60:	f7fc fad4 	bl	800330c <HAL_GetTick>
 8006d64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d66:	e009      	b.n	8006d7c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d68:	f7fc fad0 	bl	800330c <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d902      	bls.n	8006d7c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	73fb      	strb	r3, [r7, #15]
          break;
 8006d7a:	e005      	b.n	8006d88 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d0ef      	beq.n	8006d68 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d106      	bne.n	8006d9c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006d8e:	4b06      	ldr	r3, [pc, #24]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d90:	691a      	ldr	r2, [r3, #16]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	4904      	ldr	r1, [pc, #16]	@ (8006da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	40021000 	.word	0x40021000

08006dac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006dba:	4b6a      	ldr	r3, [pc, #424]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f003 0303 	and.w	r3, r3, #3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d018      	beq.n	8006df8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006dc6:	4b67      	ldr	r3, [pc, #412]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	f003 0203 	and.w	r2, r3, #3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d10d      	bne.n	8006df2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
       ||
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d009      	beq.n	8006df2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006dde:	4b61      	ldr	r3, [pc, #388]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	091b      	lsrs	r3, r3, #4
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
       ||
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d047      	beq.n	8006e82 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	73fb      	strb	r3, [r7, #15]
 8006df6:	e044      	b.n	8006e82 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d018      	beq.n	8006e32 <RCCEx_PLLSAI2_Config+0x86>
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d825      	bhi.n	8006e50 <RCCEx_PLLSAI2_Config+0xa4>
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d002      	beq.n	8006e0e <RCCEx_PLLSAI2_Config+0x62>
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d009      	beq.n	8006e20 <RCCEx_PLLSAI2_Config+0x74>
 8006e0c:	e020      	b.n	8006e50 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006e0e:	4b55      	ldr	r3, [pc, #340]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d11d      	bne.n	8006e56 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e1e:	e01a      	b.n	8006e56 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006e20:	4b50      	ldr	r3, [pc, #320]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d116      	bne.n	8006e5a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e30:	e013      	b.n	8006e5a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006e32:	4b4c      	ldr	r3, [pc, #304]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10f      	bne.n	8006e5e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006e3e:	4b49      	ldr	r3, [pc, #292]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d109      	bne.n	8006e5e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e4e:	e006      	b.n	8006e5e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	73fb      	strb	r3, [r7, #15]
      break;
 8006e54:	e004      	b.n	8006e60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006e56:	bf00      	nop
 8006e58:	e002      	b.n	8006e60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006e5a:	bf00      	nop
 8006e5c:	e000      	b.n	8006e60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006e5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10d      	bne.n	8006e82 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006e66:	4b3f      	ldr	r3, [pc, #252]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6819      	ldr	r1, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	011b      	lsls	r3, r3, #4
 8006e7a:	430b      	orrs	r3, r1
 8006e7c:	4939      	ldr	r1, [pc, #228]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d167      	bne.n	8006f58 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006e88:	4b36      	ldr	r3, [pc, #216]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a35      	ldr	r2, [pc, #212]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e94:	f7fc fa3a 	bl	800330c <HAL_GetTick>
 8006e98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e9a:	e009      	b.n	8006eb0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e9c:	f7fc fa36 	bl	800330c <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d902      	bls.n	8006eb0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	73fb      	strb	r3, [r7, #15]
        break;
 8006eae:	e005      	b.n	8006ebc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006eb0:	4b2c      	ldr	r3, [pc, #176]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1ef      	bne.n	8006e9c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d14a      	bne.n	8006f58 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d111      	bne.n	8006eec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ec8:	4b26      	ldr	r3, [pc, #152]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006ed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	6892      	ldr	r2, [r2, #8]
 8006ed8:	0211      	lsls	r1, r2, #8
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	68d2      	ldr	r2, [r2, #12]
 8006ede:	0912      	lsrs	r2, r2, #4
 8006ee0:	0452      	lsls	r2, r2, #17
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	491f      	ldr	r1, [pc, #124]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	614b      	str	r3, [r1, #20]
 8006eea:	e011      	b.n	8006f10 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006eec:	4b1d      	ldr	r3, [pc, #116]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006ef4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	6892      	ldr	r2, [r2, #8]
 8006efc:	0211      	lsls	r1, r2, #8
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6912      	ldr	r2, [r2, #16]
 8006f02:	0852      	lsrs	r2, r2, #1
 8006f04:	3a01      	subs	r2, #1
 8006f06:	0652      	lsls	r2, r2, #25
 8006f08:	430a      	orrs	r2, r1
 8006f0a:	4916      	ldr	r1, [pc, #88]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006f10:	4b14      	ldr	r3, [pc, #80]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a13      	ldr	r2, [pc, #76]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f1c:	f7fc f9f6 	bl	800330c <HAL_GetTick>
 8006f20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006f22:	e009      	b.n	8006f38 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006f24:	f7fc f9f2 	bl	800330c <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d902      	bls.n	8006f38 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	73fb      	strb	r3, [r7, #15]
          break;
 8006f36:	e005      	b.n	8006f44 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006f38:	4b0a      	ldr	r3, [pc, #40]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d0ef      	beq.n	8006f24 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d106      	bne.n	8006f58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006f4a:	4b06      	ldr	r3, [pc, #24]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f4c:	695a      	ldr	r2, [r3, #20]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	4904      	ldr	r1, [pc, #16]	@ (8006f64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	40021000 	.word	0x40021000

08006f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e049      	b.n	800700e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d106      	bne.n	8006f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7fb ff48 	bl	8002e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	f000 fd26 	bl	80079f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b01      	cmp	r3, #1
 800702a:	d001      	beq.n	8007030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e04f      	b.n	80070d0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0201 	orr.w	r2, r2, #1
 8007046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a23      	ldr	r2, [pc, #140]	@ (80070dc <HAL_TIM_Base_Start_IT+0xc4>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d01d      	beq.n	800708e <HAL_TIM_Base_Start_IT+0x76>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800705a:	d018      	beq.n	800708e <HAL_TIM_Base_Start_IT+0x76>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a1f      	ldr	r2, [pc, #124]	@ (80070e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d013      	beq.n	800708e <HAL_TIM_Base_Start_IT+0x76>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a1e      	ldr	r2, [pc, #120]	@ (80070e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d00e      	beq.n	800708e <HAL_TIM_Base_Start_IT+0x76>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a1c      	ldr	r2, [pc, #112]	@ (80070e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d009      	beq.n	800708e <HAL_TIM_Base_Start_IT+0x76>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a1b      	ldr	r2, [pc, #108]	@ (80070ec <HAL_TIM_Base_Start_IT+0xd4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d004      	beq.n	800708e <HAL_TIM_Base_Start_IT+0x76>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a19      	ldr	r2, [pc, #100]	@ (80070f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d115      	bne.n	80070ba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	4b17      	ldr	r3, [pc, #92]	@ (80070f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007096:	4013      	ands	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b06      	cmp	r3, #6
 800709e:	d015      	beq.n	80070cc <HAL_TIM_Base_Start_IT+0xb4>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070a6:	d011      	beq.n	80070cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0201 	orr.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b8:	e008      	b.n	80070cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f042 0201 	orr.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	e000      	b.n	80070ce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	40012c00 	.word	0x40012c00
 80070e0:	40000400 	.word	0x40000400
 80070e4:	40000800 	.word	0x40000800
 80070e8:	40000c00 	.word	0x40000c00
 80070ec:	40013400 	.word	0x40013400
 80070f0:	40014000 	.word	0x40014000
 80070f4:	00010007 	.word	0x00010007

080070f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e049      	b.n	800719e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d106      	bne.n	8007124 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f841 	bl	80071a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2202      	movs	r2, #2
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	3304      	adds	r3, #4
 8007134:	4619      	mov	r1, r3
 8007136:	4610      	mov	r0, r2
 8007138:	f000 fc5e 	bl	80079f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071ae:	bf00      	nop
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
	...

080071bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d109      	bne.n	80071e0 <HAL_TIM_PWM_Start+0x24>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	bf14      	ite	ne
 80071d8:	2301      	movne	r3, #1
 80071da:	2300      	moveq	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	e03c      	b.n	800725a <HAL_TIM_PWM_Start+0x9e>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b04      	cmp	r3, #4
 80071e4:	d109      	bne.n	80071fa <HAL_TIM_PWM_Start+0x3e>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	bf14      	ite	ne
 80071f2:	2301      	movne	r3, #1
 80071f4:	2300      	moveq	r3, #0
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	e02f      	b.n	800725a <HAL_TIM_PWM_Start+0x9e>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d109      	bne.n	8007214 <HAL_TIM_PWM_Start+0x58>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b01      	cmp	r3, #1
 800720a:	bf14      	ite	ne
 800720c:	2301      	movne	r3, #1
 800720e:	2300      	moveq	r3, #0
 8007210:	b2db      	uxtb	r3, r3
 8007212:	e022      	b.n	800725a <HAL_TIM_PWM_Start+0x9e>
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	2b0c      	cmp	r3, #12
 8007218:	d109      	bne.n	800722e <HAL_TIM_PWM_Start+0x72>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b01      	cmp	r3, #1
 8007224:	bf14      	ite	ne
 8007226:	2301      	movne	r3, #1
 8007228:	2300      	moveq	r3, #0
 800722a:	b2db      	uxtb	r3, r3
 800722c:	e015      	b.n	800725a <HAL_TIM_PWM_Start+0x9e>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b10      	cmp	r3, #16
 8007232:	d109      	bne.n	8007248 <HAL_TIM_PWM_Start+0x8c>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b01      	cmp	r3, #1
 800723e:	bf14      	ite	ne
 8007240:	2301      	movne	r3, #1
 8007242:	2300      	moveq	r3, #0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	e008      	b.n	800725a <HAL_TIM_PWM_Start+0x9e>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b01      	cmp	r3, #1
 8007252:	bf14      	ite	ne
 8007254:	2301      	movne	r3, #1
 8007256:	2300      	moveq	r3, #0
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e09c      	b.n	800739c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d104      	bne.n	8007272 <HAL_TIM_PWM_Start+0xb6>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007270:	e023      	b.n	80072ba <HAL_TIM_PWM_Start+0xfe>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b04      	cmp	r3, #4
 8007276:	d104      	bne.n	8007282 <HAL_TIM_PWM_Start+0xc6>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007280:	e01b      	b.n	80072ba <HAL_TIM_PWM_Start+0xfe>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b08      	cmp	r3, #8
 8007286:	d104      	bne.n	8007292 <HAL_TIM_PWM_Start+0xd6>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007290:	e013      	b.n	80072ba <HAL_TIM_PWM_Start+0xfe>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b0c      	cmp	r3, #12
 8007296:	d104      	bne.n	80072a2 <HAL_TIM_PWM_Start+0xe6>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80072a0:	e00b      	b.n	80072ba <HAL_TIM_PWM_Start+0xfe>
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b10      	cmp	r3, #16
 80072a6:	d104      	bne.n	80072b2 <HAL_TIM_PWM_Start+0xf6>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072b0:	e003      	b.n	80072ba <HAL_TIM_PWM_Start+0xfe>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2202      	movs	r2, #2
 80072b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2201      	movs	r2, #1
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 ffae 	bl	8008224 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a35      	ldr	r2, [pc, #212]	@ (80073a4 <HAL_TIM_PWM_Start+0x1e8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d013      	beq.n	80072fa <HAL_TIM_PWM_Start+0x13e>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a34      	ldr	r2, [pc, #208]	@ (80073a8 <HAL_TIM_PWM_Start+0x1ec>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d00e      	beq.n	80072fa <HAL_TIM_PWM_Start+0x13e>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a32      	ldr	r2, [pc, #200]	@ (80073ac <HAL_TIM_PWM_Start+0x1f0>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d009      	beq.n	80072fa <HAL_TIM_PWM_Start+0x13e>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a31      	ldr	r2, [pc, #196]	@ (80073b0 <HAL_TIM_PWM_Start+0x1f4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d004      	beq.n	80072fa <HAL_TIM_PWM_Start+0x13e>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a2f      	ldr	r2, [pc, #188]	@ (80073b4 <HAL_TIM_PWM_Start+0x1f8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d101      	bne.n	80072fe <HAL_TIM_PWM_Start+0x142>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <HAL_TIM_PWM_Start+0x144>
 80072fe:	2300      	movs	r3, #0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d007      	beq.n	8007314 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007312:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a22      	ldr	r2, [pc, #136]	@ (80073a4 <HAL_TIM_PWM_Start+0x1e8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d01d      	beq.n	800735a <HAL_TIM_PWM_Start+0x19e>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007326:	d018      	beq.n	800735a <HAL_TIM_PWM_Start+0x19e>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a22      	ldr	r2, [pc, #136]	@ (80073b8 <HAL_TIM_PWM_Start+0x1fc>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d013      	beq.n	800735a <HAL_TIM_PWM_Start+0x19e>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a21      	ldr	r2, [pc, #132]	@ (80073bc <HAL_TIM_PWM_Start+0x200>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d00e      	beq.n	800735a <HAL_TIM_PWM_Start+0x19e>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a1f      	ldr	r2, [pc, #124]	@ (80073c0 <HAL_TIM_PWM_Start+0x204>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d009      	beq.n	800735a <HAL_TIM_PWM_Start+0x19e>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a17      	ldr	r2, [pc, #92]	@ (80073a8 <HAL_TIM_PWM_Start+0x1ec>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d004      	beq.n	800735a <HAL_TIM_PWM_Start+0x19e>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a15      	ldr	r2, [pc, #84]	@ (80073ac <HAL_TIM_PWM_Start+0x1f0>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d115      	bne.n	8007386 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	4b18      	ldr	r3, [pc, #96]	@ (80073c4 <HAL_TIM_PWM_Start+0x208>)
 8007362:	4013      	ands	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b06      	cmp	r3, #6
 800736a:	d015      	beq.n	8007398 <HAL_TIM_PWM_Start+0x1dc>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007372:	d011      	beq.n	8007398 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0201 	orr.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007384:	e008      	b.n	8007398 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f042 0201 	orr.w	r2, r2, #1
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	e000      	b.n	800739a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007398:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	40012c00 	.word	0x40012c00
 80073a8:	40013400 	.word	0x40013400
 80073ac:	40014000 	.word	0x40014000
 80073b0:	40014400 	.word	0x40014400
 80073b4:	40014800 	.word	0x40014800
 80073b8:	40000400 	.word	0x40000400
 80073bc:	40000800 	.word	0x40000800
 80073c0:	40000c00 	.word	0x40000c00
 80073c4:	00010007 	.word	0x00010007

080073c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d020      	beq.n	800742c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f003 0302 	and.w	r3, r3, #2
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d01b      	beq.n	800742c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f06f 0202 	mvn.w	r2, #2
 80073fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fad1 	bl	80079ba <HAL_TIM_IC_CaptureCallback>
 8007418:	e005      	b.n	8007426 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fac3 	bl	80079a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fad4 	bl	80079ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f003 0304 	and.w	r3, r3, #4
 8007432:	2b00      	cmp	r3, #0
 8007434:	d020      	beq.n	8007478 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f003 0304 	and.w	r3, r3, #4
 800743c:	2b00      	cmp	r3, #0
 800743e:	d01b      	beq.n	8007478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0204 	mvn.w	r2, #4
 8007448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2202      	movs	r2, #2
 800744e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 faab 	bl	80079ba <HAL_TIM_IC_CaptureCallback>
 8007464:	e005      	b.n	8007472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fa9d 	bl	80079a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 faae 	bl	80079ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f003 0308 	and.w	r3, r3, #8
 800747e:	2b00      	cmp	r3, #0
 8007480:	d020      	beq.n	80074c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f003 0308 	and.w	r3, r3, #8
 8007488:	2b00      	cmp	r3, #0
 800748a:	d01b      	beq.n	80074c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f06f 0208 	mvn.w	r2, #8
 8007494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2204      	movs	r2, #4
 800749a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fa85 	bl	80079ba <HAL_TIM_IC_CaptureCallback>
 80074b0:	e005      	b.n	80074be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fa77 	bl	80079a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fa88 	bl	80079ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	f003 0310 	and.w	r3, r3, #16
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d020      	beq.n	8007510 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f003 0310 	and.w	r3, r3, #16
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d01b      	beq.n	8007510 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f06f 0210 	mvn.w	r2, #16
 80074e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2208      	movs	r2, #8
 80074e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fa5f 	bl	80079ba <HAL_TIM_IC_CaptureCallback>
 80074fc:	e005      	b.n	800750a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fa51 	bl	80079a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fa62 	bl	80079ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00c      	beq.n	8007534 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d007      	beq.n	8007534 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f06f 0201 	mvn.w	r2, #1
 800752c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fa2f 	bl	8007992 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800753a:	2b00      	cmp	r3, #0
 800753c:	d104      	bne.n	8007548 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00c      	beq.n	8007562 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800754e:	2b00      	cmp	r3, #0
 8007550:	d007      	beq.n	8007562 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800755a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 ff19 	bl	8008394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00c      	beq.n	8007586 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007572:	2b00      	cmp	r3, #0
 8007574:	d007      	beq.n	8007586 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800757e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 ff11 	bl	80083a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00c      	beq.n	80075aa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007596:	2b00      	cmp	r3, #0
 8007598:	d007      	beq.n	80075aa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80075a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fa1c 	bl	80079e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f003 0320 	and.w	r3, r3, #32
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00c      	beq.n	80075ce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d007      	beq.n	80075ce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f06f 0220 	mvn.w	r2, #32
 80075c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fed9 	bl	8008380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075ce:	bf00      	nop
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d101      	bne.n	80075f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075f2:	2302      	movs	r3, #2
 80075f4:	e0ff      	b.n	80077f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b14      	cmp	r3, #20
 8007602:	f200 80f0 	bhi.w	80077e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007606:	a201      	add	r2, pc, #4	@ (adr r2, 800760c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760c:	08007661 	.word	0x08007661
 8007610:	080077e7 	.word	0x080077e7
 8007614:	080077e7 	.word	0x080077e7
 8007618:	080077e7 	.word	0x080077e7
 800761c:	080076a1 	.word	0x080076a1
 8007620:	080077e7 	.word	0x080077e7
 8007624:	080077e7 	.word	0x080077e7
 8007628:	080077e7 	.word	0x080077e7
 800762c:	080076e3 	.word	0x080076e3
 8007630:	080077e7 	.word	0x080077e7
 8007634:	080077e7 	.word	0x080077e7
 8007638:	080077e7 	.word	0x080077e7
 800763c:	08007723 	.word	0x08007723
 8007640:	080077e7 	.word	0x080077e7
 8007644:	080077e7 	.word	0x080077e7
 8007648:	080077e7 	.word	0x080077e7
 800764c:	08007765 	.word	0x08007765
 8007650:	080077e7 	.word	0x080077e7
 8007654:	080077e7 	.word	0x080077e7
 8007658:	080077e7 	.word	0x080077e7
 800765c:	080077a5 	.word	0x080077a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68b9      	ldr	r1, [r7, #8]
 8007666:	4618      	mov	r0, r3
 8007668:	f000 fa6c 	bl	8007b44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	699a      	ldr	r2, [r3, #24]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f042 0208 	orr.w	r2, r2, #8
 800767a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	699a      	ldr	r2, [r3, #24]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0204 	bic.w	r2, r2, #4
 800768a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6999      	ldr	r1, [r3, #24]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	691a      	ldr	r2, [r3, #16]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	619a      	str	r2, [r3, #24]
      break;
 800769e:	e0a5      	b.n	80077ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68b9      	ldr	r1, [r7, #8]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 fadc 	bl	8007c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	699a      	ldr	r2, [r3, #24]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80076ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	699a      	ldr	r2, [r3, #24]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6999      	ldr	r1, [r3, #24]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	021a      	lsls	r2, r3, #8
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	619a      	str	r2, [r3, #24]
      break;
 80076e0:	e084      	b.n	80077ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68b9      	ldr	r1, [r7, #8]
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 fb45 	bl	8007d78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	69da      	ldr	r2, [r3, #28]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f042 0208 	orr.w	r2, r2, #8
 80076fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69da      	ldr	r2, [r3, #28]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f022 0204 	bic.w	r2, r2, #4
 800770c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	69d9      	ldr	r1, [r3, #28]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	691a      	ldr	r2, [r3, #16]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	430a      	orrs	r2, r1
 800771e:	61da      	str	r2, [r3, #28]
      break;
 8007720:	e064      	b.n	80077ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68b9      	ldr	r1, [r7, #8]
 8007728:	4618      	mov	r0, r3
 800772a:	f000 fbad 	bl	8007e88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	69da      	ldr	r2, [r3, #28]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800773c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	69da      	ldr	r2, [r3, #28]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800774c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	69d9      	ldr	r1, [r3, #28]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	021a      	lsls	r2, r3, #8
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	430a      	orrs	r2, r1
 8007760:	61da      	str	r2, [r3, #28]
      break;
 8007762:	e043      	b.n	80077ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	4618      	mov	r0, r3
 800776c:	f000 fbf6 	bl	8007f5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0208 	orr.w	r2, r2, #8
 800777e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 0204 	bic.w	r2, r2, #4
 800778e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	691a      	ldr	r2, [r3, #16]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80077a2:	e023      	b.n	80077ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68b9      	ldr	r1, [r7, #8]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 fc3a 	bl	8008024 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	021a      	lsls	r2, r3, #8
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	430a      	orrs	r2, r1
 80077e2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80077e4:	e002      	b.n	80077ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	75fb      	strb	r3, [r7, #23]
      break;
 80077ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80077f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop

08007800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007814:	2b01      	cmp	r3, #1
 8007816:	d101      	bne.n	800781c <HAL_TIM_ConfigClockSource+0x1c>
 8007818:	2302      	movs	r3, #2
 800781a:	e0b6      	b.n	800798a <HAL_TIM_ConfigClockSource+0x18a>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2202      	movs	r2, #2
 8007828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800783a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800783e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007846:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007858:	d03e      	beq.n	80078d8 <HAL_TIM_ConfigClockSource+0xd8>
 800785a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800785e:	f200 8087 	bhi.w	8007970 <HAL_TIM_ConfigClockSource+0x170>
 8007862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007866:	f000 8086 	beq.w	8007976 <HAL_TIM_ConfigClockSource+0x176>
 800786a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800786e:	d87f      	bhi.n	8007970 <HAL_TIM_ConfigClockSource+0x170>
 8007870:	2b70      	cmp	r3, #112	@ 0x70
 8007872:	d01a      	beq.n	80078aa <HAL_TIM_ConfigClockSource+0xaa>
 8007874:	2b70      	cmp	r3, #112	@ 0x70
 8007876:	d87b      	bhi.n	8007970 <HAL_TIM_ConfigClockSource+0x170>
 8007878:	2b60      	cmp	r3, #96	@ 0x60
 800787a:	d050      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x11e>
 800787c:	2b60      	cmp	r3, #96	@ 0x60
 800787e:	d877      	bhi.n	8007970 <HAL_TIM_ConfigClockSource+0x170>
 8007880:	2b50      	cmp	r3, #80	@ 0x50
 8007882:	d03c      	beq.n	80078fe <HAL_TIM_ConfigClockSource+0xfe>
 8007884:	2b50      	cmp	r3, #80	@ 0x50
 8007886:	d873      	bhi.n	8007970 <HAL_TIM_ConfigClockSource+0x170>
 8007888:	2b40      	cmp	r3, #64	@ 0x40
 800788a:	d058      	beq.n	800793e <HAL_TIM_ConfigClockSource+0x13e>
 800788c:	2b40      	cmp	r3, #64	@ 0x40
 800788e:	d86f      	bhi.n	8007970 <HAL_TIM_ConfigClockSource+0x170>
 8007890:	2b30      	cmp	r3, #48	@ 0x30
 8007892:	d064      	beq.n	800795e <HAL_TIM_ConfigClockSource+0x15e>
 8007894:	2b30      	cmp	r3, #48	@ 0x30
 8007896:	d86b      	bhi.n	8007970 <HAL_TIM_ConfigClockSource+0x170>
 8007898:	2b20      	cmp	r3, #32
 800789a:	d060      	beq.n	800795e <HAL_TIM_ConfigClockSource+0x15e>
 800789c:	2b20      	cmp	r3, #32
 800789e:	d867      	bhi.n	8007970 <HAL_TIM_ConfigClockSource+0x170>
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d05c      	beq.n	800795e <HAL_TIM_ConfigClockSource+0x15e>
 80078a4:	2b10      	cmp	r3, #16
 80078a6:	d05a      	beq.n	800795e <HAL_TIM_ConfigClockSource+0x15e>
 80078a8:	e062      	b.n	8007970 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078ba:	f000 fc93 	bl	80081e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80078cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	609a      	str	r2, [r3, #8]
      break;
 80078d6:	e04f      	b.n	8007978 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078e8:	f000 fc7c 	bl	80081e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689a      	ldr	r2, [r3, #8]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078fa:	609a      	str	r2, [r3, #8]
      break;
 80078fc:	e03c      	b.n	8007978 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800790a:	461a      	mov	r2, r3
 800790c:	f000 fbf0 	bl	80080f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2150      	movs	r1, #80	@ 0x50
 8007916:	4618      	mov	r0, r3
 8007918:	f000 fc49 	bl	80081ae <TIM_ITRx_SetConfig>
      break;
 800791c:	e02c      	b.n	8007978 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800792a:	461a      	mov	r2, r3
 800792c:	f000 fc0f 	bl	800814e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2160      	movs	r1, #96	@ 0x60
 8007936:	4618      	mov	r0, r3
 8007938:	f000 fc39 	bl	80081ae <TIM_ITRx_SetConfig>
      break;
 800793c:	e01c      	b.n	8007978 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800794a:	461a      	mov	r2, r3
 800794c:	f000 fbd0 	bl	80080f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2140      	movs	r1, #64	@ 0x40
 8007956:	4618      	mov	r0, r3
 8007958:	f000 fc29 	bl	80081ae <TIM_ITRx_SetConfig>
      break;
 800795c:	e00c      	b.n	8007978 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4619      	mov	r1, r3
 8007968:	4610      	mov	r0, r2
 800796a:	f000 fc20 	bl	80081ae <TIM_ITRx_SetConfig>
      break;
 800796e:	e003      	b.n	8007978 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	73fb      	strb	r3, [r7, #15]
      break;
 8007974:	e000      	b.n	8007978 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007976:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007988:	7bfb      	ldrb	r3, [r7, #15]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800799a:	bf00      	nop
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b083      	sub	sp, #12
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079ae:	bf00      	nop
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079c2:	bf00      	nop
 80079c4:	370c      	adds	r7, #12
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b083      	sub	sp, #12
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079d6:	bf00      	nop
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079ea:	bf00      	nop
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
	...

080079f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a46      	ldr	r2, [pc, #280]	@ (8007b24 <TIM_Base_SetConfig+0x12c>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d013      	beq.n	8007a38 <TIM_Base_SetConfig+0x40>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a16:	d00f      	beq.n	8007a38 <TIM_Base_SetConfig+0x40>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a43      	ldr	r2, [pc, #268]	@ (8007b28 <TIM_Base_SetConfig+0x130>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d00b      	beq.n	8007a38 <TIM_Base_SetConfig+0x40>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a42      	ldr	r2, [pc, #264]	@ (8007b2c <TIM_Base_SetConfig+0x134>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d007      	beq.n	8007a38 <TIM_Base_SetConfig+0x40>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a41      	ldr	r2, [pc, #260]	@ (8007b30 <TIM_Base_SetConfig+0x138>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d003      	beq.n	8007a38 <TIM_Base_SetConfig+0x40>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a40      	ldr	r2, [pc, #256]	@ (8007b34 <TIM_Base_SetConfig+0x13c>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d108      	bne.n	8007a4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a35      	ldr	r2, [pc, #212]	@ (8007b24 <TIM_Base_SetConfig+0x12c>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d01f      	beq.n	8007a92 <TIM_Base_SetConfig+0x9a>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a58:	d01b      	beq.n	8007a92 <TIM_Base_SetConfig+0x9a>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a32      	ldr	r2, [pc, #200]	@ (8007b28 <TIM_Base_SetConfig+0x130>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d017      	beq.n	8007a92 <TIM_Base_SetConfig+0x9a>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a31      	ldr	r2, [pc, #196]	@ (8007b2c <TIM_Base_SetConfig+0x134>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d013      	beq.n	8007a92 <TIM_Base_SetConfig+0x9a>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a30      	ldr	r2, [pc, #192]	@ (8007b30 <TIM_Base_SetConfig+0x138>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d00f      	beq.n	8007a92 <TIM_Base_SetConfig+0x9a>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a2f      	ldr	r2, [pc, #188]	@ (8007b34 <TIM_Base_SetConfig+0x13c>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d00b      	beq.n	8007a92 <TIM_Base_SetConfig+0x9a>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a2e      	ldr	r2, [pc, #184]	@ (8007b38 <TIM_Base_SetConfig+0x140>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d007      	beq.n	8007a92 <TIM_Base_SetConfig+0x9a>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a2d      	ldr	r2, [pc, #180]	@ (8007b3c <TIM_Base_SetConfig+0x144>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d003      	beq.n	8007a92 <TIM_Base_SetConfig+0x9a>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a2c      	ldr	r2, [pc, #176]	@ (8007b40 <TIM_Base_SetConfig+0x148>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d108      	bne.n	8007aa4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	689a      	ldr	r2, [r3, #8]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a16      	ldr	r2, [pc, #88]	@ (8007b24 <TIM_Base_SetConfig+0x12c>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d00f      	beq.n	8007af0 <TIM_Base_SetConfig+0xf8>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a18      	ldr	r2, [pc, #96]	@ (8007b34 <TIM_Base_SetConfig+0x13c>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d00b      	beq.n	8007af0 <TIM_Base_SetConfig+0xf8>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4a17      	ldr	r2, [pc, #92]	@ (8007b38 <TIM_Base_SetConfig+0x140>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d007      	beq.n	8007af0 <TIM_Base_SetConfig+0xf8>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a16      	ldr	r2, [pc, #88]	@ (8007b3c <TIM_Base_SetConfig+0x144>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d003      	beq.n	8007af0 <TIM_Base_SetConfig+0xf8>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a15      	ldr	r2, [pc, #84]	@ (8007b40 <TIM_Base_SetConfig+0x148>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d103      	bne.n	8007af8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	691a      	ldr	r2, [r3, #16]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d105      	bne.n	8007b16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	f023 0201 	bic.w	r2, r3, #1
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	611a      	str	r2, [r3, #16]
  }
}
 8007b16:	bf00      	nop
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	40012c00 	.word	0x40012c00
 8007b28:	40000400 	.word	0x40000400
 8007b2c:	40000800 	.word	0x40000800
 8007b30:	40000c00 	.word	0x40000c00
 8007b34:	40013400 	.word	0x40013400
 8007b38:	40014000 	.word	0x40014000
 8007b3c:	40014400 	.word	0x40014400
 8007b40:	40014800 	.word	0x40014800

08007b44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	f023 0201 	bic.w	r2, r3, #1
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f023 0303 	bic.w	r3, r3, #3
 8007b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f023 0302 	bic.w	r3, r3, #2
 8007b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8007c50 <TIM_OC1_SetConfig+0x10c>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00f      	beq.n	8007bc4 <TIM_OC1_SetConfig+0x80>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8007c54 <TIM_OC1_SetConfig+0x110>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d00b      	beq.n	8007bc4 <TIM_OC1_SetConfig+0x80>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a2a      	ldr	r2, [pc, #168]	@ (8007c58 <TIM_OC1_SetConfig+0x114>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d007      	beq.n	8007bc4 <TIM_OC1_SetConfig+0x80>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a29      	ldr	r2, [pc, #164]	@ (8007c5c <TIM_OC1_SetConfig+0x118>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d003      	beq.n	8007bc4 <TIM_OC1_SetConfig+0x80>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a28      	ldr	r2, [pc, #160]	@ (8007c60 <TIM_OC1_SetConfig+0x11c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d10c      	bne.n	8007bde <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	f023 0308 	bic.w	r3, r3, #8
 8007bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f023 0304 	bic.w	r3, r3, #4
 8007bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a1b      	ldr	r2, [pc, #108]	@ (8007c50 <TIM_OC1_SetConfig+0x10c>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d00f      	beq.n	8007c06 <TIM_OC1_SetConfig+0xc2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a1a      	ldr	r2, [pc, #104]	@ (8007c54 <TIM_OC1_SetConfig+0x110>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d00b      	beq.n	8007c06 <TIM_OC1_SetConfig+0xc2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a19      	ldr	r2, [pc, #100]	@ (8007c58 <TIM_OC1_SetConfig+0x114>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d007      	beq.n	8007c06 <TIM_OC1_SetConfig+0xc2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a18      	ldr	r2, [pc, #96]	@ (8007c5c <TIM_OC1_SetConfig+0x118>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d003      	beq.n	8007c06 <TIM_OC1_SetConfig+0xc2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a17      	ldr	r2, [pc, #92]	@ (8007c60 <TIM_OC1_SetConfig+0x11c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d111      	bne.n	8007c2a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	621a      	str	r2, [r3, #32]
}
 8007c44:	bf00      	nop
 8007c46:	371c      	adds	r7, #28
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	40012c00 	.word	0x40012c00
 8007c54:	40013400 	.word	0x40013400
 8007c58:	40014000 	.word	0x40014000
 8007c5c:	40014400 	.word	0x40014400
 8007c60:	40014800 	.word	0x40014800

08007c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a1b      	ldr	r3, [r3, #32]
 8007c78:	f023 0210 	bic.w	r2, r3, #16
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	021b      	lsls	r3, r3, #8
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f023 0320 	bic.w	r3, r3, #32
 8007cb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	011b      	lsls	r3, r3, #4
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a28      	ldr	r2, [pc, #160]	@ (8007d64 <TIM_OC2_SetConfig+0x100>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d003      	beq.n	8007cd0 <TIM_OC2_SetConfig+0x6c>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a27      	ldr	r2, [pc, #156]	@ (8007d68 <TIM_OC2_SetConfig+0x104>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d10d      	bne.n	8007cec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	011b      	lsls	r3, r3, #4
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a1d      	ldr	r2, [pc, #116]	@ (8007d64 <TIM_OC2_SetConfig+0x100>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d00f      	beq.n	8007d14 <TIM_OC2_SetConfig+0xb0>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8007d68 <TIM_OC2_SetConfig+0x104>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d00b      	beq.n	8007d14 <TIM_OC2_SetConfig+0xb0>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8007d6c <TIM_OC2_SetConfig+0x108>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d007      	beq.n	8007d14 <TIM_OC2_SetConfig+0xb0>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a1a      	ldr	r2, [pc, #104]	@ (8007d70 <TIM_OC2_SetConfig+0x10c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d003      	beq.n	8007d14 <TIM_OC2_SetConfig+0xb0>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a19      	ldr	r2, [pc, #100]	@ (8007d74 <TIM_OC2_SetConfig+0x110>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d113      	bne.n	8007d3c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	621a      	str	r2, [r3, #32]
}
 8007d56:	bf00      	nop
 8007d58:	371c      	adds	r7, #28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	40012c00 	.word	0x40012c00
 8007d68:	40013400 	.word	0x40013400
 8007d6c:	40014000 	.word	0x40014000
 8007d70:	40014400 	.word	0x40014400
 8007d74:	40014800 	.word	0x40014800

08007d78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b087      	sub	sp, #28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a1b      	ldr	r3, [r3, #32]
 8007d8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f023 0303 	bic.w	r3, r3, #3
 8007db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	021b      	lsls	r3, r3, #8
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a27      	ldr	r2, [pc, #156]	@ (8007e74 <TIM_OC3_SetConfig+0xfc>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d003      	beq.n	8007de2 <TIM_OC3_SetConfig+0x6a>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a26      	ldr	r2, [pc, #152]	@ (8007e78 <TIM_OC3_SetConfig+0x100>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d10d      	bne.n	8007dfe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007de8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	021b      	lsls	r3, r3, #8
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a1c      	ldr	r2, [pc, #112]	@ (8007e74 <TIM_OC3_SetConfig+0xfc>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d00f      	beq.n	8007e26 <TIM_OC3_SetConfig+0xae>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a1b      	ldr	r2, [pc, #108]	@ (8007e78 <TIM_OC3_SetConfig+0x100>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d00b      	beq.n	8007e26 <TIM_OC3_SetConfig+0xae>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a1a      	ldr	r2, [pc, #104]	@ (8007e7c <TIM_OC3_SetConfig+0x104>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d007      	beq.n	8007e26 <TIM_OC3_SetConfig+0xae>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a19      	ldr	r2, [pc, #100]	@ (8007e80 <TIM_OC3_SetConfig+0x108>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d003      	beq.n	8007e26 <TIM_OC3_SetConfig+0xae>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a18      	ldr	r2, [pc, #96]	@ (8007e84 <TIM_OC3_SetConfig+0x10c>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d113      	bne.n	8007e4e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	011b      	lsls	r3, r3, #4
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	011b      	lsls	r3, r3, #4
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	621a      	str	r2, [r3, #32]
}
 8007e68:	bf00      	nop
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr
 8007e74:	40012c00 	.word	0x40012c00
 8007e78:	40013400 	.word	0x40013400
 8007e7c:	40014000 	.word	0x40014000
 8007e80:	40014400 	.word	0x40014400
 8007e84:	40014800 	.word	0x40014800

08007e88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b087      	sub	sp, #28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007eb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	031b      	lsls	r3, r3, #12
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a18      	ldr	r2, [pc, #96]	@ (8007f48 <TIM_OC4_SetConfig+0xc0>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d00f      	beq.n	8007f0c <TIM_OC4_SetConfig+0x84>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a17      	ldr	r2, [pc, #92]	@ (8007f4c <TIM_OC4_SetConfig+0xc4>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d00b      	beq.n	8007f0c <TIM_OC4_SetConfig+0x84>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a16      	ldr	r2, [pc, #88]	@ (8007f50 <TIM_OC4_SetConfig+0xc8>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d007      	beq.n	8007f0c <TIM_OC4_SetConfig+0x84>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a15      	ldr	r2, [pc, #84]	@ (8007f54 <TIM_OC4_SetConfig+0xcc>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d003      	beq.n	8007f0c <TIM_OC4_SetConfig+0x84>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a14      	ldr	r2, [pc, #80]	@ (8007f58 <TIM_OC4_SetConfig+0xd0>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d109      	bne.n	8007f20 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	695b      	ldr	r3, [r3, #20]
 8007f18:	019b      	lsls	r3, r3, #6
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685a      	ldr	r2, [r3, #4]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	621a      	str	r2, [r3, #32]
}
 8007f3a:	bf00      	nop
 8007f3c:	371c      	adds	r7, #28
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	40012c00 	.word	0x40012c00
 8007f4c:	40013400 	.word	0x40013400
 8007f50:	40014000 	.word	0x40014000
 8007f54:	40014400 	.word	0x40014400
 8007f58:	40014800 	.word	0x40014800

08007f5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b087      	sub	sp, #28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007fa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	041b      	lsls	r3, r3, #16
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a17      	ldr	r2, [pc, #92]	@ (8008010 <TIM_OC5_SetConfig+0xb4>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d00f      	beq.n	8007fd6 <TIM_OC5_SetConfig+0x7a>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a16      	ldr	r2, [pc, #88]	@ (8008014 <TIM_OC5_SetConfig+0xb8>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d00b      	beq.n	8007fd6 <TIM_OC5_SetConfig+0x7a>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a15      	ldr	r2, [pc, #84]	@ (8008018 <TIM_OC5_SetConfig+0xbc>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d007      	beq.n	8007fd6 <TIM_OC5_SetConfig+0x7a>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a14      	ldr	r2, [pc, #80]	@ (800801c <TIM_OC5_SetConfig+0xc0>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d003      	beq.n	8007fd6 <TIM_OC5_SetConfig+0x7a>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a13      	ldr	r2, [pc, #76]	@ (8008020 <TIM_OC5_SetConfig+0xc4>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d109      	bne.n	8007fea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	021b      	lsls	r3, r3, #8
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	621a      	str	r2, [r3, #32]
}
 8008004:	bf00      	nop
 8008006:	371c      	adds	r7, #28
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	40012c00 	.word	0x40012c00
 8008014:	40013400 	.word	0x40013400
 8008018:	40014000 	.word	0x40014000
 800801c:	40014400 	.word	0x40014400
 8008020:	40014800 	.word	0x40014800

08008024 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a1b      	ldr	r3, [r3, #32]
 8008038:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800804a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	021b      	lsls	r3, r3, #8
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	4313      	orrs	r3, r2
 8008062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800806a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	051b      	lsls	r3, r3, #20
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	4313      	orrs	r3, r2
 8008076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a18      	ldr	r2, [pc, #96]	@ (80080dc <TIM_OC6_SetConfig+0xb8>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d00f      	beq.n	80080a0 <TIM_OC6_SetConfig+0x7c>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a17      	ldr	r2, [pc, #92]	@ (80080e0 <TIM_OC6_SetConfig+0xbc>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00b      	beq.n	80080a0 <TIM_OC6_SetConfig+0x7c>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a16      	ldr	r2, [pc, #88]	@ (80080e4 <TIM_OC6_SetConfig+0xc0>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d007      	beq.n	80080a0 <TIM_OC6_SetConfig+0x7c>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a15      	ldr	r2, [pc, #84]	@ (80080e8 <TIM_OC6_SetConfig+0xc4>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d003      	beq.n	80080a0 <TIM_OC6_SetConfig+0x7c>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a14      	ldr	r2, [pc, #80]	@ (80080ec <TIM_OC6_SetConfig+0xc8>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d109      	bne.n	80080b4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	029b      	lsls	r3, r3, #10
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	685a      	ldr	r2, [r3, #4]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	621a      	str	r2, [r3, #32]
}
 80080ce:	bf00      	nop
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	40012c00 	.word	0x40012c00
 80080e0:	40013400 	.word	0x40013400
 80080e4:	40014000 	.word	0x40014000
 80080e8:	40014400 	.word	0x40014400
 80080ec:	40014800 	.word	0x40014800

080080f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	f023 0201 	bic.w	r2, r3, #1
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800811a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	4313      	orrs	r3, r2
 8008124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f023 030a 	bic.w	r3, r3, #10
 800812c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	4313      	orrs	r3, r2
 8008134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	621a      	str	r2, [r3, #32]
}
 8008142:	bf00      	nop
 8008144:	371c      	adds	r7, #28
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800814e:	b480      	push	{r7}
 8008150:	b087      	sub	sp, #28
 8008152:	af00      	add	r7, sp, #0
 8008154:	60f8      	str	r0, [r7, #12]
 8008156:	60b9      	str	r1, [r7, #8]
 8008158:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	f023 0210 	bic.w	r2, r3, #16
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008178:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	031b      	lsls	r3, r3, #12
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	4313      	orrs	r3, r2
 8008182:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800818a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	011b      	lsls	r3, r3, #4
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	4313      	orrs	r3, r2
 8008194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	621a      	str	r2, [r3, #32]
}
 80081a2:	bf00      	nop
 80081a4:	371c      	adds	r7, #28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b085      	sub	sp, #20
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	f043 0307 	orr.w	r3, r3, #7
 80081d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	609a      	str	r2, [r3, #8]
}
 80081d8:	bf00      	nop
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b087      	sub	sp, #28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
 80081f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	021a      	lsls	r2, r3, #8
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	431a      	orrs	r2, r3
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	4313      	orrs	r3, r2
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	4313      	orrs	r3, r2
 8008210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	609a      	str	r2, [r3, #8]
}
 8008218:	bf00      	nop
 800821a:	371c      	adds	r7, #28
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008224:	b480      	push	{r7}
 8008226:	b087      	sub	sp, #28
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f003 031f 	and.w	r3, r3, #31
 8008236:	2201      	movs	r2, #1
 8008238:	fa02 f303 	lsl.w	r3, r2, r3
 800823c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6a1a      	ldr	r2, [r3, #32]
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	43db      	mvns	r3, r3
 8008246:	401a      	ands	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6a1a      	ldr	r2, [r3, #32]
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f003 031f 	and.w	r3, r3, #31
 8008256:	6879      	ldr	r1, [r7, #4]
 8008258:	fa01 f303 	lsl.w	r3, r1, r3
 800825c:	431a      	orrs	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	621a      	str	r2, [r3, #32]
}
 8008262:	bf00      	nop
 8008264:	371c      	adds	r7, #28
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
	...

08008270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008280:	2b01      	cmp	r3, #1
 8008282:	d101      	bne.n	8008288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008284:	2302      	movs	r3, #2
 8008286:	e068      	b.n	800835a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2202      	movs	r2, #2
 8008294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a2e      	ldr	r2, [pc, #184]	@ (8008368 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d004      	beq.n	80082bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a2d      	ldr	r2, [pc, #180]	@ (800836c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d108      	bne.n	80082ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80082c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	4313      	orrs	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a1e      	ldr	r2, [pc, #120]	@ (8008368 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d01d      	beq.n	800832e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082fa:	d018      	beq.n	800832e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a1b      	ldr	r2, [pc, #108]	@ (8008370 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d013      	beq.n	800832e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a1a      	ldr	r2, [pc, #104]	@ (8008374 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d00e      	beq.n	800832e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a18      	ldr	r2, [pc, #96]	@ (8008378 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d009      	beq.n	800832e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a13      	ldr	r2, [pc, #76]	@ (800836c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d004      	beq.n	800832e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a14      	ldr	r2, [pc, #80]	@ (800837c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d10c      	bne.n	8008348 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008334:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	4313      	orrs	r3, r2
 800833e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	40012c00 	.word	0x40012c00
 800836c:	40013400 	.word	0x40013400
 8008370:	40000400 	.word	0x40000400
 8008374:	40000800 	.word	0x40000800
 8008378:	40000c00 	.word	0x40000c00
 800837c:	40014000 	.word	0x40014000

08008380 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e040      	b.n	8008450 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d106      	bne.n	80083e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7fa fdac 	bl	8002f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2224      	movs	r2, #36	@ 0x24
 80083e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f022 0201 	bic.w	r2, r2, #1
 80083f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fae0 	bl	80089c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f825 	bl	8008458 <UART_SetConfig>
 800840e:	4603      	mov	r3, r0
 8008410:	2b01      	cmp	r3, #1
 8008412:	d101      	bne.n	8008418 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e01b      	b.n	8008450 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008426:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689a      	ldr	r2, [r3, #8]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008436:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 0201 	orr.w	r2, r2, #1
 8008446:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fb5f 	bl	8008b0c <UART_CheckIdleState>
 800844e:	4603      	mov	r3, r0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800845c:	b08a      	sub	sp, #40	@ 0x28
 800845e:	af00      	add	r7, sp, #0
 8008460:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	689a      	ldr	r2, [r3, #8]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	431a      	orrs	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	431a      	orrs	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	69db      	ldr	r3, [r3, #28]
 800847c:	4313      	orrs	r3, r2
 800847e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	4ba4      	ldr	r3, [pc, #656]	@ (8008718 <UART_SetConfig+0x2c0>)
 8008488:	4013      	ands	r3, r2
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	6812      	ldr	r2, [r2, #0]
 800848e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008490:	430b      	orrs	r3, r1
 8008492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	68da      	ldr	r2, [r3, #12]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a99      	ldr	r2, [pc, #612]	@ (800871c <UART_SetConfig+0x2c4>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d004      	beq.n	80084c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084c0:	4313      	orrs	r3, r2
 80084c2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084d4:	430a      	orrs	r2, r1
 80084d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a90      	ldr	r2, [pc, #576]	@ (8008720 <UART_SetConfig+0x2c8>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d126      	bne.n	8008530 <UART_SetConfig+0xd8>
 80084e2:	4b90      	ldr	r3, [pc, #576]	@ (8008724 <UART_SetConfig+0x2cc>)
 80084e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084e8:	f003 0303 	and.w	r3, r3, #3
 80084ec:	2b03      	cmp	r3, #3
 80084ee:	d81b      	bhi.n	8008528 <UART_SetConfig+0xd0>
 80084f0:	a201      	add	r2, pc, #4	@ (adr r2, 80084f8 <UART_SetConfig+0xa0>)
 80084f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f6:	bf00      	nop
 80084f8:	08008509 	.word	0x08008509
 80084fc:	08008519 	.word	0x08008519
 8008500:	08008511 	.word	0x08008511
 8008504:	08008521 	.word	0x08008521
 8008508:	2301      	movs	r3, #1
 800850a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800850e:	e116      	b.n	800873e <UART_SetConfig+0x2e6>
 8008510:	2302      	movs	r3, #2
 8008512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008516:	e112      	b.n	800873e <UART_SetConfig+0x2e6>
 8008518:	2304      	movs	r3, #4
 800851a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800851e:	e10e      	b.n	800873e <UART_SetConfig+0x2e6>
 8008520:	2308      	movs	r3, #8
 8008522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008526:	e10a      	b.n	800873e <UART_SetConfig+0x2e6>
 8008528:	2310      	movs	r3, #16
 800852a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800852e:	e106      	b.n	800873e <UART_SetConfig+0x2e6>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a7c      	ldr	r2, [pc, #496]	@ (8008728 <UART_SetConfig+0x2d0>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d138      	bne.n	80085ac <UART_SetConfig+0x154>
 800853a:	4b7a      	ldr	r3, [pc, #488]	@ (8008724 <UART_SetConfig+0x2cc>)
 800853c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008540:	f003 030c 	and.w	r3, r3, #12
 8008544:	2b0c      	cmp	r3, #12
 8008546:	d82d      	bhi.n	80085a4 <UART_SetConfig+0x14c>
 8008548:	a201      	add	r2, pc, #4	@ (adr r2, 8008550 <UART_SetConfig+0xf8>)
 800854a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854e:	bf00      	nop
 8008550:	08008585 	.word	0x08008585
 8008554:	080085a5 	.word	0x080085a5
 8008558:	080085a5 	.word	0x080085a5
 800855c:	080085a5 	.word	0x080085a5
 8008560:	08008595 	.word	0x08008595
 8008564:	080085a5 	.word	0x080085a5
 8008568:	080085a5 	.word	0x080085a5
 800856c:	080085a5 	.word	0x080085a5
 8008570:	0800858d 	.word	0x0800858d
 8008574:	080085a5 	.word	0x080085a5
 8008578:	080085a5 	.word	0x080085a5
 800857c:	080085a5 	.word	0x080085a5
 8008580:	0800859d 	.word	0x0800859d
 8008584:	2300      	movs	r3, #0
 8008586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800858a:	e0d8      	b.n	800873e <UART_SetConfig+0x2e6>
 800858c:	2302      	movs	r3, #2
 800858e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008592:	e0d4      	b.n	800873e <UART_SetConfig+0x2e6>
 8008594:	2304      	movs	r3, #4
 8008596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800859a:	e0d0      	b.n	800873e <UART_SetConfig+0x2e6>
 800859c:	2308      	movs	r3, #8
 800859e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085a2:	e0cc      	b.n	800873e <UART_SetConfig+0x2e6>
 80085a4:	2310      	movs	r3, #16
 80085a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085aa:	e0c8      	b.n	800873e <UART_SetConfig+0x2e6>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a5e      	ldr	r2, [pc, #376]	@ (800872c <UART_SetConfig+0x2d4>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d125      	bne.n	8008602 <UART_SetConfig+0x1aa>
 80085b6:	4b5b      	ldr	r3, [pc, #364]	@ (8008724 <UART_SetConfig+0x2cc>)
 80085b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80085c0:	2b30      	cmp	r3, #48	@ 0x30
 80085c2:	d016      	beq.n	80085f2 <UART_SetConfig+0x19a>
 80085c4:	2b30      	cmp	r3, #48	@ 0x30
 80085c6:	d818      	bhi.n	80085fa <UART_SetConfig+0x1a2>
 80085c8:	2b20      	cmp	r3, #32
 80085ca:	d00a      	beq.n	80085e2 <UART_SetConfig+0x18a>
 80085cc:	2b20      	cmp	r3, #32
 80085ce:	d814      	bhi.n	80085fa <UART_SetConfig+0x1a2>
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <UART_SetConfig+0x182>
 80085d4:	2b10      	cmp	r3, #16
 80085d6:	d008      	beq.n	80085ea <UART_SetConfig+0x192>
 80085d8:	e00f      	b.n	80085fa <UART_SetConfig+0x1a2>
 80085da:	2300      	movs	r3, #0
 80085dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085e0:	e0ad      	b.n	800873e <UART_SetConfig+0x2e6>
 80085e2:	2302      	movs	r3, #2
 80085e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085e8:	e0a9      	b.n	800873e <UART_SetConfig+0x2e6>
 80085ea:	2304      	movs	r3, #4
 80085ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085f0:	e0a5      	b.n	800873e <UART_SetConfig+0x2e6>
 80085f2:	2308      	movs	r3, #8
 80085f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085f8:	e0a1      	b.n	800873e <UART_SetConfig+0x2e6>
 80085fa:	2310      	movs	r3, #16
 80085fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008600:	e09d      	b.n	800873e <UART_SetConfig+0x2e6>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a4a      	ldr	r2, [pc, #296]	@ (8008730 <UART_SetConfig+0x2d8>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d125      	bne.n	8008658 <UART_SetConfig+0x200>
 800860c:	4b45      	ldr	r3, [pc, #276]	@ (8008724 <UART_SetConfig+0x2cc>)
 800860e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008612:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008616:	2bc0      	cmp	r3, #192	@ 0xc0
 8008618:	d016      	beq.n	8008648 <UART_SetConfig+0x1f0>
 800861a:	2bc0      	cmp	r3, #192	@ 0xc0
 800861c:	d818      	bhi.n	8008650 <UART_SetConfig+0x1f8>
 800861e:	2b80      	cmp	r3, #128	@ 0x80
 8008620:	d00a      	beq.n	8008638 <UART_SetConfig+0x1e0>
 8008622:	2b80      	cmp	r3, #128	@ 0x80
 8008624:	d814      	bhi.n	8008650 <UART_SetConfig+0x1f8>
 8008626:	2b00      	cmp	r3, #0
 8008628:	d002      	beq.n	8008630 <UART_SetConfig+0x1d8>
 800862a:	2b40      	cmp	r3, #64	@ 0x40
 800862c:	d008      	beq.n	8008640 <UART_SetConfig+0x1e8>
 800862e:	e00f      	b.n	8008650 <UART_SetConfig+0x1f8>
 8008630:	2300      	movs	r3, #0
 8008632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008636:	e082      	b.n	800873e <UART_SetConfig+0x2e6>
 8008638:	2302      	movs	r3, #2
 800863a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800863e:	e07e      	b.n	800873e <UART_SetConfig+0x2e6>
 8008640:	2304      	movs	r3, #4
 8008642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008646:	e07a      	b.n	800873e <UART_SetConfig+0x2e6>
 8008648:	2308      	movs	r3, #8
 800864a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800864e:	e076      	b.n	800873e <UART_SetConfig+0x2e6>
 8008650:	2310      	movs	r3, #16
 8008652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008656:	e072      	b.n	800873e <UART_SetConfig+0x2e6>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a35      	ldr	r2, [pc, #212]	@ (8008734 <UART_SetConfig+0x2dc>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d12a      	bne.n	80086b8 <UART_SetConfig+0x260>
 8008662:	4b30      	ldr	r3, [pc, #192]	@ (8008724 <UART_SetConfig+0x2cc>)
 8008664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008668:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800866c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008670:	d01a      	beq.n	80086a8 <UART_SetConfig+0x250>
 8008672:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008676:	d81b      	bhi.n	80086b0 <UART_SetConfig+0x258>
 8008678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800867c:	d00c      	beq.n	8008698 <UART_SetConfig+0x240>
 800867e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008682:	d815      	bhi.n	80086b0 <UART_SetConfig+0x258>
 8008684:	2b00      	cmp	r3, #0
 8008686:	d003      	beq.n	8008690 <UART_SetConfig+0x238>
 8008688:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800868c:	d008      	beq.n	80086a0 <UART_SetConfig+0x248>
 800868e:	e00f      	b.n	80086b0 <UART_SetConfig+0x258>
 8008690:	2300      	movs	r3, #0
 8008692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008696:	e052      	b.n	800873e <UART_SetConfig+0x2e6>
 8008698:	2302      	movs	r3, #2
 800869a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800869e:	e04e      	b.n	800873e <UART_SetConfig+0x2e6>
 80086a0:	2304      	movs	r3, #4
 80086a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086a6:	e04a      	b.n	800873e <UART_SetConfig+0x2e6>
 80086a8:	2308      	movs	r3, #8
 80086aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086ae:	e046      	b.n	800873e <UART_SetConfig+0x2e6>
 80086b0:	2310      	movs	r3, #16
 80086b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086b6:	e042      	b.n	800873e <UART_SetConfig+0x2e6>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a17      	ldr	r2, [pc, #92]	@ (800871c <UART_SetConfig+0x2c4>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d13a      	bne.n	8008738 <UART_SetConfig+0x2e0>
 80086c2:	4b18      	ldr	r3, [pc, #96]	@ (8008724 <UART_SetConfig+0x2cc>)
 80086c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80086cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086d0:	d01a      	beq.n	8008708 <UART_SetConfig+0x2b0>
 80086d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80086d6:	d81b      	bhi.n	8008710 <UART_SetConfig+0x2b8>
 80086d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086dc:	d00c      	beq.n	80086f8 <UART_SetConfig+0x2a0>
 80086de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086e2:	d815      	bhi.n	8008710 <UART_SetConfig+0x2b8>
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d003      	beq.n	80086f0 <UART_SetConfig+0x298>
 80086e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086ec:	d008      	beq.n	8008700 <UART_SetConfig+0x2a8>
 80086ee:	e00f      	b.n	8008710 <UART_SetConfig+0x2b8>
 80086f0:	2300      	movs	r3, #0
 80086f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086f6:	e022      	b.n	800873e <UART_SetConfig+0x2e6>
 80086f8:	2302      	movs	r3, #2
 80086fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80086fe:	e01e      	b.n	800873e <UART_SetConfig+0x2e6>
 8008700:	2304      	movs	r3, #4
 8008702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008706:	e01a      	b.n	800873e <UART_SetConfig+0x2e6>
 8008708:	2308      	movs	r3, #8
 800870a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800870e:	e016      	b.n	800873e <UART_SetConfig+0x2e6>
 8008710:	2310      	movs	r3, #16
 8008712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008716:	e012      	b.n	800873e <UART_SetConfig+0x2e6>
 8008718:	efff69f3 	.word	0xefff69f3
 800871c:	40008000 	.word	0x40008000
 8008720:	40013800 	.word	0x40013800
 8008724:	40021000 	.word	0x40021000
 8008728:	40004400 	.word	0x40004400
 800872c:	40004800 	.word	0x40004800
 8008730:	40004c00 	.word	0x40004c00
 8008734:	40005000 	.word	0x40005000
 8008738:	2310      	movs	r3, #16
 800873a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a9f      	ldr	r2, [pc, #636]	@ (80089c0 <UART_SetConfig+0x568>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d17a      	bne.n	800883e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008748:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800874c:	2b08      	cmp	r3, #8
 800874e:	d824      	bhi.n	800879a <UART_SetConfig+0x342>
 8008750:	a201      	add	r2, pc, #4	@ (adr r2, 8008758 <UART_SetConfig+0x300>)
 8008752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008756:	bf00      	nop
 8008758:	0800877d 	.word	0x0800877d
 800875c:	0800879b 	.word	0x0800879b
 8008760:	08008785 	.word	0x08008785
 8008764:	0800879b 	.word	0x0800879b
 8008768:	0800878b 	.word	0x0800878b
 800876c:	0800879b 	.word	0x0800879b
 8008770:	0800879b 	.word	0x0800879b
 8008774:	0800879b 	.word	0x0800879b
 8008778:	08008793 	.word	0x08008793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800877c:	f7fd feac 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 8008780:	61f8      	str	r0, [r7, #28]
        break;
 8008782:	e010      	b.n	80087a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008784:	4b8f      	ldr	r3, [pc, #572]	@ (80089c4 <UART_SetConfig+0x56c>)
 8008786:	61fb      	str	r3, [r7, #28]
        break;
 8008788:	e00d      	b.n	80087a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800878a:	f7fd fe0d 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 800878e:	61f8      	str	r0, [r7, #28]
        break;
 8008790:	e009      	b.n	80087a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008796:	61fb      	str	r3, [r7, #28]
        break;
 8008798:	e005      	b.n	80087a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80087a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 80fb 	beq.w	80089a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	4613      	mov	r3, r2
 80087b4:	005b      	lsls	r3, r3, #1
 80087b6:	4413      	add	r3, r2
 80087b8:	69fa      	ldr	r2, [r7, #28]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d305      	bcc.n	80087ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80087c4:	69fa      	ldr	r2, [r7, #28]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d903      	bls.n	80087d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80087d0:	e0e8      	b.n	80089a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	2200      	movs	r2, #0
 80087d6:	461c      	mov	r4, r3
 80087d8:	4615      	mov	r5, r2
 80087da:	f04f 0200 	mov.w	r2, #0
 80087de:	f04f 0300 	mov.w	r3, #0
 80087e2:	022b      	lsls	r3, r5, #8
 80087e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80087e8:	0222      	lsls	r2, r4, #8
 80087ea:	68f9      	ldr	r1, [r7, #12]
 80087ec:	6849      	ldr	r1, [r1, #4]
 80087ee:	0849      	lsrs	r1, r1, #1
 80087f0:	2000      	movs	r0, #0
 80087f2:	4688      	mov	r8, r1
 80087f4:	4681      	mov	r9, r0
 80087f6:	eb12 0a08 	adds.w	sl, r2, r8
 80087fa:	eb43 0b09 	adc.w	fp, r3, r9
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	603b      	str	r3, [r7, #0]
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800880c:	4650      	mov	r0, sl
 800880e:	4659      	mov	r1, fp
 8008810:	f7f8 fa5a 	bl	8000cc8 <__aeabi_uldivmod>
 8008814:	4602      	mov	r2, r0
 8008816:	460b      	mov	r3, r1
 8008818:	4613      	mov	r3, r2
 800881a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008822:	d308      	bcc.n	8008836 <UART_SetConfig+0x3de>
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800882a:	d204      	bcs.n	8008836 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	60da      	str	r2, [r3, #12]
 8008834:	e0b6      	b.n	80089a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800883c:	e0b2      	b.n	80089a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	69db      	ldr	r3, [r3, #28]
 8008842:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008846:	d15e      	bne.n	8008906 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008848:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800884c:	2b08      	cmp	r3, #8
 800884e:	d828      	bhi.n	80088a2 <UART_SetConfig+0x44a>
 8008850:	a201      	add	r2, pc, #4	@ (adr r2, 8008858 <UART_SetConfig+0x400>)
 8008852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008856:	bf00      	nop
 8008858:	0800887d 	.word	0x0800887d
 800885c:	08008885 	.word	0x08008885
 8008860:	0800888d 	.word	0x0800888d
 8008864:	080088a3 	.word	0x080088a3
 8008868:	08008893 	.word	0x08008893
 800886c:	080088a3 	.word	0x080088a3
 8008870:	080088a3 	.word	0x080088a3
 8008874:	080088a3 	.word	0x080088a3
 8008878:	0800889b 	.word	0x0800889b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800887c:	f7fd fe2c 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 8008880:	61f8      	str	r0, [r7, #28]
        break;
 8008882:	e014      	b.n	80088ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008884:	f7fd fe3e 	bl	8006504 <HAL_RCC_GetPCLK2Freq>
 8008888:	61f8      	str	r0, [r7, #28]
        break;
 800888a:	e010      	b.n	80088ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800888c:	4b4d      	ldr	r3, [pc, #308]	@ (80089c4 <UART_SetConfig+0x56c>)
 800888e:	61fb      	str	r3, [r7, #28]
        break;
 8008890:	e00d      	b.n	80088ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008892:	f7fd fd89 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8008896:	61f8      	str	r0, [r7, #28]
        break;
 8008898:	e009      	b.n	80088ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800889a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800889e:	61fb      	str	r3, [r7, #28]
        break;
 80088a0:	e005      	b.n	80088ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80088a2:	2300      	movs	r3, #0
 80088a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80088ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d077      	beq.n	80089a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	005a      	lsls	r2, r3, #1
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	085b      	lsrs	r3, r3, #1
 80088be:	441a      	add	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	2b0f      	cmp	r3, #15
 80088ce:	d916      	bls.n	80088fe <UART_SetConfig+0x4a6>
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088d6:	d212      	bcs.n	80088fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	b29b      	uxth	r3, r3
 80088dc:	f023 030f 	bic.w	r3, r3, #15
 80088e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	085b      	lsrs	r3, r3, #1
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	f003 0307 	and.w	r3, r3, #7
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	8afb      	ldrh	r3, [r7, #22]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	8afa      	ldrh	r2, [r7, #22]
 80088fa:	60da      	str	r2, [r3, #12]
 80088fc:	e052      	b.n	80089a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008904:	e04e      	b.n	80089a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008906:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800890a:	2b08      	cmp	r3, #8
 800890c:	d827      	bhi.n	800895e <UART_SetConfig+0x506>
 800890e:	a201      	add	r2, pc, #4	@ (adr r2, 8008914 <UART_SetConfig+0x4bc>)
 8008910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008914:	08008939 	.word	0x08008939
 8008918:	08008941 	.word	0x08008941
 800891c:	08008949 	.word	0x08008949
 8008920:	0800895f 	.word	0x0800895f
 8008924:	0800894f 	.word	0x0800894f
 8008928:	0800895f 	.word	0x0800895f
 800892c:	0800895f 	.word	0x0800895f
 8008930:	0800895f 	.word	0x0800895f
 8008934:	08008957 	.word	0x08008957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008938:	f7fd fdce 	bl	80064d8 <HAL_RCC_GetPCLK1Freq>
 800893c:	61f8      	str	r0, [r7, #28]
        break;
 800893e:	e014      	b.n	800896a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008940:	f7fd fde0 	bl	8006504 <HAL_RCC_GetPCLK2Freq>
 8008944:	61f8      	str	r0, [r7, #28]
        break;
 8008946:	e010      	b.n	800896a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008948:	4b1e      	ldr	r3, [pc, #120]	@ (80089c4 <UART_SetConfig+0x56c>)
 800894a:	61fb      	str	r3, [r7, #28]
        break;
 800894c:	e00d      	b.n	800896a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800894e:	f7fd fd2b 	bl	80063a8 <HAL_RCC_GetSysClockFreq>
 8008952:	61f8      	str	r0, [r7, #28]
        break;
 8008954:	e009      	b.n	800896a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800895a:	61fb      	str	r3, [r7, #28]
        break;
 800895c:	e005      	b.n	800896a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800895e:	2300      	movs	r3, #0
 8008960:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008968:	bf00      	nop
    }

    if (pclk != 0U)
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d019      	beq.n	80089a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	085a      	lsrs	r2, r3, #1
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	441a      	add	r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008982:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	2b0f      	cmp	r3, #15
 8008988:	d909      	bls.n	800899e <UART_SetConfig+0x546>
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008990:	d205      	bcs.n	800899e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	b29a      	uxth	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	60da      	str	r2, [r3, #12]
 800899c:	e002      	b.n	80089a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80089b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3728      	adds	r7, #40	@ 0x28
 80089b8:	46bd      	mov	sp, r7
 80089ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089be:	bf00      	nop
 80089c0:	40008000 	.word	0x40008000
 80089c4:	00f42400 	.word	0x00f42400

080089c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d4:	f003 0308 	and.w	r3, r3, #8
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00a      	beq.n	80089f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00a      	beq.n	8008a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	430a      	orrs	r2, r1
 8008a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00a      	beq.n	8008a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a3a:	f003 0304 	and.w	r3, r3, #4
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00a      	beq.n	8008a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	430a      	orrs	r2, r1
 8008a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a5c:	f003 0310 	and.w	r3, r3, #16
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00a      	beq.n	8008a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a7e:	f003 0320 	and.w	r3, r3, #32
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00a      	beq.n	8008a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	430a      	orrs	r2, r1
 8008a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d01a      	beq.n	8008ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	430a      	orrs	r2, r1
 8008abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ac2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ac6:	d10a      	bne.n	8008ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	430a      	orrs	r2, r1
 8008adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00a      	beq.n	8008b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	430a      	orrs	r2, r1
 8008afe:	605a      	str	r2, [r3, #4]
  }
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b098      	sub	sp, #96	@ 0x60
 8008b10:	af02      	add	r7, sp, #8
 8008b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b1c:	f7fa fbf6 	bl	800330c <HAL_GetTick>
 8008b20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0308 	and.w	r3, r3, #8
 8008b2c:	2b08      	cmp	r3, #8
 8008b2e:	d12e      	bne.n	8008b8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f88c 	bl	8008c5c <UART_WaitOnFlagUntilTimeout>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d021      	beq.n	8008b8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b52:	e853 3f00 	ldrex	r3, [r3]
 8008b56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	461a      	mov	r2, r3
 8008b66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b70:	e841 2300 	strex	r3, r2, [r1]
 8008b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1e6      	bne.n	8008b4a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2220      	movs	r2, #32
 8008b80:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e062      	b.n	8008c54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0304 	and.w	r3, r3, #4
 8008b98:	2b04      	cmp	r3, #4
 8008b9a:	d149      	bne.n	8008c30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f856 	bl	8008c5c <UART_WaitOnFlagUntilTimeout>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d03c      	beq.n	8008c30 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bbe:	e853 3f00 	ldrex	r3, [r3]
 8008bc2:	623b      	str	r3, [r7, #32]
   return(result);
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bdc:	e841 2300 	strex	r3, r2, [r1]
 8008be0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1e6      	bne.n	8008bb6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3308      	adds	r3, #8
 8008bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f023 0301 	bic.w	r3, r3, #1
 8008bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3308      	adds	r3, #8
 8008c06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c08:	61fa      	str	r2, [r7, #28]
 8008c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0c:	69b9      	ldr	r1, [r7, #24]
 8008c0e:	69fa      	ldr	r2, [r7, #28]
 8008c10:	e841 2300 	strex	r3, r2, [r1]
 8008c14:	617b      	str	r3, [r7, #20]
   return(result);
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e5      	bne.n	8008be8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e011      	b.n	8008c54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2220      	movs	r2, #32
 8008c34:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2220      	movs	r2, #32
 8008c3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3758      	adds	r7, #88	@ 0x58
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	603b      	str	r3, [r7, #0]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c6c:	e04f      	b.n	8008d0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c74:	d04b      	beq.n	8008d0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c76:	f7fa fb49 	bl	800330c <HAL_GetTick>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d302      	bcc.n	8008c8c <UART_WaitOnFlagUntilTimeout+0x30>
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	e04e      	b.n	8008d2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0304 	and.w	r3, r3, #4
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d037      	beq.n	8008d0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	2b80      	cmp	r3, #128	@ 0x80
 8008ca2:	d034      	beq.n	8008d0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	2b40      	cmp	r3, #64	@ 0x40
 8008ca8:	d031      	beq.n	8008d0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	f003 0308 	and.w	r3, r3, #8
 8008cb4:	2b08      	cmp	r3, #8
 8008cb6:	d110      	bne.n	8008cda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2208      	movs	r2, #8
 8008cbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f000 f838 	bl	8008d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2208      	movs	r2, #8
 8008cca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e029      	b.n	8008d2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	69db      	ldr	r3, [r3, #28]
 8008ce0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ce4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ce8:	d111      	bne.n	8008d0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008cf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f000 f81e 	bl	8008d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	e00f      	b.n	8008d2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	69da      	ldr	r2, [r3, #28]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	4013      	ands	r3, r2
 8008d18:	68ba      	ldr	r2, [r7, #8]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	bf0c      	ite	eq
 8008d1e:	2301      	moveq	r3, #1
 8008d20:	2300      	movne	r3, #0
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	461a      	mov	r2, r3
 8008d26:	79fb      	ldrb	r3, [r7, #7]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d0a0      	beq.n	8008c6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b095      	sub	sp, #84	@ 0x54
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d46:	e853 3f00 	ldrex	r3, [r3]
 8008d4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d5e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d64:	e841 2300 	strex	r3, r2, [r1]
 8008d68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1e6      	bne.n	8008d3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	3308      	adds	r3, #8
 8008d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	e853 3f00 	ldrex	r3, [r3]
 8008d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	f023 0301 	bic.w	r3, r3, #1
 8008d86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	3308      	adds	r3, #8
 8008d8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d98:	e841 2300 	strex	r3, r2, [r1]
 8008d9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1e5      	bne.n	8008d70 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d118      	bne.n	8008dde <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	e853 3f00 	ldrex	r3, [r3]
 8008db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	f023 0310 	bic.w	r3, r3, #16
 8008dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dca:	61bb      	str	r3, [r7, #24]
 8008dcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dce:	6979      	ldr	r1, [r7, #20]
 8008dd0:	69ba      	ldr	r2, [r7, #24]
 8008dd2:	e841 2300 	strex	r3, r2, [r1]
 8008dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1e6      	bne.n	8008dac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2220      	movs	r2, #32
 8008de2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008df2:	bf00      	nop
 8008df4:	3754      	adds	r7, #84	@ 0x54
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
	...

08008e00 <std>:
 8008e00:	2300      	movs	r3, #0
 8008e02:	b510      	push	{r4, lr}
 8008e04:	4604      	mov	r4, r0
 8008e06:	e9c0 3300 	strd	r3, r3, [r0]
 8008e0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e0e:	6083      	str	r3, [r0, #8]
 8008e10:	8181      	strh	r1, [r0, #12]
 8008e12:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e14:	81c2      	strh	r2, [r0, #14]
 8008e16:	6183      	str	r3, [r0, #24]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	2208      	movs	r2, #8
 8008e1c:	305c      	adds	r0, #92	@ 0x5c
 8008e1e:	f000 f9f9 	bl	8009214 <memset>
 8008e22:	4b0d      	ldr	r3, [pc, #52]	@ (8008e58 <std+0x58>)
 8008e24:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e26:	4b0d      	ldr	r3, [pc, #52]	@ (8008e5c <std+0x5c>)
 8008e28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e60 <std+0x60>)
 8008e2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e64 <std+0x64>)
 8008e30:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e32:	4b0d      	ldr	r3, [pc, #52]	@ (8008e68 <std+0x68>)
 8008e34:	6224      	str	r4, [r4, #32]
 8008e36:	429c      	cmp	r4, r3
 8008e38:	d006      	beq.n	8008e48 <std+0x48>
 8008e3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e3e:	4294      	cmp	r4, r2
 8008e40:	d002      	beq.n	8008e48 <std+0x48>
 8008e42:	33d0      	adds	r3, #208	@ 0xd0
 8008e44:	429c      	cmp	r4, r3
 8008e46:	d105      	bne.n	8008e54 <std+0x54>
 8008e48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e50:	f000 ba58 	b.w	8009304 <__retarget_lock_init_recursive>
 8008e54:	bd10      	pop	{r4, pc}
 8008e56:	bf00      	nop
 8008e58:	08009065 	.word	0x08009065
 8008e5c:	08009087 	.word	0x08009087
 8008e60:	080090bf 	.word	0x080090bf
 8008e64:	080090e3 	.word	0x080090e3
 8008e68:	20000344 	.word	0x20000344

08008e6c <stdio_exit_handler>:
 8008e6c:	4a02      	ldr	r2, [pc, #8]	@ (8008e78 <stdio_exit_handler+0xc>)
 8008e6e:	4903      	ldr	r1, [pc, #12]	@ (8008e7c <stdio_exit_handler+0x10>)
 8008e70:	4803      	ldr	r0, [pc, #12]	@ (8008e80 <stdio_exit_handler+0x14>)
 8008e72:	f000 b869 	b.w	8008f48 <_fwalk_sglue>
 8008e76:	bf00      	nop
 8008e78:	2000001c 	.word	0x2000001c
 8008e7c:	08009ba1 	.word	0x08009ba1
 8008e80:	2000002c 	.word	0x2000002c

08008e84 <cleanup_stdio>:
 8008e84:	6841      	ldr	r1, [r0, #4]
 8008e86:	4b0c      	ldr	r3, [pc, #48]	@ (8008eb8 <cleanup_stdio+0x34>)
 8008e88:	4299      	cmp	r1, r3
 8008e8a:	b510      	push	{r4, lr}
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	d001      	beq.n	8008e94 <cleanup_stdio+0x10>
 8008e90:	f000 fe86 	bl	8009ba0 <_fflush_r>
 8008e94:	68a1      	ldr	r1, [r4, #8]
 8008e96:	4b09      	ldr	r3, [pc, #36]	@ (8008ebc <cleanup_stdio+0x38>)
 8008e98:	4299      	cmp	r1, r3
 8008e9a:	d002      	beq.n	8008ea2 <cleanup_stdio+0x1e>
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f000 fe7f 	bl	8009ba0 <_fflush_r>
 8008ea2:	68e1      	ldr	r1, [r4, #12]
 8008ea4:	4b06      	ldr	r3, [pc, #24]	@ (8008ec0 <cleanup_stdio+0x3c>)
 8008ea6:	4299      	cmp	r1, r3
 8008ea8:	d004      	beq.n	8008eb4 <cleanup_stdio+0x30>
 8008eaa:	4620      	mov	r0, r4
 8008eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eb0:	f000 be76 	b.w	8009ba0 <_fflush_r>
 8008eb4:	bd10      	pop	{r4, pc}
 8008eb6:	bf00      	nop
 8008eb8:	20000344 	.word	0x20000344
 8008ebc:	200003ac 	.word	0x200003ac
 8008ec0:	20000414 	.word	0x20000414

08008ec4 <global_stdio_init.part.0>:
 8008ec4:	b510      	push	{r4, lr}
 8008ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ef4 <global_stdio_init.part.0+0x30>)
 8008ec8:	4c0b      	ldr	r4, [pc, #44]	@ (8008ef8 <global_stdio_init.part.0+0x34>)
 8008eca:	4a0c      	ldr	r2, [pc, #48]	@ (8008efc <global_stdio_init.part.0+0x38>)
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	4620      	mov	r0, r4
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	2104      	movs	r1, #4
 8008ed4:	f7ff ff94 	bl	8008e00 <std>
 8008ed8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008edc:	2201      	movs	r2, #1
 8008ede:	2109      	movs	r1, #9
 8008ee0:	f7ff ff8e 	bl	8008e00 <std>
 8008ee4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ee8:	2202      	movs	r2, #2
 8008eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eee:	2112      	movs	r1, #18
 8008ef0:	f7ff bf86 	b.w	8008e00 <std>
 8008ef4:	2000047c 	.word	0x2000047c
 8008ef8:	20000344 	.word	0x20000344
 8008efc:	08008e6d 	.word	0x08008e6d

08008f00 <__sfp_lock_acquire>:
 8008f00:	4801      	ldr	r0, [pc, #4]	@ (8008f08 <__sfp_lock_acquire+0x8>)
 8008f02:	f000 ba00 	b.w	8009306 <__retarget_lock_acquire_recursive>
 8008f06:	bf00      	nop
 8008f08:	20000485 	.word	0x20000485

08008f0c <__sfp_lock_release>:
 8008f0c:	4801      	ldr	r0, [pc, #4]	@ (8008f14 <__sfp_lock_release+0x8>)
 8008f0e:	f000 b9fb 	b.w	8009308 <__retarget_lock_release_recursive>
 8008f12:	bf00      	nop
 8008f14:	20000485 	.word	0x20000485

08008f18 <__sinit>:
 8008f18:	b510      	push	{r4, lr}
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	f7ff fff0 	bl	8008f00 <__sfp_lock_acquire>
 8008f20:	6a23      	ldr	r3, [r4, #32]
 8008f22:	b11b      	cbz	r3, 8008f2c <__sinit+0x14>
 8008f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f28:	f7ff bff0 	b.w	8008f0c <__sfp_lock_release>
 8008f2c:	4b04      	ldr	r3, [pc, #16]	@ (8008f40 <__sinit+0x28>)
 8008f2e:	6223      	str	r3, [r4, #32]
 8008f30:	4b04      	ldr	r3, [pc, #16]	@ (8008f44 <__sinit+0x2c>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1f5      	bne.n	8008f24 <__sinit+0xc>
 8008f38:	f7ff ffc4 	bl	8008ec4 <global_stdio_init.part.0>
 8008f3c:	e7f2      	b.n	8008f24 <__sinit+0xc>
 8008f3e:	bf00      	nop
 8008f40:	08008e85 	.word	0x08008e85
 8008f44:	2000047c 	.word	0x2000047c

08008f48 <_fwalk_sglue>:
 8008f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f4c:	4607      	mov	r7, r0
 8008f4e:	4688      	mov	r8, r1
 8008f50:	4614      	mov	r4, r2
 8008f52:	2600      	movs	r6, #0
 8008f54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f58:	f1b9 0901 	subs.w	r9, r9, #1
 8008f5c:	d505      	bpl.n	8008f6a <_fwalk_sglue+0x22>
 8008f5e:	6824      	ldr	r4, [r4, #0]
 8008f60:	2c00      	cmp	r4, #0
 8008f62:	d1f7      	bne.n	8008f54 <_fwalk_sglue+0xc>
 8008f64:	4630      	mov	r0, r6
 8008f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f6a:	89ab      	ldrh	r3, [r5, #12]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d907      	bls.n	8008f80 <_fwalk_sglue+0x38>
 8008f70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f74:	3301      	adds	r3, #1
 8008f76:	d003      	beq.n	8008f80 <_fwalk_sglue+0x38>
 8008f78:	4629      	mov	r1, r5
 8008f7a:	4638      	mov	r0, r7
 8008f7c:	47c0      	blx	r8
 8008f7e:	4306      	orrs	r6, r0
 8008f80:	3568      	adds	r5, #104	@ 0x68
 8008f82:	e7e9      	b.n	8008f58 <_fwalk_sglue+0x10>

08008f84 <iprintf>:
 8008f84:	b40f      	push	{r0, r1, r2, r3}
 8008f86:	b507      	push	{r0, r1, r2, lr}
 8008f88:	4906      	ldr	r1, [pc, #24]	@ (8008fa4 <iprintf+0x20>)
 8008f8a:	ab04      	add	r3, sp, #16
 8008f8c:	6808      	ldr	r0, [r1, #0]
 8008f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f92:	6881      	ldr	r1, [r0, #8]
 8008f94:	9301      	str	r3, [sp, #4]
 8008f96:	f000 fadb 	bl	8009550 <_vfiprintf_r>
 8008f9a:	b003      	add	sp, #12
 8008f9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fa0:	b004      	add	sp, #16
 8008fa2:	4770      	bx	lr
 8008fa4:	20000028 	.word	0x20000028

08008fa8 <_puts_r>:
 8008fa8:	6a03      	ldr	r3, [r0, #32]
 8008faa:	b570      	push	{r4, r5, r6, lr}
 8008fac:	6884      	ldr	r4, [r0, #8]
 8008fae:	4605      	mov	r5, r0
 8008fb0:	460e      	mov	r6, r1
 8008fb2:	b90b      	cbnz	r3, 8008fb8 <_puts_r+0x10>
 8008fb4:	f7ff ffb0 	bl	8008f18 <__sinit>
 8008fb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fba:	07db      	lsls	r3, r3, #31
 8008fbc:	d405      	bmi.n	8008fca <_puts_r+0x22>
 8008fbe:	89a3      	ldrh	r3, [r4, #12]
 8008fc0:	0598      	lsls	r0, r3, #22
 8008fc2:	d402      	bmi.n	8008fca <_puts_r+0x22>
 8008fc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fc6:	f000 f99e 	bl	8009306 <__retarget_lock_acquire_recursive>
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	0719      	lsls	r1, r3, #28
 8008fce:	d502      	bpl.n	8008fd6 <_puts_r+0x2e>
 8008fd0:	6923      	ldr	r3, [r4, #16]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d135      	bne.n	8009042 <_puts_r+0x9a>
 8008fd6:	4621      	mov	r1, r4
 8008fd8:	4628      	mov	r0, r5
 8008fda:	f000 f8c5 	bl	8009168 <__swsetup_r>
 8008fde:	b380      	cbz	r0, 8009042 <_puts_r+0x9a>
 8008fe0:	f04f 35ff 	mov.w	r5, #4294967295
 8008fe4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fe6:	07da      	lsls	r2, r3, #31
 8008fe8:	d405      	bmi.n	8008ff6 <_puts_r+0x4e>
 8008fea:	89a3      	ldrh	r3, [r4, #12]
 8008fec:	059b      	lsls	r3, r3, #22
 8008fee:	d402      	bmi.n	8008ff6 <_puts_r+0x4e>
 8008ff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ff2:	f000 f989 	bl	8009308 <__retarget_lock_release_recursive>
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	bd70      	pop	{r4, r5, r6, pc}
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	da04      	bge.n	8009008 <_puts_r+0x60>
 8008ffe:	69a2      	ldr	r2, [r4, #24]
 8009000:	429a      	cmp	r2, r3
 8009002:	dc17      	bgt.n	8009034 <_puts_r+0x8c>
 8009004:	290a      	cmp	r1, #10
 8009006:	d015      	beq.n	8009034 <_puts_r+0x8c>
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	1c5a      	adds	r2, r3, #1
 800900c:	6022      	str	r2, [r4, #0]
 800900e:	7019      	strb	r1, [r3, #0]
 8009010:	68a3      	ldr	r3, [r4, #8]
 8009012:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009016:	3b01      	subs	r3, #1
 8009018:	60a3      	str	r3, [r4, #8]
 800901a:	2900      	cmp	r1, #0
 800901c:	d1ed      	bne.n	8008ffa <_puts_r+0x52>
 800901e:	2b00      	cmp	r3, #0
 8009020:	da11      	bge.n	8009046 <_puts_r+0x9e>
 8009022:	4622      	mov	r2, r4
 8009024:	210a      	movs	r1, #10
 8009026:	4628      	mov	r0, r5
 8009028:	f000 f85f 	bl	80090ea <__swbuf_r>
 800902c:	3001      	adds	r0, #1
 800902e:	d0d7      	beq.n	8008fe0 <_puts_r+0x38>
 8009030:	250a      	movs	r5, #10
 8009032:	e7d7      	b.n	8008fe4 <_puts_r+0x3c>
 8009034:	4622      	mov	r2, r4
 8009036:	4628      	mov	r0, r5
 8009038:	f000 f857 	bl	80090ea <__swbuf_r>
 800903c:	3001      	adds	r0, #1
 800903e:	d1e7      	bne.n	8009010 <_puts_r+0x68>
 8009040:	e7ce      	b.n	8008fe0 <_puts_r+0x38>
 8009042:	3e01      	subs	r6, #1
 8009044:	e7e4      	b.n	8009010 <_puts_r+0x68>
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	1c5a      	adds	r2, r3, #1
 800904a:	6022      	str	r2, [r4, #0]
 800904c:	220a      	movs	r2, #10
 800904e:	701a      	strb	r2, [r3, #0]
 8009050:	e7ee      	b.n	8009030 <_puts_r+0x88>
	...

08009054 <puts>:
 8009054:	4b02      	ldr	r3, [pc, #8]	@ (8009060 <puts+0xc>)
 8009056:	4601      	mov	r1, r0
 8009058:	6818      	ldr	r0, [r3, #0]
 800905a:	f7ff bfa5 	b.w	8008fa8 <_puts_r>
 800905e:	bf00      	nop
 8009060:	20000028 	.word	0x20000028

08009064 <__sread>:
 8009064:	b510      	push	{r4, lr}
 8009066:	460c      	mov	r4, r1
 8009068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800906c:	f000 f8fc 	bl	8009268 <_read_r>
 8009070:	2800      	cmp	r0, #0
 8009072:	bfab      	itete	ge
 8009074:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009076:	89a3      	ldrhlt	r3, [r4, #12]
 8009078:	181b      	addge	r3, r3, r0
 800907a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800907e:	bfac      	ite	ge
 8009080:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009082:	81a3      	strhlt	r3, [r4, #12]
 8009084:	bd10      	pop	{r4, pc}

08009086 <__swrite>:
 8009086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800908a:	461f      	mov	r7, r3
 800908c:	898b      	ldrh	r3, [r1, #12]
 800908e:	05db      	lsls	r3, r3, #23
 8009090:	4605      	mov	r5, r0
 8009092:	460c      	mov	r4, r1
 8009094:	4616      	mov	r6, r2
 8009096:	d505      	bpl.n	80090a4 <__swrite+0x1e>
 8009098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800909c:	2302      	movs	r3, #2
 800909e:	2200      	movs	r2, #0
 80090a0:	f000 f8d0 	bl	8009244 <_lseek_r>
 80090a4:	89a3      	ldrh	r3, [r4, #12]
 80090a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090ae:	81a3      	strh	r3, [r4, #12]
 80090b0:	4632      	mov	r2, r6
 80090b2:	463b      	mov	r3, r7
 80090b4:	4628      	mov	r0, r5
 80090b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090ba:	f000 b8e7 	b.w	800928c <_write_r>

080090be <__sseek>:
 80090be:	b510      	push	{r4, lr}
 80090c0:	460c      	mov	r4, r1
 80090c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c6:	f000 f8bd 	bl	8009244 <_lseek_r>
 80090ca:	1c43      	adds	r3, r0, #1
 80090cc:	89a3      	ldrh	r3, [r4, #12]
 80090ce:	bf15      	itete	ne
 80090d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090da:	81a3      	strheq	r3, [r4, #12]
 80090dc:	bf18      	it	ne
 80090de:	81a3      	strhne	r3, [r4, #12]
 80090e0:	bd10      	pop	{r4, pc}

080090e2 <__sclose>:
 80090e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e6:	f000 b89d 	b.w	8009224 <_close_r>

080090ea <__swbuf_r>:
 80090ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ec:	460e      	mov	r6, r1
 80090ee:	4614      	mov	r4, r2
 80090f0:	4605      	mov	r5, r0
 80090f2:	b118      	cbz	r0, 80090fc <__swbuf_r+0x12>
 80090f4:	6a03      	ldr	r3, [r0, #32]
 80090f6:	b90b      	cbnz	r3, 80090fc <__swbuf_r+0x12>
 80090f8:	f7ff ff0e 	bl	8008f18 <__sinit>
 80090fc:	69a3      	ldr	r3, [r4, #24]
 80090fe:	60a3      	str	r3, [r4, #8]
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	071a      	lsls	r2, r3, #28
 8009104:	d501      	bpl.n	800910a <__swbuf_r+0x20>
 8009106:	6923      	ldr	r3, [r4, #16]
 8009108:	b943      	cbnz	r3, 800911c <__swbuf_r+0x32>
 800910a:	4621      	mov	r1, r4
 800910c:	4628      	mov	r0, r5
 800910e:	f000 f82b 	bl	8009168 <__swsetup_r>
 8009112:	b118      	cbz	r0, 800911c <__swbuf_r+0x32>
 8009114:	f04f 37ff 	mov.w	r7, #4294967295
 8009118:	4638      	mov	r0, r7
 800911a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800911c:	6823      	ldr	r3, [r4, #0]
 800911e:	6922      	ldr	r2, [r4, #16]
 8009120:	1a98      	subs	r0, r3, r2
 8009122:	6963      	ldr	r3, [r4, #20]
 8009124:	b2f6      	uxtb	r6, r6
 8009126:	4283      	cmp	r3, r0
 8009128:	4637      	mov	r7, r6
 800912a:	dc05      	bgt.n	8009138 <__swbuf_r+0x4e>
 800912c:	4621      	mov	r1, r4
 800912e:	4628      	mov	r0, r5
 8009130:	f000 fd36 	bl	8009ba0 <_fflush_r>
 8009134:	2800      	cmp	r0, #0
 8009136:	d1ed      	bne.n	8009114 <__swbuf_r+0x2a>
 8009138:	68a3      	ldr	r3, [r4, #8]
 800913a:	3b01      	subs	r3, #1
 800913c:	60a3      	str	r3, [r4, #8]
 800913e:	6823      	ldr	r3, [r4, #0]
 8009140:	1c5a      	adds	r2, r3, #1
 8009142:	6022      	str	r2, [r4, #0]
 8009144:	701e      	strb	r6, [r3, #0]
 8009146:	6962      	ldr	r2, [r4, #20]
 8009148:	1c43      	adds	r3, r0, #1
 800914a:	429a      	cmp	r2, r3
 800914c:	d004      	beq.n	8009158 <__swbuf_r+0x6e>
 800914e:	89a3      	ldrh	r3, [r4, #12]
 8009150:	07db      	lsls	r3, r3, #31
 8009152:	d5e1      	bpl.n	8009118 <__swbuf_r+0x2e>
 8009154:	2e0a      	cmp	r6, #10
 8009156:	d1df      	bne.n	8009118 <__swbuf_r+0x2e>
 8009158:	4621      	mov	r1, r4
 800915a:	4628      	mov	r0, r5
 800915c:	f000 fd20 	bl	8009ba0 <_fflush_r>
 8009160:	2800      	cmp	r0, #0
 8009162:	d0d9      	beq.n	8009118 <__swbuf_r+0x2e>
 8009164:	e7d6      	b.n	8009114 <__swbuf_r+0x2a>
	...

08009168 <__swsetup_r>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	4b29      	ldr	r3, [pc, #164]	@ (8009210 <__swsetup_r+0xa8>)
 800916c:	4605      	mov	r5, r0
 800916e:	6818      	ldr	r0, [r3, #0]
 8009170:	460c      	mov	r4, r1
 8009172:	b118      	cbz	r0, 800917c <__swsetup_r+0x14>
 8009174:	6a03      	ldr	r3, [r0, #32]
 8009176:	b90b      	cbnz	r3, 800917c <__swsetup_r+0x14>
 8009178:	f7ff fece 	bl	8008f18 <__sinit>
 800917c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009180:	0719      	lsls	r1, r3, #28
 8009182:	d422      	bmi.n	80091ca <__swsetup_r+0x62>
 8009184:	06da      	lsls	r2, r3, #27
 8009186:	d407      	bmi.n	8009198 <__swsetup_r+0x30>
 8009188:	2209      	movs	r2, #9
 800918a:	602a      	str	r2, [r5, #0]
 800918c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009190:	81a3      	strh	r3, [r4, #12]
 8009192:	f04f 30ff 	mov.w	r0, #4294967295
 8009196:	e033      	b.n	8009200 <__swsetup_r+0x98>
 8009198:	0758      	lsls	r0, r3, #29
 800919a:	d512      	bpl.n	80091c2 <__swsetup_r+0x5a>
 800919c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800919e:	b141      	cbz	r1, 80091b2 <__swsetup_r+0x4a>
 80091a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091a4:	4299      	cmp	r1, r3
 80091a6:	d002      	beq.n	80091ae <__swsetup_r+0x46>
 80091a8:	4628      	mov	r0, r5
 80091aa:	f000 f8af 	bl	800930c <_free_r>
 80091ae:	2300      	movs	r3, #0
 80091b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80091b2:	89a3      	ldrh	r3, [r4, #12]
 80091b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80091b8:	81a3      	strh	r3, [r4, #12]
 80091ba:	2300      	movs	r3, #0
 80091bc:	6063      	str	r3, [r4, #4]
 80091be:	6923      	ldr	r3, [r4, #16]
 80091c0:	6023      	str	r3, [r4, #0]
 80091c2:	89a3      	ldrh	r3, [r4, #12]
 80091c4:	f043 0308 	orr.w	r3, r3, #8
 80091c8:	81a3      	strh	r3, [r4, #12]
 80091ca:	6923      	ldr	r3, [r4, #16]
 80091cc:	b94b      	cbnz	r3, 80091e2 <__swsetup_r+0x7a>
 80091ce:	89a3      	ldrh	r3, [r4, #12]
 80091d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091d8:	d003      	beq.n	80091e2 <__swsetup_r+0x7a>
 80091da:	4621      	mov	r1, r4
 80091dc:	4628      	mov	r0, r5
 80091de:	f000 fd2d 	bl	8009c3c <__smakebuf_r>
 80091e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091e6:	f013 0201 	ands.w	r2, r3, #1
 80091ea:	d00a      	beq.n	8009202 <__swsetup_r+0x9a>
 80091ec:	2200      	movs	r2, #0
 80091ee:	60a2      	str	r2, [r4, #8]
 80091f0:	6962      	ldr	r2, [r4, #20]
 80091f2:	4252      	negs	r2, r2
 80091f4:	61a2      	str	r2, [r4, #24]
 80091f6:	6922      	ldr	r2, [r4, #16]
 80091f8:	b942      	cbnz	r2, 800920c <__swsetup_r+0xa4>
 80091fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091fe:	d1c5      	bne.n	800918c <__swsetup_r+0x24>
 8009200:	bd38      	pop	{r3, r4, r5, pc}
 8009202:	0799      	lsls	r1, r3, #30
 8009204:	bf58      	it	pl
 8009206:	6962      	ldrpl	r2, [r4, #20]
 8009208:	60a2      	str	r2, [r4, #8]
 800920a:	e7f4      	b.n	80091f6 <__swsetup_r+0x8e>
 800920c:	2000      	movs	r0, #0
 800920e:	e7f7      	b.n	8009200 <__swsetup_r+0x98>
 8009210:	20000028 	.word	0x20000028

08009214 <memset>:
 8009214:	4402      	add	r2, r0
 8009216:	4603      	mov	r3, r0
 8009218:	4293      	cmp	r3, r2
 800921a:	d100      	bne.n	800921e <memset+0xa>
 800921c:	4770      	bx	lr
 800921e:	f803 1b01 	strb.w	r1, [r3], #1
 8009222:	e7f9      	b.n	8009218 <memset+0x4>

08009224 <_close_r>:
 8009224:	b538      	push	{r3, r4, r5, lr}
 8009226:	4d06      	ldr	r5, [pc, #24]	@ (8009240 <_close_r+0x1c>)
 8009228:	2300      	movs	r3, #0
 800922a:	4604      	mov	r4, r0
 800922c:	4608      	mov	r0, r1
 800922e:	602b      	str	r3, [r5, #0]
 8009230:	f7f9 ff55 	bl	80030de <_close>
 8009234:	1c43      	adds	r3, r0, #1
 8009236:	d102      	bne.n	800923e <_close_r+0x1a>
 8009238:	682b      	ldr	r3, [r5, #0]
 800923a:	b103      	cbz	r3, 800923e <_close_r+0x1a>
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	bd38      	pop	{r3, r4, r5, pc}
 8009240:	20000480 	.word	0x20000480

08009244 <_lseek_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4d07      	ldr	r5, [pc, #28]	@ (8009264 <_lseek_r+0x20>)
 8009248:	4604      	mov	r4, r0
 800924a:	4608      	mov	r0, r1
 800924c:	4611      	mov	r1, r2
 800924e:	2200      	movs	r2, #0
 8009250:	602a      	str	r2, [r5, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	f7f9 ff6a 	bl	800312c <_lseek>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	d102      	bne.n	8009262 <_lseek_r+0x1e>
 800925c:	682b      	ldr	r3, [r5, #0]
 800925e:	b103      	cbz	r3, 8009262 <_lseek_r+0x1e>
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	bd38      	pop	{r3, r4, r5, pc}
 8009264:	20000480 	.word	0x20000480

08009268 <_read_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	4d07      	ldr	r5, [pc, #28]	@ (8009288 <_read_r+0x20>)
 800926c:	4604      	mov	r4, r0
 800926e:	4608      	mov	r0, r1
 8009270:	4611      	mov	r1, r2
 8009272:	2200      	movs	r2, #0
 8009274:	602a      	str	r2, [r5, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	f7f9 fef8 	bl	800306c <_read>
 800927c:	1c43      	adds	r3, r0, #1
 800927e:	d102      	bne.n	8009286 <_read_r+0x1e>
 8009280:	682b      	ldr	r3, [r5, #0]
 8009282:	b103      	cbz	r3, 8009286 <_read_r+0x1e>
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	bd38      	pop	{r3, r4, r5, pc}
 8009288:	20000480 	.word	0x20000480

0800928c <_write_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4d07      	ldr	r5, [pc, #28]	@ (80092ac <_write_r+0x20>)
 8009290:	4604      	mov	r4, r0
 8009292:	4608      	mov	r0, r1
 8009294:	4611      	mov	r1, r2
 8009296:	2200      	movs	r2, #0
 8009298:	602a      	str	r2, [r5, #0]
 800929a:	461a      	mov	r2, r3
 800929c:	f7f9 ff03 	bl	80030a6 <_write>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d102      	bne.n	80092aa <_write_r+0x1e>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	b103      	cbz	r3, 80092aa <_write_r+0x1e>
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	20000480 	.word	0x20000480

080092b0 <__errno>:
 80092b0:	4b01      	ldr	r3, [pc, #4]	@ (80092b8 <__errno+0x8>)
 80092b2:	6818      	ldr	r0, [r3, #0]
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	20000028 	.word	0x20000028

080092bc <__libc_init_array>:
 80092bc:	b570      	push	{r4, r5, r6, lr}
 80092be:	4d0d      	ldr	r5, [pc, #52]	@ (80092f4 <__libc_init_array+0x38>)
 80092c0:	4c0d      	ldr	r4, [pc, #52]	@ (80092f8 <__libc_init_array+0x3c>)
 80092c2:	1b64      	subs	r4, r4, r5
 80092c4:	10a4      	asrs	r4, r4, #2
 80092c6:	2600      	movs	r6, #0
 80092c8:	42a6      	cmp	r6, r4
 80092ca:	d109      	bne.n	80092e0 <__libc_init_array+0x24>
 80092cc:	4d0b      	ldr	r5, [pc, #44]	@ (80092fc <__libc_init_array+0x40>)
 80092ce:	4c0c      	ldr	r4, [pc, #48]	@ (8009300 <__libc_init_array+0x44>)
 80092d0:	f001 fc80 	bl	800abd4 <_init>
 80092d4:	1b64      	subs	r4, r4, r5
 80092d6:	10a4      	asrs	r4, r4, #2
 80092d8:	2600      	movs	r6, #0
 80092da:	42a6      	cmp	r6, r4
 80092dc:	d105      	bne.n	80092ea <__libc_init_array+0x2e>
 80092de:	bd70      	pop	{r4, r5, r6, pc}
 80092e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092e4:	4798      	blx	r3
 80092e6:	3601      	adds	r6, #1
 80092e8:	e7ee      	b.n	80092c8 <__libc_init_array+0xc>
 80092ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ee:	4798      	blx	r3
 80092f0:	3601      	adds	r6, #1
 80092f2:	e7f2      	b.n	80092da <__libc_init_array+0x1e>
 80092f4:	0800ad38 	.word	0x0800ad38
 80092f8:	0800ad38 	.word	0x0800ad38
 80092fc:	0800ad38 	.word	0x0800ad38
 8009300:	0800ad3c 	.word	0x0800ad3c

08009304 <__retarget_lock_init_recursive>:
 8009304:	4770      	bx	lr

08009306 <__retarget_lock_acquire_recursive>:
 8009306:	4770      	bx	lr

08009308 <__retarget_lock_release_recursive>:
 8009308:	4770      	bx	lr
	...

0800930c <_free_r>:
 800930c:	b538      	push	{r3, r4, r5, lr}
 800930e:	4605      	mov	r5, r0
 8009310:	2900      	cmp	r1, #0
 8009312:	d041      	beq.n	8009398 <_free_r+0x8c>
 8009314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009318:	1f0c      	subs	r4, r1, #4
 800931a:	2b00      	cmp	r3, #0
 800931c:	bfb8      	it	lt
 800931e:	18e4      	addlt	r4, r4, r3
 8009320:	f000 f8e0 	bl	80094e4 <__malloc_lock>
 8009324:	4a1d      	ldr	r2, [pc, #116]	@ (800939c <_free_r+0x90>)
 8009326:	6813      	ldr	r3, [r2, #0]
 8009328:	b933      	cbnz	r3, 8009338 <_free_r+0x2c>
 800932a:	6063      	str	r3, [r4, #4]
 800932c:	6014      	str	r4, [r2, #0]
 800932e:	4628      	mov	r0, r5
 8009330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009334:	f000 b8dc 	b.w	80094f0 <__malloc_unlock>
 8009338:	42a3      	cmp	r3, r4
 800933a:	d908      	bls.n	800934e <_free_r+0x42>
 800933c:	6820      	ldr	r0, [r4, #0]
 800933e:	1821      	adds	r1, r4, r0
 8009340:	428b      	cmp	r3, r1
 8009342:	bf01      	itttt	eq
 8009344:	6819      	ldreq	r1, [r3, #0]
 8009346:	685b      	ldreq	r3, [r3, #4]
 8009348:	1809      	addeq	r1, r1, r0
 800934a:	6021      	streq	r1, [r4, #0]
 800934c:	e7ed      	b.n	800932a <_free_r+0x1e>
 800934e:	461a      	mov	r2, r3
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	b10b      	cbz	r3, 8009358 <_free_r+0x4c>
 8009354:	42a3      	cmp	r3, r4
 8009356:	d9fa      	bls.n	800934e <_free_r+0x42>
 8009358:	6811      	ldr	r1, [r2, #0]
 800935a:	1850      	adds	r0, r2, r1
 800935c:	42a0      	cmp	r0, r4
 800935e:	d10b      	bne.n	8009378 <_free_r+0x6c>
 8009360:	6820      	ldr	r0, [r4, #0]
 8009362:	4401      	add	r1, r0
 8009364:	1850      	adds	r0, r2, r1
 8009366:	4283      	cmp	r3, r0
 8009368:	6011      	str	r1, [r2, #0]
 800936a:	d1e0      	bne.n	800932e <_free_r+0x22>
 800936c:	6818      	ldr	r0, [r3, #0]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	6053      	str	r3, [r2, #4]
 8009372:	4408      	add	r0, r1
 8009374:	6010      	str	r0, [r2, #0]
 8009376:	e7da      	b.n	800932e <_free_r+0x22>
 8009378:	d902      	bls.n	8009380 <_free_r+0x74>
 800937a:	230c      	movs	r3, #12
 800937c:	602b      	str	r3, [r5, #0]
 800937e:	e7d6      	b.n	800932e <_free_r+0x22>
 8009380:	6820      	ldr	r0, [r4, #0]
 8009382:	1821      	adds	r1, r4, r0
 8009384:	428b      	cmp	r3, r1
 8009386:	bf04      	itt	eq
 8009388:	6819      	ldreq	r1, [r3, #0]
 800938a:	685b      	ldreq	r3, [r3, #4]
 800938c:	6063      	str	r3, [r4, #4]
 800938e:	bf04      	itt	eq
 8009390:	1809      	addeq	r1, r1, r0
 8009392:	6021      	streq	r1, [r4, #0]
 8009394:	6054      	str	r4, [r2, #4]
 8009396:	e7ca      	b.n	800932e <_free_r+0x22>
 8009398:	bd38      	pop	{r3, r4, r5, pc}
 800939a:	bf00      	nop
 800939c:	2000048c 	.word	0x2000048c

080093a0 <sbrk_aligned>:
 80093a0:	b570      	push	{r4, r5, r6, lr}
 80093a2:	4e0f      	ldr	r6, [pc, #60]	@ (80093e0 <sbrk_aligned+0x40>)
 80093a4:	460c      	mov	r4, r1
 80093a6:	6831      	ldr	r1, [r6, #0]
 80093a8:	4605      	mov	r5, r0
 80093aa:	b911      	cbnz	r1, 80093b2 <sbrk_aligned+0x12>
 80093ac:	f000 fca4 	bl	8009cf8 <_sbrk_r>
 80093b0:	6030      	str	r0, [r6, #0]
 80093b2:	4621      	mov	r1, r4
 80093b4:	4628      	mov	r0, r5
 80093b6:	f000 fc9f 	bl	8009cf8 <_sbrk_r>
 80093ba:	1c43      	adds	r3, r0, #1
 80093bc:	d103      	bne.n	80093c6 <sbrk_aligned+0x26>
 80093be:	f04f 34ff 	mov.w	r4, #4294967295
 80093c2:	4620      	mov	r0, r4
 80093c4:	bd70      	pop	{r4, r5, r6, pc}
 80093c6:	1cc4      	adds	r4, r0, #3
 80093c8:	f024 0403 	bic.w	r4, r4, #3
 80093cc:	42a0      	cmp	r0, r4
 80093ce:	d0f8      	beq.n	80093c2 <sbrk_aligned+0x22>
 80093d0:	1a21      	subs	r1, r4, r0
 80093d2:	4628      	mov	r0, r5
 80093d4:	f000 fc90 	bl	8009cf8 <_sbrk_r>
 80093d8:	3001      	adds	r0, #1
 80093da:	d1f2      	bne.n	80093c2 <sbrk_aligned+0x22>
 80093dc:	e7ef      	b.n	80093be <sbrk_aligned+0x1e>
 80093de:	bf00      	nop
 80093e0:	20000488 	.word	0x20000488

080093e4 <_malloc_r>:
 80093e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e8:	1ccd      	adds	r5, r1, #3
 80093ea:	f025 0503 	bic.w	r5, r5, #3
 80093ee:	3508      	adds	r5, #8
 80093f0:	2d0c      	cmp	r5, #12
 80093f2:	bf38      	it	cc
 80093f4:	250c      	movcc	r5, #12
 80093f6:	2d00      	cmp	r5, #0
 80093f8:	4606      	mov	r6, r0
 80093fa:	db01      	blt.n	8009400 <_malloc_r+0x1c>
 80093fc:	42a9      	cmp	r1, r5
 80093fe:	d904      	bls.n	800940a <_malloc_r+0x26>
 8009400:	230c      	movs	r3, #12
 8009402:	6033      	str	r3, [r6, #0]
 8009404:	2000      	movs	r0, #0
 8009406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800940a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80094e0 <_malloc_r+0xfc>
 800940e:	f000 f869 	bl	80094e4 <__malloc_lock>
 8009412:	f8d8 3000 	ldr.w	r3, [r8]
 8009416:	461c      	mov	r4, r3
 8009418:	bb44      	cbnz	r4, 800946c <_malloc_r+0x88>
 800941a:	4629      	mov	r1, r5
 800941c:	4630      	mov	r0, r6
 800941e:	f7ff ffbf 	bl	80093a0 <sbrk_aligned>
 8009422:	1c43      	adds	r3, r0, #1
 8009424:	4604      	mov	r4, r0
 8009426:	d158      	bne.n	80094da <_malloc_r+0xf6>
 8009428:	f8d8 4000 	ldr.w	r4, [r8]
 800942c:	4627      	mov	r7, r4
 800942e:	2f00      	cmp	r7, #0
 8009430:	d143      	bne.n	80094ba <_malloc_r+0xd6>
 8009432:	2c00      	cmp	r4, #0
 8009434:	d04b      	beq.n	80094ce <_malloc_r+0xea>
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	4639      	mov	r1, r7
 800943a:	4630      	mov	r0, r6
 800943c:	eb04 0903 	add.w	r9, r4, r3
 8009440:	f000 fc5a 	bl	8009cf8 <_sbrk_r>
 8009444:	4581      	cmp	r9, r0
 8009446:	d142      	bne.n	80094ce <_malloc_r+0xea>
 8009448:	6821      	ldr	r1, [r4, #0]
 800944a:	1a6d      	subs	r5, r5, r1
 800944c:	4629      	mov	r1, r5
 800944e:	4630      	mov	r0, r6
 8009450:	f7ff ffa6 	bl	80093a0 <sbrk_aligned>
 8009454:	3001      	adds	r0, #1
 8009456:	d03a      	beq.n	80094ce <_malloc_r+0xea>
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	442b      	add	r3, r5
 800945c:	6023      	str	r3, [r4, #0]
 800945e:	f8d8 3000 	ldr.w	r3, [r8]
 8009462:	685a      	ldr	r2, [r3, #4]
 8009464:	bb62      	cbnz	r2, 80094c0 <_malloc_r+0xdc>
 8009466:	f8c8 7000 	str.w	r7, [r8]
 800946a:	e00f      	b.n	800948c <_malloc_r+0xa8>
 800946c:	6822      	ldr	r2, [r4, #0]
 800946e:	1b52      	subs	r2, r2, r5
 8009470:	d420      	bmi.n	80094b4 <_malloc_r+0xd0>
 8009472:	2a0b      	cmp	r2, #11
 8009474:	d917      	bls.n	80094a6 <_malloc_r+0xc2>
 8009476:	1961      	adds	r1, r4, r5
 8009478:	42a3      	cmp	r3, r4
 800947a:	6025      	str	r5, [r4, #0]
 800947c:	bf18      	it	ne
 800947e:	6059      	strne	r1, [r3, #4]
 8009480:	6863      	ldr	r3, [r4, #4]
 8009482:	bf08      	it	eq
 8009484:	f8c8 1000 	streq.w	r1, [r8]
 8009488:	5162      	str	r2, [r4, r5]
 800948a:	604b      	str	r3, [r1, #4]
 800948c:	4630      	mov	r0, r6
 800948e:	f000 f82f 	bl	80094f0 <__malloc_unlock>
 8009492:	f104 000b 	add.w	r0, r4, #11
 8009496:	1d23      	adds	r3, r4, #4
 8009498:	f020 0007 	bic.w	r0, r0, #7
 800949c:	1ac2      	subs	r2, r0, r3
 800949e:	bf1c      	itt	ne
 80094a0:	1a1b      	subne	r3, r3, r0
 80094a2:	50a3      	strne	r3, [r4, r2]
 80094a4:	e7af      	b.n	8009406 <_malloc_r+0x22>
 80094a6:	6862      	ldr	r2, [r4, #4]
 80094a8:	42a3      	cmp	r3, r4
 80094aa:	bf0c      	ite	eq
 80094ac:	f8c8 2000 	streq.w	r2, [r8]
 80094b0:	605a      	strne	r2, [r3, #4]
 80094b2:	e7eb      	b.n	800948c <_malloc_r+0xa8>
 80094b4:	4623      	mov	r3, r4
 80094b6:	6864      	ldr	r4, [r4, #4]
 80094b8:	e7ae      	b.n	8009418 <_malloc_r+0x34>
 80094ba:	463c      	mov	r4, r7
 80094bc:	687f      	ldr	r7, [r7, #4]
 80094be:	e7b6      	b.n	800942e <_malloc_r+0x4a>
 80094c0:	461a      	mov	r2, r3
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	42a3      	cmp	r3, r4
 80094c6:	d1fb      	bne.n	80094c0 <_malloc_r+0xdc>
 80094c8:	2300      	movs	r3, #0
 80094ca:	6053      	str	r3, [r2, #4]
 80094cc:	e7de      	b.n	800948c <_malloc_r+0xa8>
 80094ce:	230c      	movs	r3, #12
 80094d0:	6033      	str	r3, [r6, #0]
 80094d2:	4630      	mov	r0, r6
 80094d4:	f000 f80c 	bl	80094f0 <__malloc_unlock>
 80094d8:	e794      	b.n	8009404 <_malloc_r+0x20>
 80094da:	6005      	str	r5, [r0, #0]
 80094dc:	e7d6      	b.n	800948c <_malloc_r+0xa8>
 80094de:	bf00      	nop
 80094e0:	2000048c 	.word	0x2000048c

080094e4 <__malloc_lock>:
 80094e4:	4801      	ldr	r0, [pc, #4]	@ (80094ec <__malloc_lock+0x8>)
 80094e6:	f7ff bf0e 	b.w	8009306 <__retarget_lock_acquire_recursive>
 80094ea:	bf00      	nop
 80094ec:	20000484 	.word	0x20000484

080094f0 <__malloc_unlock>:
 80094f0:	4801      	ldr	r0, [pc, #4]	@ (80094f8 <__malloc_unlock+0x8>)
 80094f2:	f7ff bf09 	b.w	8009308 <__retarget_lock_release_recursive>
 80094f6:	bf00      	nop
 80094f8:	20000484 	.word	0x20000484

080094fc <__sfputc_r>:
 80094fc:	6893      	ldr	r3, [r2, #8]
 80094fe:	3b01      	subs	r3, #1
 8009500:	2b00      	cmp	r3, #0
 8009502:	b410      	push	{r4}
 8009504:	6093      	str	r3, [r2, #8]
 8009506:	da08      	bge.n	800951a <__sfputc_r+0x1e>
 8009508:	6994      	ldr	r4, [r2, #24]
 800950a:	42a3      	cmp	r3, r4
 800950c:	db01      	blt.n	8009512 <__sfputc_r+0x16>
 800950e:	290a      	cmp	r1, #10
 8009510:	d103      	bne.n	800951a <__sfputc_r+0x1e>
 8009512:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009516:	f7ff bde8 	b.w	80090ea <__swbuf_r>
 800951a:	6813      	ldr	r3, [r2, #0]
 800951c:	1c58      	adds	r0, r3, #1
 800951e:	6010      	str	r0, [r2, #0]
 8009520:	7019      	strb	r1, [r3, #0]
 8009522:	4608      	mov	r0, r1
 8009524:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009528:	4770      	bx	lr

0800952a <__sfputs_r>:
 800952a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952c:	4606      	mov	r6, r0
 800952e:	460f      	mov	r7, r1
 8009530:	4614      	mov	r4, r2
 8009532:	18d5      	adds	r5, r2, r3
 8009534:	42ac      	cmp	r4, r5
 8009536:	d101      	bne.n	800953c <__sfputs_r+0x12>
 8009538:	2000      	movs	r0, #0
 800953a:	e007      	b.n	800954c <__sfputs_r+0x22>
 800953c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009540:	463a      	mov	r2, r7
 8009542:	4630      	mov	r0, r6
 8009544:	f7ff ffda 	bl	80094fc <__sfputc_r>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d1f3      	bne.n	8009534 <__sfputs_r+0xa>
 800954c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009550 <_vfiprintf_r>:
 8009550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009554:	460d      	mov	r5, r1
 8009556:	b09d      	sub	sp, #116	@ 0x74
 8009558:	4614      	mov	r4, r2
 800955a:	4698      	mov	r8, r3
 800955c:	4606      	mov	r6, r0
 800955e:	b118      	cbz	r0, 8009568 <_vfiprintf_r+0x18>
 8009560:	6a03      	ldr	r3, [r0, #32]
 8009562:	b90b      	cbnz	r3, 8009568 <_vfiprintf_r+0x18>
 8009564:	f7ff fcd8 	bl	8008f18 <__sinit>
 8009568:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800956a:	07d9      	lsls	r1, r3, #31
 800956c:	d405      	bmi.n	800957a <_vfiprintf_r+0x2a>
 800956e:	89ab      	ldrh	r3, [r5, #12]
 8009570:	059a      	lsls	r2, r3, #22
 8009572:	d402      	bmi.n	800957a <_vfiprintf_r+0x2a>
 8009574:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009576:	f7ff fec6 	bl	8009306 <__retarget_lock_acquire_recursive>
 800957a:	89ab      	ldrh	r3, [r5, #12]
 800957c:	071b      	lsls	r3, r3, #28
 800957e:	d501      	bpl.n	8009584 <_vfiprintf_r+0x34>
 8009580:	692b      	ldr	r3, [r5, #16]
 8009582:	b99b      	cbnz	r3, 80095ac <_vfiprintf_r+0x5c>
 8009584:	4629      	mov	r1, r5
 8009586:	4630      	mov	r0, r6
 8009588:	f7ff fdee 	bl	8009168 <__swsetup_r>
 800958c:	b170      	cbz	r0, 80095ac <_vfiprintf_r+0x5c>
 800958e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009590:	07dc      	lsls	r4, r3, #31
 8009592:	d504      	bpl.n	800959e <_vfiprintf_r+0x4e>
 8009594:	f04f 30ff 	mov.w	r0, #4294967295
 8009598:	b01d      	add	sp, #116	@ 0x74
 800959a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959e:	89ab      	ldrh	r3, [r5, #12]
 80095a0:	0598      	lsls	r0, r3, #22
 80095a2:	d4f7      	bmi.n	8009594 <_vfiprintf_r+0x44>
 80095a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095a6:	f7ff feaf 	bl	8009308 <__retarget_lock_release_recursive>
 80095aa:	e7f3      	b.n	8009594 <_vfiprintf_r+0x44>
 80095ac:	2300      	movs	r3, #0
 80095ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80095b0:	2320      	movs	r3, #32
 80095b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80095ba:	2330      	movs	r3, #48	@ 0x30
 80095bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800976c <_vfiprintf_r+0x21c>
 80095c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095c4:	f04f 0901 	mov.w	r9, #1
 80095c8:	4623      	mov	r3, r4
 80095ca:	469a      	mov	sl, r3
 80095cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095d0:	b10a      	cbz	r2, 80095d6 <_vfiprintf_r+0x86>
 80095d2:	2a25      	cmp	r2, #37	@ 0x25
 80095d4:	d1f9      	bne.n	80095ca <_vfiprintf_r+0x7a>
 80095d6:	ebba 0b04 	subs.w	fp, sl, r4
 80095da:	d00b      	beq.n	80095f4 <_vfiprintf_r+0xa4>
 80095dc:	465b      	mov	r3, fp
 80095de:	4622      	mov	r2, r4
 80095e0:	4629      	mov	r1, r5
 80095e2:	4630      	mov	r0, r6
 80095e4:	f7ff ffa1 	bl	800952a <__sfputs_r>
 80095e8:	3001      	adds	r0, #1
 80095ea:	f000 80a7 	beq.w	800973c <_vfiprintf_r+0x1ec>
 80095ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095f0:	445a      	add	r2, fp
 80095f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80095f4:	f89a 3000 	ldrb.w	r3, [sl]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f000 809f 	beq.w	800973c <_vfiprintf_r+0x1ec>
 80095fe:	2300      	movs	r3, #0
 8009600:	f04f 32ff 	mov.w	r2, #4294967295
 8009604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009608:	f10a 0a01 	add.w	sl, sl, #1
 800960c:	9304      	str	r3, [sp, #16]
 800960e:	9307      	str	r3, [sp, #28]
 8009610:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009614:	931a      	str	r3, [sp, #104]	@ 0x68
 8009616:	4654      	mov	r4, sl
 8009618:	2205      	movs	r2, #5
 800961a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800961e:	4853      	ldr	r0, [pc, #332]	@ (800976c <_vfiprintf_r+0x21c>)
 8009620:	f7f6 fdd6 	bl	80001d0 <memchr>
 8009624:	9a04      	ldr	r2, [sp, #16]
 8009626:	b9d8      	cbnz	r0, 8009660 <_vfiprintf_r+0x110>
 8009628:	06d1      	lsls	r1, r2, #27
 800962a:	bf44      	itt	mi
 800962c:	2320      	movmi	r3, #32
 800962e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009632:	0713      	lsls	r3, r2, #28
 8009634:	bf44      	itt	mi
 8009636:	232b      	movmi	r3, #43	@ 0x2b
 8009638:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800963c:	f89a 3000 	ldrb.w	r3, [sl]
 8009640:	2b2a      	cmp	r3, #42	@ 0x2a
 8009642:	d015      	beq.n	8009670 <_vfiprintf_r+0x120>
 8009644:	9a07      	ldr	r2, [sp, #28]
 8009646:	4654      	mov	r4, sl
 8009648:	2000      	movs	r0, #0
 800964a:	f04f 0c0a 	mov.w	ip, #10
 800964e:	4621      	mov	r1, r4
 8009650:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009654:	3b30      	subs	r3, #48	@ 0x30
 8009656:	2b09      	cmp	r3, #9
 8009658:	d94b      	bls.n	80096f2 <_vfiprintf_r+0x1a2>
 800965a:	b1b0      	cbz	r0, 800968a <_vfiprintf_r+0x13a>
 800965c:	9207      	str	r2, [sp, #28]
 800965e:	e014      	b.n	800968a <_vfiprintf_r+0x13a>
 8009660:	eba0 0308 	sub.w	r3, r0, r8
 8009664:	fa09 f303 	lsl.w	r3, r9, r3
 8009668:	4313      	orrs	r3, r2
 800966a:	9304      	str	r3, [sp, #16]
 800966c:	46a2      	mov	sl, r4
 800966e:	e7d2      	b.n	8009616 <_vfiprintf_r+0xc6>
 8009670:	9b03      	ldr	r3, [sp, #12]
 8009672:	1d19      	adds	r1, r3, #4
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	9103      	str	r1, [sp, #12]
 8009678:	2b00      	cmp	r3, #0
 800967a:	bfbb      	ittet	lt
 800967c:	425b      	neglt	r3, r3
 800967e:	f042 0202 	orrlt.w	r2, r2, #2
 8009682:	9307      	strge	r3, [sp, #28]
 8009684:	9307      	strlt	r3, [sp, #28]
 8009686:	bfb8      	it	lt
 8009688:	9204      	strlt	r2, [sp, #16]
 800968a:	7823      	ldrb	r3, [r4, #0]
 800968c:	2b2e      	cmp	r3, #46	@ 0x2e
 800968e:	d10a      	bne.n	80096a6 <_vfiprintf_r+0x156>
 8009690:	7863      	ldrb	r3, [r4, #1]
 8009692:	2b2a      	cmp	r3, #42	@ 0x2a
 8009694:	d132      	bne.n	80096fc <_vfiprintf_r+0x1ac>
 8009696:	9b03      	ldr	r3, [sp, #12]
 8009698:	1d1a      	adds	r2, r3, #4
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	9203      	str	r2, [sp, #12]
 800969e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096a2:	3402      	adds	r4, #2
 80096a4:	9305      	str	r3, [sp, #20]
 80096a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800977c <_vfiprintf_r+0x22c>
 80096aa:	7821      	ldrb	r1, [r4, #0]
 80096ac:	2203      	movs	r2, #3
 80096ae:	4650      	mov	r0, sl
 80096b0:	f7f6 fd8e 	bl	80001d0 <memchr>
 80096b4:	b138      	cbz	r0, 80096c6 <_vfiprintf_r+0x176>
 80096b6:	9b04      	ldr	r3, [sp, #16]
 80096b8:	eba0 000a 	sub.w	r0, r0, sl
 80096bc:	2240      	movs	r2, #64	@ 0x40
 80096be:	4082      	lsls	r2, r0
 80096c0:	4313      	orrs	r3, r2
 80096c2:	3401      	adds	r4, #1
 80096c4:	9304      	str	r3, [sp, #16]
 80096c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ca:	4829      	ldr	r0, [pc, #164]	@ (8009770 <_vfiprintf_r+0x220>)
 80096cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096d0:	2206      	movs	r2, #6
 80096d2:	f7f6 fd7d 	bl	80001d0 <memchr>
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d03f      	beq.n	800975a <_vfiprintf_r+0x20a>
 80096da:	4b26      	ldr	r3, [pc, #152]	@ (8009774 <_vfiprintf_r+0x224>)
 80096dc:	bb1b      	cbnz	r3, 8009726 <_vfiprintf_r+0x1d6>
 80096de:	9b03      	ldr	r3, [sp, #12]
 80096e0:	3307      	adds	r3, #7
 80096e2:	f023 0307 	bic.w	r3, r3, #7
 80096e6:	3308      	adds	r3, #8
 80096e8:	9303      	str	r3, [sp, #12]
 80096ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096ec:	443b      	add	r3, r7
 80096ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80096f0:	e76a      	b.n	80095c8 <_vfiprintf_r+0x78>
 80096f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80096f6:	460c      	mov	r4, r1
 80096f8:	2001      	movs	r0, #1
 80096fa:	e7a8      	b.n	800964e <_vfiprintf_r+0xfe>
 80096fc:	2300      	movs	r3, #0
 80096fe:	3401      	adds	r4, #1
 8009700:	9305      	str	r3, [sp, #20]
 8009702:	4619      	mov	r1, r3
 8009704:	f04f 0c0a 	mov.w	ip, #10
 8009708:	4620      	mov	r0, r4
 800970a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800970e:	3a30      	subs	r2, #48	@ 0x30
 8009710:	2a09      	cmp	r2, #9
 8009712:	d903      	bls.n	800971c <_vfiprintf_r+0x1cc>
 8009714:	2b00      	cmp	r3, #0
 8009716:	d0c6      	beq.n	80096a6 <_vfiprintf_r+0x156>
 8009718:	9105      	str	r1, [sp, #20]
 800971a:	e7c4      	b.n	80096a6 <_vfiprintf_r+0x156>
 800971c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009720:	4604      	mov	r4, r0
 8009722:	2301      	movs	r3, #1
 8009724:	e7f0      	b.n	8009708 <_vfiprintf_r+0x1b8>
 8009726:	ab03      	add	r3, sp, #12
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	462a      	mov	r2, r5
 800972c:	4b12      	ldr	r3, [pc, #72]	@ (8009778 <_vfiprintf_r+0x228>)
 800972e:	a904      	add	r1, sp, #16
 8009730:	4630      	mov	r0, r6
 8009732:	f3af 8000 	nop.w
 8009736:	4607      	mov	r7, r0
 8009738:	1c78      	adds	r0, r7, #1
 800973a:	d1d6      	bne.n	80096ea <_vfiprintf_r+0x19a>
 800973c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800973e:	07d9      	lsls	r1, r3, #31
 8009740:	d405      	bmi.n	800974e <_vfiprintf_r+0x1fe>
 8009742:	89ab      	ldrh	r3, [r5, #12]
 8009744:	059a      	lsls	r2, r3, #22
 8009746:	d402      	bmi.n	800974e <_vfiprintf_r+0x1fe>
 8009748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800974a:	f7ff fddd 	bl	8009308 <__retarget_lock_release_recursive>
 800974e:	89ab      	ldrh	r3, [r5, #12]
 8009750:	065b      	lsls	r3, r3, #25
 8009752:	f53f af1f 	bmi.w	8009594 <_vfiprintf_r+0x44>
 8009756:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009758:	e71e      	b.n	8009598 <_vfiprintf_r+0x48>
 800975a:	ab03      	add	r3, sp, #12
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	462a      	mov	r2, r5
 8009760:	4b05      	ldr	r3, [pc, #20]	@ (8009778 <_vfiprintf_r+0x228>)
 8009762:	a904      	add	r1, sp, #16
 8009764:	4630      	mov	r0, r6
 8009766:	f000 f879 	bl	800985c <_printf_i>
 800976a:	e7e4      	b.n	8009736 <_vfiprintf_r+0x1e6>
 800976c:	0800acbc 	.word	0x0800acbc
 8009770:	0800acc6 	.word	0x0800acc6
 8009774:	00000000 	.word	0x00000000
 8009778:	0800952b 	.word	0x0800952b
 800977c:	0800acc2 	.word	0x0800acc2

08009780 <_printf_common>:
 8009780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009784:	4616      	mov	r6, r2
 8009786:	4698      	mov	r8, r3
 8009788:	688a      	ldr	r2, [r1, #8]
 800978a:	690b      	ldr	r3, [r1, #16]
 800978c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009790:	4293      	cmp	r3, r2
 8009792:	bfb8      	it	lt
 8009794:	4613      	movlt	r3, r2
 8009796:	6033      	str	r3, [r6, #0]
 8009798:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800979c:	4607      	mov	r7, r0
 800979e:	460c      	mov	r4, r1
 80097a0:	b10a      	cbz	r2, 80097a6 <_printf_common+0x26>
 80097a2:	3301      	adds	r3, #1
 80097a4:	6033      	str	r3, [r6, #0]
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	0699      	lsls	r1, r3, #26
 80097aa:	bf42      	ittt	mi
 80097ac:	6833      	ldrmi	r3, [r6, #0]
 80097ae:	3302      	addmi	r3, #2
 80097b0:	6033      	strmi	r3, [r6, #0]
 80097b2:	6825      	ldr	r5, [r4, #0]
 80097b4:	f015 0506 	ands.w	r5, r5, #6
 80097b8:	d106      	bne.n	80097c8 <_printf_common+0x48>
 80097ba:	f104 0a19 	add.w	sl, r4, #25
 80097be:	68e3      	ldr	r3, [r4, #12]
 80097c0:	6832      	ldr	r2, [r6, #0]
 80097c2:	1a9b      	subs	r3, r3, r2
 80097c4:	42ab      	cmp	r3, r5
 80097c6:	dc26      	bgt.n	8009816 <_printf_common+0x96>
 80097c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80097cc:	6822      	ldr	r2, [r4, #0]
 80097ce:	3b00      	subs	r3, #0
 80097d0:	bf18      	it	ne
 80097d2:	2301      	movne	r3, #1
 80097d4:	0692      	lsls	r2, r2, #26
 80097d6:	d42b      	bmi.n	8009830 <_printf_common+0xb0>
 80097d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80097dc:	4641      	mov	r1, r8
 80097de:	4638      	mov	r0, r7
 80097e0:	47c8      	blx	r9
 80097e2:	3001      	adds	r0, #1
 80097e4:	d01e      	beq.n	8009824 <_printf_common+0xa4>
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	6922      	ldr	r2, [r4, #16]
 80097ea:	f003 0306 	and.w	r3, r3, #6
 80097ee:	2b04      	cmp	r3, #4
 80097f0:	bf02      	ittt	eq
 80097f2:	68e5      	ldreq	r5, [r4, #12]
 80097f4:	6833      	ldreq	r3, [r6, #0]
 80097f6:	1aed      	subeq	r5, r5, r3
 80097f8:	68a3      	ldr	r3, [r4, #8]
 80097fa:	bf0c      	ite	eq
 80097fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009800:	2500      	movne	r5, #0
 8009802:	4293      	cmp	r3, r2
 8009804:	bfc4      	itt	gt
 8009806:	1a9b      	subgt	r3, r3, r2
 8009808:	18ed      	addgt	r5, r5, r3
 800980a:	2600      	movs	r6, #0
 800980c:	341a      	adds	r4, #26
 800980e:	42b5      	cmp	r5, r6
 8009810:	d11a      	bne.n	8009848 <_printf_common+0xc8>
 8009812:	2000      	movs	r0, #0
 8009814:	e008      	b.n	8009828 <_printf_common+0xa8>
 8009816:	2301      	movs	r3, #1
 8009818:	4652      	mov	r2, sl
 800981a:	4641      	mov	r1, r8
 800981c:	4638      	mov	r0, r7
 800981e:	47c8      	blx	r9
 8009820:	3001      	adds	r0, #1
 8009822:	d103      	bne.n	800982c <_printf_common+0xac>
 8009824:	f04f 30ff 	mov.w	r0, #4294967295
 8009828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800982c:	3501      	adds	r5, #1
 800982e:	e7c6      	b.n	80097be <_printf_common+0x3e>
 8009830:	18e1      	adds	r1, r4, r3
 8009832:	1c5a      	adds	r2, r3, #1
 8009834:	2030      	movs	r0, #48	@ 0x30
 8009836:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800983a:	4422      	add	r2, r4
 800983c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009840:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009844:	3302      	adds	r3, #2
 8009846:	e7c7      	b.n	80097d8 <_printf_common+0x58>
 8009848:	2301      	movs	r3, #1
 800984a:	4622      	mov	r2, r4
 800984c:	4641      	mov	r1, r8
 800984e:	4638      	mov	r0, r7
 8009850:	47c8      	blx	r9
 8009852:	3001      	adds	r0, #1
 8009854:	d0e6      	beq.n	8009824 <_printf_common+0xa4>
 8009856:	3601      	adds	r6, #1
 8009858:	e7d9      	b.n	800980e <_printf_common+0x8e>
	...

0800985c <_printf_i>:
 800985c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009860:	7e0f      	ldrb	r7, [r1, #24]
 8009862:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009864:	2f78      	cmp	r7, #120	@ 0x78
 8009866:	4691      	mov	r9, r2
 8009868:	4680      	mov	r8, r0
 800986a:	460c      	mov	r4, r1
 800986c:	469a      	mov	sl, r3
 800986e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009872:	d807      	bhi.n	8009884 <_printf_i+0x28>
 8009874:	2f62      	cmp	r7, #98	@ 0x62
 8009876:	d80a      	bhi.n	800988e <_printf_i+0x32>
 8009878:	2f00      	cmp	r7, #0
 800987a:	f000 80d1 	beq.w	8009a20 <_printf_i+0x1c4>
 800987e:	2f58      	cmp	r7, #88	@ 0x58
 8009880:	f000 80b8 	beq.w	80099f4 <_printf_i+0x198>
 8009884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009888:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800988c:	e03a      	b.n	8009904 <_printf_i+0xa8>
 800988e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009892:	2b15      	cmp	r3, #21
 8009894:	d8f6      	bhi.n	8009884 <_printf_i+0x28>
 8009896:	a101      	add	r1, pc, #4	@ (adr r1, 800989c <_printf_i+0x40>)
 8009898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800989c:	080098f5 	.word	0x080098f5
 80098a0:	08009909 	.word	0x08009909
 80098a4:	08009885 	.word	0x08009885
 80098a8:	08009885 	.word	0x08009885
 80098ac:	08009885 	.word	0x08009885
 80098b0:	08009885 	.word	0x08009885
 80098b4:	08009909 	.word	0x08009909
 80098b8:	08009885 	.word	0x08009885
 80098bc:	08009885 	.word	0x08009885
 80098c0:	08009885 	.word	0x08009885
 80098c4:	08009885 	.word	0x08009885
 80098c8:	08009a07 	.word	0x08009a07
 80098cc:	08009933 	.word	0x08009933
 80098d0:	080099c1 	.word	0x080099c1
 80098d4:	08009885 	.word	0x08009885
 80098d8:	08009885 	.word	0x08009885
 80098dc:	08009a29 	.word	0x08009a29
 80098e0:	08009885 	.word	0x08009885
 80098e4:	08009933 	.word	0x08009933
 80098e8:	08009885 	.word	0x08009885
 80098ec:	08009885 	.word	0x08009885
 80098f0:	080099c9 	.word	0x080099c9
 80098f4:	6833      	ldr	r3, [r6, #0]
 80098f6:	1d1a      	adds	r2, r3, #4
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6032      	str	r2, [r6, #0]
 80098fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009900:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009904:	2301      	movs	r3, #1
 8009906:	e09c      	b.n	8009a42 <_printf_i+0x1e6>
 8009908:	6833      	ldr	r3, [r6, #0]
 800990a:	6820      	ldr	r0, [r4, #0]
 800990c:	1d19      	adds	r1, r3, #4
 800990e:	6031      	str	r1, [r6, #0]
 8009910:	0606      	lsls	r6, r0, #24
 8009912:	d501      	bpl.n	8009918 <_printf_i+0xbc>
 8009914:	681d      	ldr	r5, [r3, #0]
 8009916:	e003      	b.n	8009920 <_printf_i+0xc4>
 8009918:	0645      	lsls	r5, r0, #25
 800991a:	d5fb      	bpl.n	8009914 <_printf_i+0xb8>
 800991c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009920:	2d00      	cmp	r5, #0
 8009922:	da03      	bge.n	800992c <_printf_i+0xd0>
 8009924:	232d      	movs	r3, #45	@ 0x2d
 8009926:	426d      	negs	r5, r5
 8009928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800992c:	4858      	ldr	r0, [pc, #352]	@ (8009a90 <_printf_i+0x234>)
 800992e:	230a      	movs	r3, #10
 8009930:	e011      	b.n	8009956 <_printf_i+0xfa>
 8009932:	6821      	ldr	r1, [r4, #0]
 8009934:	6833      	ldr	r3, [r6, #0]
 8009936:	0608      	lsls	r0, r1, #24
 8009938:	f853 5b04 	ldr.w	r5, [r3], #4
 800993c:	d402      	bmi.n	8009944 <_printf_i+0xe8>
 800993e:	0649      	lsls	r1, r1, #25
 8009940:	bf48      	it	mi
 8009942:	b2ad      	uxthmi	r5, r5
 8009944:	2f6f      	cmp	r7, #111	@ 0x6f
 8009946:	4852      	ldr	r0, [pc, #328]	@ (8009a90 <_printf_i+0x234>)
 8009948:	6033      	str	r3, [r6, #0]
 800994a:	bf14      	ite	ne
 800994c:	230a      	movne	r3, #10
 800994e:	2308      	moveq	r3, #8
 8009950:	2100      	movs	r1, #0
 8009952:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009956:	6866      	ldr	r6, [r4, #4]
 8009958:	60a6      	str	r6, [r4, #8]
 800995a:	2e00      	cmp	r6, #0
 800995c:	db05      	blt.n	800996a <_printf_i+0x10e>
 800995e:	6821      	ldr	r1, [r4, #0]
 8009960:	432e      	orrs	r6, r5
 8009962:	f021 0104 	bic.w	r1, r1, #4
 8009966:	6021      	str	r1, [r4, #0]
 8009968:	d04b      	beq.n	8009a02 <_printf_i+0x1a6>
 800996a:	4616      	mov	r6, r2
 800996c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009970:	fb03 5711 	mls	r7, r3, r1, r5
 8009974:	5dc7      	ldrb	r7, [r0, r7]
 8009976:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800997a:	462f      	mov	r7, r5
 800997c:	42bb      	cmp	r3, r7
 800997e:	460d      	mov	r5, r1
 8009980:	d9f4      	bls.n	800996c <_printf_i+0x110>
 8009982:	2b08      	cmp	r3, #8
 8009984:	d10b      	bne.n	800999e <_printf_i+0x142>
 8009986:	6823      	ldr	r3, [r4, #0]
 8009988:	07df      	lsls	r7, r3, #31
 800998a:	d508      	bpl.n	800999e <_printf_i+0x142>
 800998c:	6923      	ldr	r3, [r4, #16]
 800998e:	6861      	ldr	r1, [r4, #4]
 8009990:	4299      	cmp	r1, r3
 8009992:	bfde      	ittt	le
 8009994:	2330      	movle	r3, #48	@ 0x30
 8009996:	f806 3c01 	strble.w	r3, [r6, #-1]
 800999a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800999e:	1b92      	subs	r2, r2, r6
 80099a0:	6122      	str	r2, [r4, #16]
 80099a2:	f8cd a000 	str.w	sl, [sp]
 80099a6:	464b      	mov	r3, r9
 80099a8:	aa03      	add	r2, sp, #12
 80099aa:	4621      	mov	r1, r4
 80099ac:	4640      	mov	r0, r8
 80099ae:	f7ff fee7 	bl	8009780 <_printf_common>
 80099b2:	3001      	adds	r0, #1
 80099b4:	d14a      	bne.n	8009a4c <_printf_i+0x1f0>
 80099b6:	f04f 30ff 	mov.w	r0, #4294967295
 80099ba:	b004      	add	sp, #16
 80099bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	f043 0320 	orr.w	r3, r3, #32
 80099c6:	6023      	str	r3, [r4, #0]
 80099c8:	4832      	ldr	r0, [pc, #200]	@ (8009a94 <_printf_i+0x238>)
 80099ca:	2778      	movs	r7, #120	@ 0x78
 80099cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80099d0:	6823      	ldr	r3, [r4, #0]
 80099d2:	6831      	ldr	r1, [r6, #0]
 80099d4:	061f      	lsls	r7, r3, #24
 80099d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80099da:	d402      	bmi.n	80099e2 <_printf_i+0x186>
 80099dc:	065f      	lsls	r7, r3, #25
 80099de:	bf48      	it	mi
 80099e0:	b2ad      	uxthmi	r5, r5
 80099e2:	6031      	str	r1, [r6, #0]
 80099e4:	07d9      	lsls	r1, r3, #31
 80099e6:	bf44      	itt	mi
 80099e8:	f043 0320 	orrmi.w	r3, r3, #32
 80099ec:	6023      	strmi	r3, [r4, #0]
 80099ee:	b11d      	cbz	r5, 80099f8 <_printf_i+0x19c>
 80099f0:	2310      	movs	r3, #16
 80099f2:	e7ad      	b.n	8009950 <_printf_i+0xf4>
 80099f4:	4826      	ldr	r0, [pc, #152]	@ (8009a90 <_printf_i+0x234>)
 80099f6:	e7e9      	b.n	80099cc <_printf_i+0x170>
 80099f8:	6823      	ldr	r3, [r4, #0]
 80099fa:	f023 0320 	bic.w	r3, r3, #32
 80099fe:	6023      	str	r3, [r4, #0]
 8009a00:	e7f6      	b.n	80099f0 <_printf_i+0x194>
 8009a02:	4616      	mov	r6, r2
 8009a04:	e7bd      	b.n	8009982 <_printf_i+0x126>
 8009a06:	6833      	ldr	r3, [r6, #0]
 8009a08:	6825      	ldr	r5, [r4, #0]
 8009a0a:	6961      	ldr	r1, [r4, #20]
 8009a0c:	1d18      	adds	r0, r3, #4
 8009a0e:	6030      	str	r0, [r6, #0]
 8009a10:	062e      	lsls	r6, r5, #24
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	d501      	bpl.n	8009a1a <_printf_i+0x1be>
 8009a16:	6019      	str	r1, [r3, #0]
 8009a18:	e002      	b.n	8009a20 <_printf_i+0x1c4>
 8009a1a:	0668      	lsls	r0, r5, #25
 8009a1c:	d5fb      	bpl.n	8009a16 <_printf_i+0x1ba>
 8009a1e:	8019      	strh	r1, [r3, #0]
 8009a20:	2300      	movs	r3, #0
 8009a22:	6123      	str	r3, [r4, #16]
 8009a24:	4616      	mov	r6, r2
 8009a26:	e7bc      	b.n	80099a2 <_printf_i+0x146>
 8009a28:	6833      	ldr	r3, [r6, #0]
 8009a2a:	1d1a      	adds	r2, r3, #4
 8009a2c:	6032      	str	r2, [r6, #0]
 8009a2e:	681e      	ldr	r6, [r3, #0]
 8009a30:	6862      	ldr	r2, [r4, #4]
 8009a32:	2100      	movs	r1, #0
 8009a34:	4630      	mov	r0, r6
 8009a36:	f7f6 fbcb 	bl	80001d0 <memchr>
 8009a3a:	b108      	cbz	r0, 8009a40 <_printf_i+0x1e4>
 8009a3c:	1b80      	subs	r0, r0, r6
 8009a3e:	6060      	str	r0, [r4, #4]
 8009a40:	6863      	ldr	r3, [r4, #4]
 8009a42:	6123      	str	r3, [r4, #16]
 8009a44:	2300      	movs	r3, #0
 8009a46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a4a:	e7aa      	b.n	80099a2 <_printf_i+0x146>
 8009a4c:	6923      	ldr	r3, [r4, #16]
 8009a4e:	4632      	mov	r2, r6
 8009a50:	4649      	mov	r1, r9
 8009a52:	4640      	mov	r0, r8
 8009a54:	47d0      	blx	sl
 8009a56:	3001      	adds	r0, #1
 8009a58:	d0ad      	beq.n	80099b6 <_printf_i+0x15a>
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	079b      	lsls	r3, r3, #30
 8009a5e:	d413      	bmi.n	8009a88 <_printf_i+0x22c>
 8009a60:	68e0      	ldr	r0, [r4, #12]
 8009a62:	9b03      	ldr	r3, [sp, #12]
 8009a64:	4298      	cmp	r0, r3
 8009a66:	bfb8      	it	lt
 8009a68:	4618      	movlt	r0, r3
 8009a6a:	e7a6      	b.n	80099ba <_printf_i+0x15e>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	4632      	mov	r2, r6
 8009a70:	4649      	mov	r1, r9
 8009a72:	4640      	mov	r0, r8
 8009a74:	47d0      	blx	sl
 8009a76:	3001      	adds	r0, #1
 8009a78:	d09d      	beq.n	80099b6 <_printf_i+0x15a>
 8009a7a:	3501      	adds	r5, #1
 8009a7c:	68e3      	ldr	r3, [r4, #12]
 8009a7e:	9903      	ldr	r1, [sp, #12]
 8009a80:	1a5b      	subs	r3, r3, r1
 8009a82:	42ab      	cmp	r3, r5
 8009a84:	dcf2      	bgt.n	8009a6c <_printf_i+0x210>
 8009a86:	e7eb      	b.n	8009a60 <_printf_i+0x204>
 8009a88:	2500      	movs	r5, #0
 8009a8a:	f104 0619 	add.w	r6, r4, #25
 8009a8e:	e7f5      	b.n	8009a7c <_printf_i+0x220>
 8009a90:	0800accd 	.word	0x0800accd
 8009a94:	0800acde 	.word	0x0800acde

08009a98 <__sflush_r>:
 8009a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa0:	0716      	lsls	r6, r2, #28
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	d454      	bmi.n	8009b52 <__sflush_r+0xba>
 8009aa8:	684b      	ldr	r3, [r1, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	dc02      	bgt.n	8009ab4 <__sflush_r+0x1c>
 8009aae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	dd48      	ble.n	8009b46 <__sflush_r+0xae>
 8009ab4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ab6:	2e00      	cmp	r6, #0
 8009ab8:	d045      	beq.n	8009b46 <__sflush_r+0xae>
 8009aba:	2300      	movs	r3, #0
 8009abc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ac0:	682f      	ldr	r7, [r5, #0]
 8009ac2:	6a21      	ldr	r1, [r4, #32]
 8009ac4:	602b      	str	r3, [r5, #0]
 8009ac6:	d030      	beq.n	8009b2a <__sflush_r+0x92>
 8009ac8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009aca:	89a3      	ldrh	r3, [r4, #12]
 8009acc:	0759      	lsls	r1, r3, #29
 8009ace:	d505      	bpl.n	8009adc <__sflush_r+0x44>
 8009ad0:	6863      	ldr	r3, [r4, #4]
 8009ad2:	1ad2      	subs	r2, r2, r3
 8009ad4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009ad6:	b10b      	cbz	r3, 8009adc <__sflush_r+0x44>
 8009ad8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ada:	1ad2      	subs	r2, r2, r3
 8009adc:	2300      	movs	r3, #0
 8009ade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ae0:	6a21      	ldr	r1, [r4, #32]
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	47b0      	blx	r6
 8009ae6:	1c43      	adds	r3, r0, #1
 8009ae8:	89a3      	ldrh	r3, [r4, #12]
 8009aea:	d106      	bne.n	8009afa <__sflush_r+0x62>
 8009aec:	6829      	ldr	r1, [r5, #0]
 8009aee:	291d      	cmp	r1, #29
 8009af0:	d82b      	bhi.n	8009b4a <__sflush_r+0xb2>
 8009af2:	4a2a      	ldr	r2, [pc, #168]	@ (8009b9c <__sflush_r+0x104>)
 8009af4:	40ca      	lsrs	r2, r1
 8009af6:	07d6      	lsls	r6, r2, #31
 8009af8:	d527      	bpl.n	8009b4a <__sflush_r+0xb2>
 8009afa:	2200      	movs	r2, #0
 8009afc:	6062      	str	r2, [r4, #4]
 8009afe:	04d9      	lsls	r1, r3, #19
 8009b00:	6922      	ldr	r2, [r4, #16]
 8009b02:	6022      	str	r2, [r4, #0]
 8009b04:	d504      	bpl.n	8009b10 <__sflush_r+0x78>
 8009b06:	1c42      	adds	r2, r0, #1
 8009b08:	d101      	bne.n	8009b0e <__sflush_r+0x76>
 8009b0a:	682b      	ldr	r3, [r5, #0]
 8009b0c:	b903      	cbnz	r3, 8009b10 <__sflush_r+0x78>
 8009b0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b12:	602f      	str	r7, [r5, #0]
 8009b14:	b1b9      	cbz	r1, 8009b46 <__sflush_r+0xae>
 8009b16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b1a:	4299      	cmp	r1, r3
 8009b1c:	d002      	beq.n	8009b24 <__sflush_r+0x8c>
 8009b1e:	4628      	mov	r0, r5
 8009b20:	f7ff fbf4 	bl	800930c <_free_r>
 8009b24:	2300      	movs	r3, #0
 8009b26:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b28:	e00d      	b.n	8009b46 <__sflush_r+0xae>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	47b0      	blx	r6
 8009b30:	4602      	mov	r2, r0
 8009b32:	1c50      	adds	r0, r2, #1
 8009b34:	d1c9      	bne.n	8009aca <__sflush_r+0x32>
 8009b36:	682b      	ldr	r3, [r5, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d0c6      	beq.n	8009aca <__sflush_r+0x32>
 8009b3c:	2b1d      	cmp	r3, #29
 8009b3e:	d001      	beq.n	8009b44 <__sflush_r+0xac>
 8009b40:	2b16      	cmp	r3, #22
 8009b42:	d11e      	bne.n	8009b82 <__sflush_r+0xea>
 8009b44:	602f      	str	r7, [r5, #0]
 8009b46:	2000      	movs	r0, #0
 8009b48:	e022      	b.n	8009b90 <__sflush_r+0xf8>
 8009b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b4e:	b21b      	sxth	r3, r3
 8009b50:	e01b      	b.n	8009b8a <__sflush_r+0xf2>
 8009b52:	690f      	ldr	r7, [r1, #16]
 8009b54:	2f00      	cmp	r7, #0
 8009b56:	d0f6      	beq.n	8009b46 <__sflush_r+0xae>
 8009b58:	0793      	lsls	r3, r2, #30
 8009b5a:	680e      	ldr	r6, [r1, #0]
 8009b5c:	bf08      	it	eq
 8009b5e:	694b      	ldreq	r3, [r1, #20]
 8009b60:	600f      	str	r7, [r1, #0]
 8009b62:	bf18      	it	ne
 8009b64:	2300      	movne	r3, #0
 8009b66:	eba6 0807 	sub.w	r8, r6, r7
 8009b6a:	608b      	str	r3, [r1, #8]
 8009b6c:	f1b8 0f00 	cmp.w	r8, #0
 8009b70:	dde9      	ble.n	8009b46 <__sflush_r+0xae>
 8009b72:	6a21      	ldr	r1, [r4, #32]
 8009b74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009b76:	4643      	mov	r3, r8
 8009b78:	463a      	mov	r2, r7
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	47b0      	blx	r6
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	dc08      	bgt.n	8009b94 <__sflush_r+0xfc>
 8009b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b8a:	81a3      	strh	r3, [r4, #12]
 8009b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b94:	4407      	add	r7, r0
 8009b96:	eba8 0800 	sub.w	r8, r8, r0
 8009b9a:	e7e7      	b.n	8009b6c <__sflush_r+0xd4>
 8009b9c:	20400001 	.word	0x20400001

08009ba0 <_fflush_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	690b      	ldr	r3, [r1, #16]
 8009ba4:	4605      	mov	r5, r0
 8009ba6:	460c      	mov	r4, r1
 8009ba8:	b913      	cbnz	r3, 8009bb0 <_fflush_r+0x10>
 8009baa:	2500      	movs	r5, #0
 8009bac:	4628      	mov	r0, r5
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
 8009bb0:	b118      	cbz	r0, 8009bba <_fflush_r+0x1a>
 8009bb2:	6a03      	ldr	r3, [r0, #32]
 8009bb4:	b90b      	cbnz	r3, 8009bba <_fflush_r+0x1a>
 8009bb6:	f7ff f9af 	bl	8008f18 <__sinit>
 8009bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d0f3      	beq.n	8009baa <_fflush_r+0xa>
 8009bc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009bc4:	07d0      	lsls	r0, r2, #31
 8009bc6:	d404      	bmi.n	8009bd2 <_fflush_r+0x32>
 8009bc8:	0599      	lsls	r1, r3, #22
 8009bca:	d402      	bmi.n	8009bd2 <_fflush_r+0x32>
 8009bcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bce:	f7ff fb9a 	bl	8009306 <__retarget_lock_acquire_recursive>
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	4621      	mov	r1, r4
 8009bd6:	f7ff ff5f 	bl	8009a98 <__sflush_r>
 8009bda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bdc:	07da      	lsls	r2, r3, #31
 8009bde:	4605      	mov	r5, r0
 8009be0:	d4e4      	bmi.n	8009bac <_fflush_r+0xc>
 8009be2:	89a3      	ldrh	r3, [r4, #12]
 8009be4:	059b      	lsls	r3, r3, #22
 8009be6:	d4e1      	bmi.n	8009bac <_fflush_r+0xc>
 8009be8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bea:	f7ff fb8d 	bl	8009308 <__retarget_lock_release_recursive>
 8009bee:	e7dd      	b.n	8009bac <_fflush_r+0xc>

08009bf0 <__swhatbuf_r>:
 8009bf0:	b570      	push	{r4, r5, r6, lr}
 8009bf2:	460c      	mov	r4, r1
 8009bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bf8:	2900      	cmp	r1, #0
 8009bfa:	b096      	sub	sp, #88	@ 0x58
 8009bfc:	4615      	mov	r5, r2
 8009bfe:	461e      	mov	r6, r3
 8009c00:	da0d      	bge.n	8009c1e <__swhatbuf_r+0x2e>
 8009c02:	89a3      	ldrh	r3, [r4, #12]
 8009c04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c08:	f04f 0100 	mov.w	r1, #0
 8009c0c:	bf14      	ite	ne
 8009c0e:	2340      	movne	r3, #64	@ 0x40
 8009c10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c14:	2000      	movs	r0, #0
 8009c16:	6031      	str	r1, [r6, #0]
 8009c18:	602b      	str	r3, [r5, #0]
 8009c1a:	b016      	add	sp, #88	@ 0x58
 8009c1c:	bd70      	pop	{r4, r5, r6, pc}
 8009c1e:	466a      	mov	r2, sp
 8009c20:	f000 f848 	bl	8009cb4 <_fstat_r>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	dbec      	blt.n	8009c02 <__swhatbuf_r+0x12>
 8009c28:	9901      	ldr	r1, [sp, #4]
 8009c2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009c2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009c32:	4259      	negs	r1, r3
 8009c34:	4159      	adcs	r1, r3
 8009c36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c3a:	e7eb      	b.n	8009c14 <__swhatbuf_r+0x24>

08009c3c <__smakebuf_r>:
 8009c3c:	898b      	ldrh	r3, [r1, #12]
 8009c3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c40:	079d      	lsls	r5, r3, #30
 8009c42:	4606      	mov	r6, r0
 8009c44:	460c      	mov	r4, r1
 8009c46:	d507      	bpl.n	8009c58 <__smakebuf_r+0x1c>
 8009c48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c4c:	6023      	str	r3, [r4, #0]
 8009c4e:	6123      	str	r3, [r4, #16]
 8009c50:	2301      	movs	r3, #1
 8009c52:	6163      	str	r3, [r4, #20]
 8009c54:	b003      	add	sp, #12
 8009c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c58:	ab01      	add	r3, sp, #4
 8009c5a:	466a      	mov	r2, sp
 8009c5c:	f7ff ffc8 	bl	8009bf0 <__swhatbuf_r>
 8009c60:	9f00      	ldr	r7, [sp, #0]
 8009c62:	4605      	mov	r5, r0
 8009c64:	4639      	mov	r1, r7
 8009c66:	4630      	mov	r0, r6
 8009c68:	f7ff fbbc 	bl	80093e4 <_malloc_r>
 8009c6c:	b948      	cbnz	r0, 8009c82 <__smakebuf_r+0x46>
 8009c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c72:	059a      	lsls	r2, r3, #22
 8009c74:	d4ee      	bmi.n	8009c54 <__smakebuf_r+0x18>
 8009c76:	f023 0303 	bic.w	r3, r3, #3
 8009c7a:	f043 0302 	orr.w	r3, r3, #2
 8009c7e:	81a3      	strh	r3, [r4, #12]
 8009c80:	e7e2      	b.n	8009c48 <__smakebuf_r+0xc>
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	6020      	str	r0, [r4, #0]
 8009c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c8a:	81a3      	strh	r3, [r4, #12]
 8009c8c:	9b01      	ldr	r3, [sp, #4]
 8009c8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009c92:	b15b      	cbz	r3, 8009cac <__smakebuf_r+0x70>
 8009c94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f000 f81d 	bl	8009cd8 <_isatty_r>
 8009c9e:	b128      	cbz	r0, 8009cac <__smakebuf_r+0x70>
 8009ca0:	89a3      	ldrh	r3, [r4, #12]
 8009ca2:	f023 0303 	bic.w	r3, r3, #3
 8009ca6:	f043 0301 	orr.w	r3, r3, #1
 8009caa:	81a3      	strh	r3, [r4, #12]
 8009cac:	89a3      	ldrh	r3, [r4, #12]
 8009cae:	431d      	orrs	r5, r3
 8009cb0:	81a5      	strh	r5, [r4, #12]
 8009cb2:	e7cf      	b.n	8009c54 <__smakebuf_r+0x18>

08009cb4 <_fstat_r>:
 8009cb4:	b538      	push	{r3, r4, r5, lr}
 8009cb6:	4d07      	ldr	r5, [pc, #28]	@ (8009cd4 <_fstat_r+0x20>)
 8009cb8:	2300      	movs	r3, #0
 8009cba:	4604      	mov	r4, r0
 8009cbc:	4608      	mov	r0, r1
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	602b      	str	r3, [r5, #0]
 8009cc2:	f7f9 fa18 	bl	80030f6 <_fstat>
 8009cc6:	1c43      	adds	r3, r0, #1
 8009cc8:	d102      	bne.n	8009cd0 <_fstat_r+0x1c>
 8009cca:	682b      	ldr	r3, [r5, #0]
 8009ccc:	b103      	cbz	r3, 8009cd0 <_fstat_r+0x1c>
 8009cce:	6023      	str	r3, [r4, #0]
 8009cd0:	bd38      	pop	{r3, r4, r5, pc}
 8009cd2:	bf00      	nop
 8009cd4:	20000480 	.word	0x20000480

08009cd8 <_isatty_r>:
 8009cd8:	b538      	push	{r3, r4, r5, lr}
 8009cda:	4d06      	ldr	r5, [pc, #24]	@ (8009cf4 <_isatty_r+0x1c>)
 8009cdc:	2300      	movs	r3, #0
 8009cde:	4604      	mov	r4, r0
 8009ce0:	4608      	mov	r0, r1
 8009ce2:	602b      	str	r3, [r5, #0]
 8009ce4:	f7f9 fa17 	bl	8003116 <_isatty>
 8009ce8:	1c43      	adds	r3, r0, #1
 8009cea:	d102      	bne.n	8009cf2 <_isatty_r+0x1a>
 8009cec:	682b      	ldr	r3, [r5, #0]
 8009cee:	b103      	cbz	r3, 8009cf2 <_isatty_r+0x1a>
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	bd38      	pop	{r3, r4, r5, pc}
 8009cf4:	20000480 	.word	0x20000480

08009cf8 <_sbrk_r>:
 8009cf8:	b538      	push	{r3, r4, r5, lr}
 8009cfa:	4d06      	ldr	r5, [pc, #24]	@ (8009d14 <_sbrk_r+0x1c>)
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	4604      	mov	r4, r0
 8009d00:	4608      	mov	r0, r1
 8009d02:	602b      	str	r3, [r5, #0]
 8009d04:	f7f9 fa20 	bl	8003148 <_sbrk>
 8009d08:	1c43      	adds	r3, r0, #1
 8009d0a:	d102      	bne.n	8009d12 <_sbrk_r+0x1a>
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	b103      	cbz	r3, 8009d12 <_sbrk_r+0x1a>
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	bd38      	pop	{r3, r4, r5, pc}
 8009d14:	20000480 	.word	0x20000480

08009d18 <pow>:
 8009d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1a:	ed2d 8b02 	vpush	{d8}
 8009d1e:	eeb0 8a40 	vmov.f32	s16, s0
 8009d22:	eef0 8a60 	vmov.f32	s17, s1
 8009d26:	ec55 4b11 	vmov	r4, r5, d1
 8009d2a:	f000 f871 	bl	8009e10 <__ieee754_pow>
 8009d2e:	4622      	mov	r2, r4
 8009d30:	462b      	mov	r3, r5
 8009d32:	4620      	mov	r0, r4
 8009d34:	4629      	mov	r1, r5
 8009d36:	ec57 6b10 	vmov	r6, r7, d0
 8009d3a:	f7f6 feef 	bl	8000b1c <__aeabi_dcmpun>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d13b      	bne.n	8009dba <pow+0xa2>
 8009d42:	ec51 0b18 	vmov	r0, r1, d8
 8009d46:	2200      	movs	r2, #0
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f7f6 feb5 	bl	8000ab8 <__aeabi_dcmpeq>
 8009d4e:	b1b8      	cbz	r0, 8009d80 <pow+0x68>
 8009d50:	2200      	movs	r2, #0
 8009d52:	2300      	movs	r3, #0
 8009d54:	4620      	mov	r0, r4
 8009d56:	4629      	mov	r1, r5
 8009d58:	f7f6 feae 	bl	8000ab8 <__aeabi_dcmpeq>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d146      	bne.n	8009dee <pow+0xd6>
 8009d60:	ec45 4b10 	vmov	d0, r4, r5
 8009d64:	f000 f848 	bl	8009df8 <finite>
 8009d68:	b338      	cbz	r0, 8009dba <pow+0xa2>
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	4620      	mov	r0, r4
 8009d70:	4629      	mov	r1, r5
 8009d72:	f7f6 feab 	bl	8000acc <__aeabi_dcmplt>
 8009d76:	b300      	cbz	r0, 8009dba <pow+0xa2>
 8009d78:	f7ff fa9a 	bl	80092b0 <__errno>
 8009d7c:	2322      	movs	r3, #34	@ 0x22
 8009d7e:	e01b      	b.n	8009db8 <pow+0xa0>
 8009d80:	ec47 6b10 	vmov	d0, r6, r7
 8009d84:	f000 f838 	bl	8009df8 <finite>
 8009d88:	b9e0      	cbnz	r0, 8009dc4 <pow+0xac>
 8009d8a:	eeb0 0a48 	vmov.f32	s0, s16
 8009d8e:	eef0 0a68 	vmov.f32	s1, s17
 8009d92:	f000 f831 	bl	8009df8 <finite>
 8009d96:	b1a8      	cbz	r0, 8009dc4 <pow+0xac>
 8009d98:	ec45 4b10 	vmov	d0, r4, r5
 8009d9c:	f000 f82c 	bl	8009df8 <finite>
 8009da0:	b180      	cbz	r0, 8009dc4 <pow+0xac>
 8009da2:	4632      	mov	r2, r6
 8009da4:	463b      	mov	r3, r7
 8009da6:	4630      	mov	r0, r6
 8009da8:	4639      	mov	r1, r7
 8009daa:	f7f6 feb7 	bl	8000b1c <__aeabi_dcmpun>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	d0e2      	beq.n	8009d78 <pow+0x60>
 8009db2:	f7ff fa7d 	bl	80092b0 <__errno>
 8009db6:	2321      	movs	r3, #33	@ 0x21
 8009db8:	6003      	str	r3, [r0, #0]
 8009dba:	ecbd 8b02 	vpop	{d8}
 8009dbe:	ec47 6b10 	vmov	d0, r6, r7
 8009dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	4630      	mov	r0, r6
 8009dca:	4639      	mov	r1, r7
 8009dcc:	f7f6 fe74 	bl	8000ab8 <__aeabi_dcmpeq>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d0f2      	beq.n	8009dba <pow+0xa2>
 8009dd4:	eeb0 0a48 	vmov.f32	s0, s16
 8009dd8:	eef0 0a68 	vmov.f32	s1, s17
 8009ddc:	f000 f80c 	bl	8009df8 <finite>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d0ea      	beq.n	8009dba <pow+0xa2>
 8009de4:	ec45 4b10 	vmov	d0, r4, r5
 8009de8:	f000 f806 	bl	8009df8 <finite>
 8009dec:	e7c3      	b.n	8009d76 <pow+0x5e>
 8009dee:	4f01      	ldr	r7, [pc, #4]	@ (8009df4 <pow+0xdc>)
 8009df0:	2600      	movs	r6, #0
 8009df2:	e7e2      	b.n	8009dba <pow+0xa2>
 8009df4:	3ff00000 	.word	0x3ff00000

08009df8 <finite>:
 8009df8:	b082      	sub	sp, #8
 8009dfa:	ed8d 0b00 	vstr	d0, [sp]
 8009dfe:	9801      	ldr	r0, [sp, #4]
 8009e00:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009e04:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009e08:	0fc0      	lsrs	r0, r0, #31
 8009e0a:	b002      	add	sp, #8
 8009e0c:	4770      	bx	lr
	...

08009e10 <__ieee754_pow>:
 8009e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e14:	b091      	sub	sp, #68	@ 0x44
 8009e16:	ed8d 1b00 	vstr	d1, [sp]
 8009e1a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8009e1e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009e22:	ea5a 0001 	orrs.w	r0, sl, r1
 8009e26:	ec57 6b10 	vmov	r6, r7, d0
 8009e2a:	d113      	bne.n	8009e54 <__ieee754_pow+0x44>
 8009e2c:	19b3      	adds	r3, r6, r6
 8009e2e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009e32:	4152      	adcs	r2, r2
 8009e34:	4298      	cmp	r0, r3
 8009e36:	4b9a      	ldr	r3, [pc, #616]	@ (800a0a0 <__ieee754_pow+0x290>)
 8009e38:	4193      	sbcs	r3, r2
 8009e3a:	f080 84ee 	bcs.w	800a81a <__ieee754_pow+0xa0a>
 8009e3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e42:	4630      	mov	r0, r6
 8009e44:	4639      	mov	r1, r7
 8009e46:	f7f6 fa19 	bl	800027c <__adddf3>
 8009e4a:	ec41 0b10 	vmov	d0, r0, r1
 8009e4e:	b011      	add	sp, #68	@ 0x44
 8009e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e54:	4a93      	ldr	r2, [pc, #588]	@ (800a0a4 <__ieee754_pow+0x294>)
 8009e56:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8009e5a:	4295      	cmp	r5, r2
 8009e5c:	46b8      	mov	r8, r7
 8009e5e:	4633      	mov	r3, r6
 8009e60:	d80a      	bhi.n	8009e78 <__ieee754_pow+0x68>
 8009e62:	d104      	bne.n	8009e6e <__ieee754_pow+0x5e>
 8009e64:	2e00      	cmp	r6, #0
 8009e66:	d1ea      	bne.n	8009e3e <__ieee754_pow+0x2e>
 8009e68:	45aa      	cmp	sl, r5
 8009e6a:	d8e8      	bhi.n	8009e3e <__ieee754_pow+0x2e>
 8009e6c:	e001      	b.n	8009e72 <__ieee754_pow+0x62>
 8009e6e:	4592      	cmp	sl, r2
 8009e70:	d802      	bhi.n	8009e78 <__ieee754_pow+0x68>
 8009e72:	4592      	cmp	sl, r2
 8009e74:	d10f      	bne.n	8009e96 <__ieee754_pow+0x86>
 8009e76:	b171      	cbz	r1, 8009e96 <__ieee754_pow+0x86>
 8009e78:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8009e7c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009e80:	ea58 0803 	orrs.w	r8, r8, r3
 8009e84:	d1db      	bne.n	8009e3e <__ieee754_pow+0x2e>
 8009e86:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e8a:	18db      	adds	r3, r3, r3
 8009e8c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009e90:	4152      	adcs	r2, r2
 8009e92:	4598      	cmp	r8, r3
 8009e94:	e7cf      	b.n	8009e36 <__ieee754_pow+0x26>
 8009e96:	f1b8 0f00 	cmp.w	r8, #0
 8009e9a:	46ab      	mov	fp, r5
 8009e9c:	da43      	bge.n	8009f26 <__ieee754_pow+0x116>
 8009e9e:	4a82      	ldr	r2, [pc, #520]	@ (800a0a8 <__ieee754_pow+0x298>)
 8009ea0:	4592      	cmp	sl, r2
 8009ea2:	d856      	bhi.n	8009f52 <__ieee754_pow+0x142>
 8009ea4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009ea8:	4592      	cmp	sl, r2
 8009eaa:	f240 84c5 	bls.w	800a838 <__ieee754_pow+0xa28>
 8009eae:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009eb2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009eb6:	2a14      	cmp	r2, #20
 8009eb8:	dd18      	ble.n	8009eec <__ieee754_pow+0xdc>
 8009eba:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009ebe:	fa21 f402 	lsr.w	r4, r1, r2
 8009ec2:	fa04 f202 	lsl.w	r2, r4, r2
 8009ec6:	428a      	cmp	r2, r1
 8009ec8:	f040 84b6 	bne.w	800a838 <__ieee754_pow+0xa28>
 8009ecc:	f004 0401 	and.w	r4, r4, #1
 8009ed0:	f1c4 0402 	rsb	r4, r4, #2
 8009ed4:	2900      	cmp	r1, #0
 8009ed6:	d159      	bne.n	8009f8c <__ieee754_pow+0x17c>
 8009ed8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8009edc:	d148      	bne.n	8009f70 <__ieee754_pow+0x160>
 8009ede:	4632      	mov	r2, r6
 8009ee0:	463b      	mov	r3, r7
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	4639      	mov	r1, r7
 8009ee6:	f7f6 fb7f 	bl	80005e8 <__aeabi_dmul>
 8009eea:	e7ae      	b.n	8009e4a <__ieee754_pow+0x3a>
 8009eec:	2900      	cmp	r1, #0
 8009eee:	d14c      	bne.n	8009f8a <__ieee754_pow+0x17a>
 8009ef0:	f1c2 0214 	rsb	r2, r2, #20
 8009ef4:	fa4a f402 	asr.w	r4, sl, r2
 8009ef8:	fa04 f202 	lsl.w	r2, r4, r2
 8009efc:	4552      	cmp	r2, sl
 8009efe:	f040 8498 	bne.w	800a832 <__ieee754_pow+0xa22>
 8009f02:	f004 0401 	and.w	r4, r4, #1
 8009f06:	f1c4 0402 	rsb	r4, r4, #2
 8009f0a:	4a68      	ldr	r2, [pc, #416]	@ (800a0ac <__ieee754_pow+0x29c>)
 8009f0c:	4592      	cmp	sl, r2
 8009f0e:	d1e3      	bne.n	8009ed8 <__ieee754_pow+0xc8>
 8009f10:	f1b9 0f00 	cmp.w	r9, #0
 8009f14:	f280 8489 	bge.w	800a82a <__ieee754_pow+0xa1a>
 8009f18:	4964      	ldr	r1, [pc, #400]	@ (800a0ac <__ieee754_pow+0x29c>)
 8009f1a:	4632      	mov	r2, r6
 8009f1c:	463b      	mov	r3, r7
 8009f1e:	2000      	movs	r0, #0
 8009f20:	f7f6 fc8c 	bl	800083c <__aeabi_ddiv>
 8009f24:	e791      	b.n	8009e4a <__ieee754_pow+0x3a>
 8009f26:	2400      	movs	r4, #0
 8009f28:	bb81      	cbnz	r1, 8009f8c <__ieee754_pow+0x17c>
 8009f2a:	4a5e      	ldr	r2, [pc, #376]	@ (800a0a4 <__ieee754_pow+0x294>)
 8009f2c:	4592      	cmp	sl, r2
 8009f2e:	d1ec      	bne.n	8009f0a <__ieee754_pow+0xfa>
 8009f30:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8009f34:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009f38:	431a      	orrs	r2, r3
 8009f3a:	f000 846e 	beq.w	800a81a <__ieee754_pow+0xa0a>
 8009f3e:	4b5c      	ldr	r3, [pc, #368]	@ (800a0b0 <__ieee754_pow+0x2a0>)
 8009f40:	429d      	cmp	r5, r3
 8009f42:	d908      	bls.n	8009f56 <__ieee754_pow+0x146>
 8009f44:	f1b9 0f00 	cmp.w	r9, #0
 8009f48:	f280 846b 	bge.w	800a822 <__ieee754_pow+0xa12>
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	2100      	movs	r1, #0
 8009f50:	e77b      	b.n	8009e4a <__ieee754_pow+0x3a>
 8009f52:	2402      	movs	r4, #2
 8009f54:	e7e8      	b.n	8009f28 <__ieee754_pow+0x118>
 8009f56:	f1b9 0f00 	cmp.w	r9, #0
 8009f5a:	f04f 0000 	mov.w	r0, #0
 8009f5e:	f04f 0100 	mov.w	r1, #0
 8009f62:	f6bf af72 	bge.w	8009e4a <__ieee754_pow+0x3a>
 8009f66:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009f6a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009f6e:	e76c      	b.n	8009e4a <__ieee754_pow+0x3a>
 8009f70:	4a50      	ldr	r2, [pc, #320]	@ (800a0b4 <__ieee754_pow+0x2a4>)
 8009f72:	4591      	cmp	r9, r2
 8009f74:	d10a      	bne.n	8009f8c <__ieee754_pow+0x17c>
 8009f76:	f1b8 0f00 	cmp.w	r8, #0
 8009f7a:	db07      	blt.n	8009f8c <__ieee754_pow+0x17c>
 8009f7c:	ec47 6b10 	vmov	d0, r6, r7
 8009f80:	b011      	add	sp, #68	@ 0x44
 8009f82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f86:	f000 bd4f 	b.w	800aa28 <__ieee754_sqrt>
 8009f8a:	2400      	movs	r4, #0
 8009f8c:	ec47 6b10 	vmov	d0, r6, r7
 8009f90:	9302      	str	r3, [sp, #8]
 8009f92:	f000 fc87 	bl	800a8a4 <fabs>
 8009f96:	9b02      	ldr	r3, [sp, #8]
 8009f98:	ec51 0b10 	vmov	r0, r1, d0
 8009f9c:	bb43      	cbnz	r3, 8009ff0 <__ieee754_pow+0x1e0>
 8009f9e:	4b43      	ldr	r3, [pc, #268]	@ (800a0ac <__ieee754_pow+0x29c>)
 8009fa0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d000      	beq.n	8009faa <__ieee754_pow+0x19a>
 8009fa8:	bb15      	cbnz	r5, 8009ff0 <__ieee754_pow+0x1e0>
 8009faa:	f1b9 0f00 	cmp.w	r9, #0
 8009fae:	da05      	bge.n	8009fbc <__ieee754_pow+0x1ac>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	493d      	ldr	r1, [pc, #244]	@ (800a0ac <__ieee754_pow+0x29c>)
 8009fb8:	f7f6 fc40 	bl	800083c <__aeabi_ddiv>
 8009fbc:	f1b8 0f00 	cmp.w	r8, #0
 8009fc0:	f6bf af43 	bge.w	8009e4a <__ieee754_pow+0x3a>
 8009fc4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009fc8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009fcc:	4325      	orrs	r5, r4
 8009fce:	d108      	bne.n	8009fe2 <__ieee754_pow+0x1d2>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	f7f6 f94e 	bl	8000278 <__aeabi_dsub>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	e79e      	b.n	8009f20 <__ieee754_pow+0x110>
 8009fe2:	2c01      	cmp	r4, #1
 8009fe4:	f47f af31 	bne.w	8009e4a <__ieee754_pow+0x3a>
 8009fe8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009fec:	4619      	mov	r1, r3
 8009fee:	e72c      	b.n	8009e4a <__ieee754_pow+0x3a>
 8009ff0:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	ea53 0204 	orrs.w	r2, r3, r4
 8009ffa:	d102      	bne.n	800a002 <__ieee754_pow+0x1f2>
 8009ffc:	4632      	mov	r2, r6
 8009ffe:	463b      	mov	r3, r7
 800a000:	e7e8      	b.n	8009fd4 <__ieee754_pow+0x1c4>
 800a002:	3c01      	subs	r4, #1
 800a004:	431c      	orrs	r4, r3
 800a006:	d016      	beq.n	800a036 <__ieee754_pow+0x226>
 800a008:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a090 <__ieee754_pow+0x280>
 800a00c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800a010:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a014:	f240 8110 	bls.w	800a238 <__ieee754_pow+0x428>
 800a018:	4b27      	ldr	r3, [pc, #156]	@ (800a0b8 <__ieee754_pow+0x2a8>)
 800a01a:	459a      	cmp	sl, r3
 800a01c:	4b24      	ldr	r3, [pc, #144]	@ (800a0b0 <__ieee754_pow+0x2a0>)
 800a01e:	d916      	bls.n	800a04e <__ieee754_pow+0x23e>
 800a020:	429d      	cmp	r5, r3
 800a022:	d80b      	bhi.n	800a03c <__ieee754_pow+0x22c>
 800a024:	f1b9 0f00 	cmp.w	r9, #0
 800a028:	da0b      	bge.n	800a042 <__ieee754_pow+0x232>
 800a02a:	2000      	movs	r0, #0
 800a02c:	b011      	add	sp, #68	@ 0x44
 800a02e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a032:	f000 bcf1 	b.w	800aa18 <__math_oflow>
 800a036:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800a098 <__ieee754_pow+0x288>
 800a03a:	e7e7      	b.n	800a00c <__ieee754_pow+0x1fc>
 800a03c:	f1b9 0f00 	cmp.w	r9, #0
 800a040:	dcf3      	bgt.n	800a02a <__ieee754_pow+0x21a>
 800a042:	2000      	movs	r0, #0
 800a044:	b011      	add	sp, #68	@ 0x44
 800a046:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04a:	f000 bcdd 	b.w	800aa08 <__math_uflow>
 800a04e:	429d      	cmp	r5, r3
 800a050:	d20c      	bcs.n	800a06c <__ieee754_pow+0x25c>
 800a052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a056:	2200      	movs	r2, #0
 800a058:	2300      	movs	r3, #0
 800a05a:	f7f6 fd37 	bl	8000acc <__aeabi_dcmplt>
 800a05e:	3800      	subs	r0, #0
 800a060:	bf18      	it	ne
 800a062:	2001      	movne	r0, #1
 800a064:	f1b9 0f00 	cmp.w	r9, #0
 800a068:	daec      	bge.n	800a044 <__ieee754_pow+0x234>
 800a06a:	e7df      	b.n	800a02c <__ieee754_pow+0x21c>
 800a06c:	4b0f      	ldr	r3, [pc, #60]	@ (800a0ac <__ieee754_pow+0x29c>)
 800a06e:	429d      	cmp	r5, r3
 800a070:	f04f 0200 	mov.w	r2, #0
 800a074:	d922      	bls.n	800a0bc <__ieee754_pow+0x2ac>
 800a076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a07a:	2300      	movs	r3, #0
 800a07c:	f7f6 fd26 	bl	8000acc <__aeabi_dcmplt>
 800a080:	3800      	subs	r0, #0
 800a082:	bf18      	it	ne
 800a084:	2001      	movne	r0, #1
 800a086:	f1b9 0f00 	cmp.w	r9, #0
 800a08a:	dccf      	bgt.n	800a02c <__ieee754_pow+0x21c>
 800a08c:	e7da      	b.n	800a044 <__ieee754_pow+0x234>
 800a08e:	bf00      	nop
 800a090:	00000000 	.word	0x00000000
 800a094:	3ff00000 	.word	0x3ff00000
 800a098:	00000000 	.word	0x00000000
 800a09c:	bff00000 	.word	0xbff00000
 800a0a0:	fff00000 	.word	0xfff00000
 800a0a4:	7ff00000 	.word	0x7ff00000
 800a0a8:	433fffff 	.word	0x433fffff
 800a0ac:	3ff00000 	.word	0x3ff00000
 800a0b0:	3fefffff 	.word	0x3fefffff
 800a0b4:	3fe00000 	.word	0x3fe00000
 800a0b8:	43f00000 	.word	0x43f00000
 800a0bc:	4b5a      	ldr	r3, [pc, #360]	@ (800a228 <__ieee754_pow+0x418>)
 800a0be:	f7f6 f8db 	bl	8000278 <__aeabi_dsub>
 800a0c2:	a351      	add	r3, pc, #324	@ (adr r3, 800a208 <__ieee754_pow+0x3f8>)
 800a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c8:	4604      	mov	r4, r0
 800a0ca:	460d      	mov	r5, r1
 800a0cc:	f7f6 fa8c 	bl	80005e8 <__aeabi_dmul>
 800a0d0:	a34f      	add	r3, pc, #316	@ (adr r3, 800a210 <__ieee754_pow+0x400>)
 800a0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d6:	4606      	mov	r6, r0
 800a0d8:	460f      	mov	r7, r1
 800a0da:	4620      	mov	r0, r4
 800a0dc:	4629      	mov	r1, r5
 800a0de:	f7f6 fa83 	bl	80005e8 <__aeabi_dmul>
 800a0e2:	4b52      	ldr	r3, [pc, #328]	@ (800a22c <__ieee754_pow+0x41c>)
 800a0e4:	4682      	mov	sl, r0
 800a0e6:	468b      	mov	fp, r1
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	f7f6 fa7b 	bl	80005e8 <__aeabi_dmul>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	a148      	add	r1, pc, #288	@ (adr r1, 800a218 <__ieee754_pow+0x408>)
 800a0f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0fc:	f7f6 f8bc 	bl	8000278 <__aeabi_dsub>
 800a100:	4622      	mov	r2, r4
 800a102:	462b      	mov	r3, r5
 800a104:	f7f6 fa70 	bl	80005e8 <__aeabi_dmul>
 800a108:	4602      	mov	r2, r0
 800a10a:	460b      	mov	r3, r1
 800a10c:	2000      	movs	r0, #0
 800a10e:	4948      	ldr	r1, [pc, #288]	@ (800a230 <__ieee754_pow+0x420>)
 800a110:	f7f6 f8b2 	bl	8000278 <__aeabi_dsub>
 800a114:	4622      	mov	r2, r4
 800a116:	4680      	mov	r8, r0
 800a118:	4689      	mov	r9, r1
 800a11a:	462b      	mov	r3, r5
 800a11c:	4620      	mov	r0, r4
 800a11e:	4629      	mov	r1, r5
 800a120:	f7f6 fa62 	bl	80005e8 <__aeabi_dmul>
 800a124:	4602      	mov	r2, r0
 800a126:	460b      	mov	r3, r1
 800a128:	4640      	mov	r0, r8
 800a12a:	4649      	mov	r1, r9
 800a12c:	f7f6 fa5c 	bl	80005e8 <__aeabi_dmul>
 800a130:	a33b      	add	r3, pc, #236	@ (adr r3, 800a220 <__ieee754_pow+0x410>)
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	f7f6 fa57 	bl	80005e8 <__aeabi_dmul>
 800a13a:	4602      	mov	r2, r0
 800a13c:	460b      	mov	r3, r1
 800a13e:	4650      	mov	r0, sl
 800a140:	4659      	mov	r1, fp
 800a142:	f7f6 f899 	bl	8000278 <__aeabi_dsub>
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	4680      	mov	r8, r0
 800a14c:	4689      	mov	r9, r1
 800a14e:	4630      	mov	r0, r6
 800a150:	4639      	mov	r1, r7
 800a152:	f7f6 f893 	bl	800027c <__adddf3>
 800a156:	2400      	movs	r4, #0
 800a158:	4632      	mov	r2, r6
 800a15a:	463b      	mov	r3, r7
 800a15c:	4620      	mov	r0, r4
 800a15e:	460d      	mov	r5, r1
 800a160:	f7f6 f88a 	bl	8000278 <__aeabi_dsub>
 800a164:	4602      	mov	r2, r0
 800a166:	460b      	mov	r3, r1
 800a168:	4640      	mov	r0, r8
 800a16a:	4649      	mov	r1, r9
 800a16c:	f7f6 f884 	bl	8000278 <__aeabi_dsub>
 800a170:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a174:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a178:	2300      	movs	r3, #0
 800a17a:	9304      	str	r3, [sp, #16]
 800a17c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a180:	4606      	mov	r6, r0
 800a182:	460f      	mov	r7, r1
 800a184:	465b      	mov	r3, fp
 800a186:	4652      	mov	r2, sl
 800a188:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a18c:	f7f6 f874 	bl	8000278 <__aeabi_dsub>
 800a190:	4622      	mov	r2, r4
 800a192:	462b      	mov	r3, r5
 800a194:	f7f6 fa28 	bl	80005e8 <__aeabi_dmul>
 800a198:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a19c:	4680      	mov	r8, r0
 800a19e:	4689      	mov	r9, r1
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	4639      	mov	r1, r7
 800a1a4:	f7f6 fa20 	bl	80005e8 <__aeabi_dmul>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	4640      	mov	r0, r8
 800a1ae:	4649      	mov	r1, r9
 800a1b0:	f7f6 f864 	bl	800027c <__adddf3>
 800a1b4:	465b      	mov	r3, fp
 800a1b6:	4606      	mov	r6, r0
 800a1b8:	460f      	mov	r7, r1
 800a1ba:	4652      	mov	r2, sl
 800a1bc:	4620      	mov	r0, r4
 800a1be:	4629      	mov	r1, r5
 800a1c0:	f7f6 fa12 	bl	80005e8 <__aeabi_dmul>
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	4680      	mov	r8, r0
 800a1ca:	4689      	mov	r9, r1
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	4639      	mov	r1, r7
 800a1d0:	f7f6 f854 	bl	800027c <__adddf3>
 800a1d4:	4b17      	ldr	r3, [pc, #92]	@ (800a234 <__ieee754_pow+0x424>)
 800a1d6:	4299      	cmp	r1, r3
 800a1d8:	4604      	mov	r4, r0
 800a1da:	460d      	mov	r5, r1
 800a1dc:	468b      	mov	fp, r1
 800a1de:	f340 820b 	ble.w	800a5f8 <__ieee754_pow+0x7e8>
 800a1e2:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a1e6:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a1ea:	4303      	orrs	r3, r0
 800a1ec:	f000 81ea 	beq.w	800a5c4 <__ieee754_pow+0x7b4>
 800a1f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f7f6 fc68 	bl	8000acc <__aeabi_dcmplt>
 800a1fc:	3800      	subs	r0, #0
 800a1fe:	bf18      	it	ne
 800a200:	2001      	movne	r0, #1
 800a202:	e713      	b.n	800a02c <__ieee754_pow+0x21c>
 800a204:	f3af 8000 	nop.w
 800a208:	60000000 	.word	0x60000000
 800a20c:	3ff71547 	.word	0x3ff71547
 800a210:	f85ddf44 	.word	0xf85ddf44
 800a214:	3e54ae0b 	.word	0x3e54ae0b
 800a218:	55555555 	.word	0x55555555
 800a21c:	3fd55555 	.word	0x3fd55555
 800a220:	652b82fe 	.word	0x652b82fe
 800a224:	3ff71547 	.word	0x3ff71547
 800a228:	3ff00000 	.word	0x3ff00000
 800a22c:	3fd00000 	.word	0x3fd00000
 800a230:	3fe00000 	.word	0x3fe00000
 800a234:	408fffff 	.word	0x408fffff
 800a238:	4bd5      	ldr	r3, [pc, #852]	@ (800a590 <__ieee754_pow+0x780>)
 800a23a:	ea08 0303 	and.w	r3, r8, r3
 800a23e:	2200      	movs	r2, #0
 800a240:	b92b      	cbnz	r3, 800a24e <__ieee754_pow+0x43e>
 800a242:	4bd4      	ldr	r3, [pc, #848]	@ (800a594 <__ieee754_pow+0x784>)
 800a244:	f7f6 f9d0 	bl	80005e8 <__aeabi_dmul>
 800a248:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a24c:	468b      	mov	fp, r1
 800a24e:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a252:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a256:	4413      	add	r3, r2
 800a258:	930a      	str	r3, [sp, #40]	@ 0x28
 800a25a:	4bcf      	ldr	r3, [pc, #828]	@ (800a598 <__ieee754_pow+0x788>)
 800a25c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a260:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a264:	459b      	cmp	fp, r3
 800a266:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a26a:	dd08      	ble.n	800a27e <__ieee754_pow+0x46e>
 800a26c:	4bcb      	ldr	r3, [pc, #812]	@ (800a59c <__ieee754_pow+0x78c>)
 800a26e:	459b      	cmp	fp, r3
 800a270:	f340 81a5 	ble.w	800a5be <__ieee754_pow+0x7ae>
 800a274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a276:	3301      	adds	r3, #1
 800a278:	930a      	str	r3, [sp, #40]	@ 0x28
 800a27a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a27e:	f04f 0a00 	mov.w	sl, #0
 800a282:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a286:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a288:	4bc5      	ldr	r3, [pc, #788]	@ (800a5a0 <__ieee754_pow+0x790>)
 800a28a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a28e:	ed93 7b00 	vldr	d7, [r3]
 800a292:	4629      	mov	r1, r5
 800a294:	ec53 2b17 	vmov	r2, r3, d7
 800a298:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a29c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a2a0:	f7f5 ffea 	bl	8000278 <__aeabi_dsub>
 800a2a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a2a8:	4606      	mov	r6, r0
 800a2aa:	460f      	mov	r7, r1
 800a2ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2b0:	f7f5 ffe4 	bl	800027c <__adddf3>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	49ba      	ldr	r1, [pc, #744]	@ (800a5a4 <__ieee754_pow+0x794>)
 800a2bc:	f7f6 fabe 	bl	800083c <__aeabi_ddiv>
 800a2c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	4639      	mov	r1, r7
 800a2cc:	f7f6 f98c 	bl	80005e8 <__aeabi_dmul>
 800a2d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2d4:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a2d8:	106d      	asrs	r5, r5, #1
 800a2da:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a2de:	f04f 0b00 	mov.w	fp, #0
 800a2e2:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a2e6:	4661      	mov	r1, ip
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a2ee:	4658      	mov	r0, fp
 800a2f0:	46e1      	mov	r9, ip
 800a2f2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a2f6:	4614      	mov	r4, r2
 800a2f8:	461d      	mov	r5, r3
 800a2fa:	f7f6 f975 	bl	80005e8 <__aeabi_dmul>
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	4630      	mov	r0, r6
 800a304:	4639      	mov	r1, r7
 800a306:	f7f5 ffb7 	bl	8000278 <__aeabi_dsub>
 800a30a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a30e:	4606      	mov	r6, r0
 800a310:	460f      	mov	r7, r1
 800a312:	4620      	mov	r0, r4
 800a314:	4629      	mov	r1, r5
 800a316:	f7f5 ffaf 	bl	8000278 <__aeabi_dsub>
 800a31a:	4602      	mov	r2, r0
 800a31c:	460b      	mov	r3, r1
 800a31e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a322:	f7f5 ffa9 	bl	8000278 <__aeabi_dsub>
 800a326:	465a      	mov	r2, fp
 800a328:	464b      	mov	r3, r9
 800a32a:	f7f6 f95d 	bl	80005e8 <__aeabi_dmul>
 800a32e:	4602      	mov	r2, r0
 800a330:	460b      	mov	r3, r1
 800a332:	4630      	mov	r0, r6
 800a334:	4639      	mov	r1, r7
 800a336:	f7f5 ff9f 	bl	8000278 <__aeabi_dsub>
 800a33a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a33e:	f7f6 f953 	bl	80005e8 <__aeabi_dmul>
 800a342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a346:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a34a:	4610      	mov	r0, r2
 800a34c:	4619      	mov	r1, r3
 800a34e:	f7f6 f94b 	bl	80005e8 <__aeabi_dmul>
 800a352:	a37d      	add	r3, pc, #500	@ (adr r3, 800a548 <__ieee754_pow+0x738>)
 800a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a358:	4604      	mov	r4, r0
 800a35a:	460d      	mov	r5, r1
 800a35c:	f7f6 f944 	bl	80005e8 <__aeabi_dmul>
 800a360:	a37b      	add	r3, pc, #492	@ (adr r3, 800a550 <__ieee754_pow+0x740>)
 800a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a366:	f7f5 ff89 	bl	800027c <__adddf3>
 800a36a:	4622      	mov	r2, r4
 800a36c:	462b      	mov	r3, r5
 800a36e:	f7f6 f93b 	bl	80005e8 <__aeabi_dmul>
 800a372:	a379      	add	r3, pc, #484	@ (adr r3, 800a558 <__ieee754_pow+0x748>)
 800a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a378:	f7f5 ff80 	bl	800027c <__adddf3>
 800a37c:	4622      	mov	r2, r4
 800a37e:	462b      	mov	r3, r5
 800a380:	f7f6 f932 	bl	80005e8 <__aeabi_dmul>
 800a384:	a376      	add	r3, pc, #472	@ (adr r3, 800a560 <__ieee754_pow+0x750>)
 800a386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38a:	f7f5 ff77 	bl	800027c <__adddf3>
 800a38e:	4622      	mov	r2, r4
 800a390:	462b      	mov	r3, r5
 800a392:	f7f6 f929 	bl	80005e8 <__aeabi_dmul>
 800a396:	a374      	add	r3, pc, #464	@ (adr r3, 800a568 <__ieee754_pow+0x758>)
 800a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39c:	f7f5 ff6e 	bl	800027c <__adddf3>
 800a3a0:	4622      	mov	r2, r4
 800a3a2:	462b      	mov	r3, r5
 800a3a4:	f7f6 f920 	bl	80005e8 <__aeabi_dmul>
 800a3a8:	a371      	add	r3, pc, #452	@ (adr r3, 800a570 <__ieee754_pow+0x760>)
 800a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ae:	f7f5 ff65 	bl	800027c <__adddf3>
 800a3b2:	4622      	mov	r2, r4
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	460f      	mov	r7, r1
 800a3b8:	462b      	mov	r3, r5
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	4629      	mov	r1, r5
 800a3be:	f7f6 f913 	bl	80005e8 <__aeabi_dmul>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	4639      	mov	r1, r7
 800a3ca:	f7f6 f90d 	bl	80005e8 <__aeabi_dmul>
 800a3ce:	465a      	mov	r2, fp
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	464b      	mov	r3, r9
 800a3d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3da:	f7f5 ff4f 	bl	800027c <__adddf3>
 800a3de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3e2:	f7f6 f901 	bl	80005e8 <__aeabi_dmul>
 800a3e6:	4622      	mov	r2, r4
 800a3e8:	462b      	mov	r3, r5
 800a3ea:	f7f5 ff47 	bl	800027c <__adddf3>
 800a3ee:	465a      	mov	r2, fp
 800a3f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a3f4:	464b      	mov	r3, r9
 800a3f6:	4658      	mov	r0, fp
 800a3f8:	4649      	mov	r1, r9
 800a3fa:	f7f6 f8f5 	bl	80005e8 <__aeabi_dmul>
 800a3fe:	4b6a      	ldr	r3, [pc, #424]	@ (800a5a8 <__ieee754_pow+0x798>)
 800a400:	2200      	movs	r2, #0
 800a402:	4606      	mov	r6, r0
 800a404:	460f      	mov	r7, r1
 800a406:	f7f5 ff39 	bl	800027c <__adddf3>
 800a40a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a40e:	f7f5 ff35 	bl	800027c <__adddf3>
 800a412:	46d8      	mov	r8, fp
 800a414:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a418:	460d      	mov	r5, r1
 800a41a:	465a      	mov	r2, fp
 800a41c:	460b      	mov	r3, r1
 800a41e:	4640      	mov	r0, r8
 800a420:	4649      	mov	r1, r9
 800a422:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a426:	f7f6 f8df 	bl	80005e8 <__aeabi_dmul>
 800a42a:	465c      	mov	r4, fp
 800a42c:	4680      	mov	r8, r0
 800a42e:	4689      	mov	r9, r1
 800a430:	4b5d      	ldr	r3, [pc, #372]	@ (800a5a8 <__ieee754_pow+0x798>)
 800a432:	2200      	movs	r2, #0
 800a434:	4620      	mov	r0, r4
 800a436:	4629      	mov	r1, r5
 800a438:	f7f5 ff1e 	bl	8000278 <__aeabi_dsub>
 800a43c:	4632      	mov	r2, r6
 800a43e:	463b      	mov	r3, r7
 800a440:	f7f5 ff1a 	bl	8000278 <__aeabi_dsub>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a44c:	f7f5 ff14 	bl	8000278 <__aeabi_dsub>
 800a450:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a454:	f7f6 f8c8 	bl	80005e8 <__aeabi_dmul>
 800a458:	4622      	mov	r2, r4
 800a45a:	4606      	mov	r6, r0
 800a45c:	460f      	mov	r7, r1
 800a45e:	462b      	mov	r3, r5
 800a460:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a464:	f7f6 f8c0 	bl	80005e8 <__aeabi_dmul>
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	4630      	mov	r0, r6
 800a46e:	4639      	mov	r1, r7
 800a470:	f7f5 ff04 	bl	800027c <__adddf3>
 800a474:	4606      	mov	r6, r0
 800a476:	460f      	mov	r7, r1
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	4640      	mov	r0, r8
 800a47e:	4649      	mov	r1, r9
 800a480:	f7f5 fefc 	bl	800027c <__adddf3>
 800a484:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800a488:	a33b      	add	r3, pc, #236	@ (adr r3, 800a578 <__ieee754_pow+0x768>)
 800a48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48e:	4658      	mov	r0, fp
 800a490:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800a494:	460d      	mov	r5, r1
 800a496:	f7f6 f8a7 	bl	80005e8 <__aeabi_dmul>
 800a49a:	465c      	mov	r4, fp
 800a49c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4a0:	4642      	mov	r2, r8
 800a4a2:	464b      	mov	r3, r9
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	f7f5 fee6 	bl	8000278 <__aeabi_dsub>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	4639      	mov	r1, r7
 800a4b4:	f7f5 fee0 	bl	8000278 <__aeabi_dsub>
 800a4b8:	a331      	add	r3, pc, #196	@ (adr r3, 800a580 <__ieee754_pow+0x770>)
 800a4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4be:	f7f6 f893 	bl	80005e8 <__aeabi_dmul>
 800a4c2:	a331      	add	r3, pc, #196	@ (adr r3, 800a588 <__ieee754_pow+0x778>)
 800a4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c8:	4606      	mov	r6, r0
 800a4ca:	460f      	mov	r7, r1
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	f7f6 f88a 	bl	80005e8 <__aeabi_dmul>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	4630      	mov	r0, r6
 800a4da:	4639      	mov	r1, r7
 800a4dc:	f7f5 fece 	bl	800027c <__adddf3>
 800a4e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a4e2:	4b32      	ldr	r3, [pc, #200]	@ (800a5ac <__ieee754_pow+0x79c>)
 800a4e4:	4413      	add	r3, r2
 800a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ea:	f7f5 fec7 	bl	800027c <__adddf3>
 800a4ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a4f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a4f4:	f7f6 f80e 	bl	8000514 <__aeabi_i2d>
 800a4f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a4fa:	4b2d      	ldr	r3, [pc, #180]	@ (800a5b0 <__ieee754_pow+0x7a0>)
 800a4fc:	4413      	add	r3, r2
 800a4fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a502:	4606      	mov	r6, r0
 800a504:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a508:	460f      	mov	r7, r1
 800a50a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a50e:	f7f5 feb5 	bl	800027c <__adddf3>
 800a512:	4642      	mov	r2, r8
 800a514:	464b      	mov	r3, r9
 800a516:	f7f5 feb1 	bl	800027c <__adddf3>
 800a51a:	4632      	mov	r2, r6
 800a51c:	463b      	mov	r3, r7
 800a51e:	f7f5 fead 	bl	800027c <__adddf3>
 800a522:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800a526:	4632      	mov	r2, r6
 800a528:	463b      	mov	r3, r7
 800a52a:	4658      	mov	r0, fp
 800a52c:	460d      	mov	r5, r1
 800a52e:	f7f5 fea3 	bl	8000278 <__aeabi_dsub>
 800a532:	4642      	mov	r2, r8
 800a534:	464b      	mov	r3, r9
 800a536:	f7f5 fe9f 	bl	8000278 <__aeabi_dsub>
 800a53a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a53e:	f7f5 fe9b 	bl	8000278 <__aeabi_dsub>
 800a542:	465c      	mov	r4, fp
 800a544:	e036      	b.n	800a5b4 <__ieee754_pow+0x7a4>
 800a546:	bf00      	nop
 800a548:	4a454eef 	.word	0x4a454eef
 800a54c:	3fca7e28 	.word	0x3fca7e28
 800a550:	93c9db65 	.word	0x93c9db65
 800a554:	3fcd864a 	.word	0x3fcd864a
 800a558:	a91d4101 	.word	0xa91d4101
 800a55c:	3fd17460 	.word	0x3fd17460
 800a560:	518f264d 	.word	0x518f264d
 800a564:	3fd55555 	.word	0x3fd55555
 800a568:	db6fabff 	.word	0xdb6fabff
 800a56c:	3fdb6db6 	.word	0x3fdb6db6
 800a570:	33333303 	.word	0x33333303
 800a574:	3fe33333 	.word	0x3fe33333
 800a578:	e0000000 	.word	0xe0000000
 800a57c:	3feec709 	.word	0x3feec709
 800a580:	dc3a03fd 	.word	0xdc3a03fd
 800a584:	3feec709 	.word	0x3feec709
 800a588:	145b01f5 	.word	0x145b01f5
 800a58c:	be3e2fe0 	.word	0xbe3e2fe0
 800a590:	7ff00000 	.word	0x7ff00000
 800a594:	43400000 	.word	0x43400000
 800a598:	0003988e 	.word	0x0003988e
 800a59c:	000bb679 	.word	0x000bb679
 800a5a0:	0800ad10 	.word	0x0800ad10
 800a5a4:	3ff00000 	.word	0x3ff00000
 800a5a8:	40080000 	.word	0x40080000
 800a5ac:	0800acf0 	.word	0x0800acf0
 800a5b0:	0800ad00 	.word	0x0800ad00
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5bc:	e5d6      	b.n	800a16c <__ieee754_pow+0x35c>
 800a5be:	f04f 0a01 	mov.w	sl, #1
 800a5c2:	e65e      	b.n	800a282 <__ieee754_pow+0x472>
 800a5c4:	a3b5      	add	r3, pc, #724	@ (adr r3, 800a89c <__ieee754_pow+0xa8c>)
 800a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	4639      	mov	r1, r7
 800a5ce:	f7f5 fe55 	bl	800027c <__adddf3>
 800a5d2:	4642      	mov	r2, r8
 800a5d4:	e9cd 0100 	strd	r0, r1, [sp]
 800a5d8:	464b      	mov	r3, r9
 800a5da:	4620      	mov	r0, r4
 800a5dc:	4629      	mov	r1, r5
 800a5de:	f7f5 fe4b 	bl	8000278 <__aeabi_dsub>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5ea:	f7f6 fa8d 	bl	8000b08 <__aeabi_dcmpgt>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	f47f adfe 	bne.w	800a1f0 <__ieee754_pow+0x3e0>
 800a5f4:	4ba2      	ldr	r3, [pc, #648]	@ (800a880 <__ieee754_pow+0xa70>)
 800a5f6:	e022      	b.n	800a63e <__ieee754_pow+0x82e>
 800a5f8:	4ca2      	ldr	r4, [pc, #648]	@ (800a884 <__ieee754_pow+0xa74>)
 800a5fa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a5fe:	42a3      	cmp	r3, r4
 800a600:	d919      	bls.n	800a636 <__ieee754_pow+0x826>
 800a602:	4ba1      	ldr	r3, [pc, #644]	@ (800a888 <__ieee754_pow+0xa78>)
 800a604:	440b      	add	r3, r1
 800a606:	4303      	orrs	r3, r0
 800a608:	d009      	beq.n	800a61e <__ieee754_pow+0x80e>
 800a60a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a60e:	2200      	movs	r2, #0
 800a610:	2300      	movs	r3, #0
 800a612:	f7f6 fa5b 	bl	8000acc <__aeabi_dcmplt>
 800a616:	3800      	subs	r0, #0
 800a618:	bf18      	it	ne
 800a61a:	2001      	movne	r0, #1
 800a61c:	e512      	b.n	800a044 <__ieee754_pow+0x234>
 800a61e:	4642      	mov	r2, r8
 800a620:	464b      	mov	r3, r9
 800a622:	f7f5 fe29 	bl	8000278 <__aeabi_dsub>
 800a626:	4632      	mov	r2, r6
 800a628:	463b      	mov	r3, r7
 800a62a:	f7f6 fa63 	bl	8000af4 <__aeabi_dcmpge>
 800a62e:	2800      	cmp	r0, #0
 800a630:	d1eb      	bne.n	800a60a <__ieee754_pow+0x7fa>
 800a632:	4b96      	ldr	r3, [pc, #600]	@ (800a88c <__ieee754_pow+0xa7c>)
 800a634:	e003      	b.n	800a63e <__ieee754_pow+0x82e>
 800a636:	4a96      	ldr	r2, [pc, #600]	@ (800a890 <__ieee754_pow+0xa80>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	f240 80e7 	bls.w	800a80c <__ieee754_pow+0x9fc>
 800a63e:	151b      	asrs	r3, r3, #20
 800a640:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800a644:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800a648:	fa4a fa03 	asr.w	sl, sl, r3
 800a64c:	44da      	add	sl, fp
 800a64e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a652:	4890      	ldr	r0, [pc, #576]	@ (800a894 <__ieee754_pow+0xa84>)
 800a654:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a658:	4108      	asrs	r0, r1
 800a65a:	ea00 030a 	and.w	r3, r0, sl
 800a65e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a662:	f1c1 0114 	rsb	r1, r1, #20
 800a666:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a66a:	fa4a fa01 	asr.w	sl, sl, r1
 800a66e:	f1bb 0f00 	cmp.w	fp, #0
 800a672:	4640      	mov	r0, r8
 800a674:	4649      	mov	r1, r9
 800a676:	f04f 0200 	mov.w	r2, #0
 800a67a:	bfb8      	it	lt
 800a67c:	f1ca 0a00 	rsblt	sl, sl, #0
 800a680:	f7f5 fdfa 	bl	8000278 <__aeabi_dsub>
 800a684:	4680      	mov	r8, r0
 800a686:	4689      	mov	r9, r1
 800a688:	4632      	mov	r2, r6
 800a68a:	463b      	mov	r3, r7
 800a68c:	4640      	mov	r0, r8
 800a68e:	4649      	mov	r1, r9
 800a690:	f7f5 fdf4 	bl	800027c <__adddf3>
 800a694:	2400      	movs	r4, #0
 800a696:	a36a      	add	r3, pc, #424	@ (adr r3, 800a840 <__ieee754_pow+0xa30>)
 800a698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69c:	4620      	mov	r0, r4
 800a69e:	460d      	mov	r5, r1
 800a6a0:	f7f5 ffa2 	bl	80005e8 <__aeabi_dmul>
 800a6a4:	4642      	mov	r2, r8
 800a6a6:	e9cd 0100 	strd	r0, r1, [sp]
 800a6aa:	464b      	mov	r3, r9
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	f7f5 fde2 	bl	8000278 <__aeabi_dsub>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	4639      	mov	r1, r7
 800a6bc:	f7f5 fddc 	bl	8000278 <__aeabi_dsub>
 800a6c0:	a361      	add	r3, pc, #388	@ (adr r3, 800a848 <__ieee754_pow+0xa38>)
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	f7f5 ff8f 	bl	80005e8 <__aeabi_dmul>
 800a6ca:	a361      	add	r3, pc, #388	@ (adr r3, 800a850 <__ieee754_pow+0xa40>)
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	4680      	mov	r8, r0
 800a6d2:	4689      	mov	r9, r1
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	4629      	mov	r1, r5
 800a6d8:	f7f5 ff86 	bl	80005e8 <__aeabi_dmul>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4640      	mov	r0, r8
 800a6e2:	4649      	mov	r1, r9
 800a6e4:	f7f5 fdca 	bl	800027c <__adddf3>
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	460d      	mov	r5, r1
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6f4:	f7f5 fdc2 	bl	800027c <__adddf3>
 800a6f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6fc:	4680      	mov	r8, r0
 800a6fe:	4689      	mov	r9, r1
 800a700:	f7f5 fdba 	bl	8000278 <__aeabi_dsub>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	4620      	mov	r0, r4
 800a70a:	4629      	mov	r1, r5
 800a70c:	f7f5 fdb4 	bl	8000278 <__aeabi_dsub>
 800a710:	4642      	mov	r2, r8
 800a712:	4606      	mov	r6, r0
 800a714:	460f      	mov	r7, r1
 800a716:	464b      	mov	r3, r9
 800a718:	4640      	mov	r0, r8
 800a71a:	4649      	mov	r1, r9
 800a71c:	f7f5 ff64 	bl	80005e8 <__aeabi_dmul>
 800a720:	a34d      	add	r3, pc, #308	@ (adr r3, 800a858 <__ieee754_pow+0xa48>)
 800a722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a726:	4604      	mov	r4, r0
 800a728:	460d      	mov	r5, r1
 800a72a:	f7f5 ff5d 	bl	80005e8 <__aeabi_dmul>
 800a72e:	a34c      	add	r3, pc, #304	@ (adr r3, 800a860 <__ieee754_pow+0xa50>)
 800a730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a734:	f7f5 fda0 	bl	8000278 <__aeabi_dsub>
 800a738:	4622      	mov	r2, r4
 800a73a:	462b      	mov	r3, r5
 800a73c:	f7f5 ff54 	bl	80005e8 <__aeabi_dmul>
 800a740:	a349      	add	r3, pc, #292	@ (adr r3, 800a868 <__ieee754_pow+0xa58>)
 800a742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a746:	f7f5 fd99 	bl	800027c <__adddf3>
 800a74a:	4622      	mov	r2, r4
 800a74c:	462b      	mov	r3, r5
 800a74e:	f7f5 ff4b 	bl	80005e8 <__aeabi_dmul>
 800a752:	a347      	add	r3, pc, #284	@ (adr r3, 800a870 <__ieee754_pow+0xa60>)
 800a754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a758:	f7f5 fd8e 	bl	8000278 <__aeabi_dsub>
 800a75c:	4622      	mov	r2, r4
 800a75e:	462b      	mov	r3, r5
 800a760:	f7f5 ff42 	bl	80005e8 <__aeabi_dmul>
 800a764:	a344      	add	r3, pc, #272	@ (adr r3, 800a878 <__ieee754_pow+0xa68>)
 800a766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76a:	f7f5 fd87 	bl	800027c <__adddf3>
 800a76e:	4622      	mov	r2, r4
 800a770:	462b      	mov	r3, r5
 800a772:	f7f5 ff39 	bl	80005e8 <__aeabi_dmul>
 800a776:	4602      	mov	r2, r0
 800a778:	460b      	mov	r3, r1
 800a77a:	4640      	mov	r0, r8
 800a77c:	4649      	mov	r1, r9
 800a77e:	f7f5 fd7b 	bl	8000278 <__aeabi_dsub>
 800a782:	4604      	mov	r4, r0
 800a784:	460d      	mov	r5, r1
 800a786:	4602      	mov	r2, r0
 800a788:	460b      	mov	r3, r1
 800a78a:	4640      	mov	r0, r8
 800a78c:	4649      	mov	r1, r9
 800a78e:	f7f5 ff2b 	bl	80005e8 <__aeabi_dmul>
 800a792:	2200      	movs	r2, #0
 800a794:	e9cd 0100 	strd	r0, r1, [sp]
 800a798:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a79c:	4620      	mov	r0, r4
 800a79e:	4629      	mov	r1, r5
 800a7a0:	f7f5 fd6a 	bl	8000278 <__aeabi_dsub>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7ac:	f7f6 f846 	bl	800083c <__aeabi_ddiv>
 800a7b0:	4632      	mov	r2, r6
 800a7b2:	4604      	mov	r4, r0
 800a7b4:	460d      	mov	r5, r1
 800a7b6:	463b      	mov	r3, r7
 800a7b8:	4640      	mov	r0, r8
 800a7ba:	4649      	mov	r1, r9
 800a7bc:	f7f5 ff14 	bl	80005e8 <__aeabi_dmul>
 800a7c0:	4632      	mov	r2, r6
 800a7c2:	463b      	mov	r3, r7
 800a7c4:	f7f5 fd5a 	bl	800027c <__adddf3>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	4629      	mov	r1, r5
 800a7d0:	f7f5 fd52 	bl	8000278 <__aeabi_dsub>
 800a7d4:	4642      	mov	r2, r8
 800a7d6:	464b      	mov	r3, r9
 800a7d8:	f7f5 fd4e 	bl	8000278 <__aeabi_dsub>
 800a7dc:	460b      	mov	r3, r1
 800a7de:	4602      	mov	r2, r0
 800a7e0:	492d      	ldr	r1, [pc, #180]	@ (800a898 <__ieee754_pow+0xa88>)
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	f7f5 fd48 	bl	8000278 <__aeabi_dsub>
 800a7e8:	ec41 0b10 	vmov	d0, r0, r1
 800a7ec:	ee10 3a90 	vmov	r3, s1
 800a7f0:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a7f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7f8:	da0b      	bge.n	800a812 <__ieee754_pow+0xa02>
 800a7fa:	4650      	mov	r0, sl
 800a7fc:	f000 f85c 	bl	800a8b8 <scalbn>
 800a800:	ec51 0b10 	vmov	r0, r1, d0
 800a804:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a808:	f7ff bb6d 	b.w	8009ee6 <__ieee754_pow+0xd6>
 800a80c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a810:	e73a      	b.n	800a688 <__ieee754_pow+0x878>
 800a812:	ec51 0b10 	vmov	r0, r1, d0
 800a816:	4619      	mov	r1, r3
 800a818:	e7f4      	b.n	800a804 <__ieee754_pow+0x9f4>
 800a81a:	491f      	ldr	r1, [pc, #124]	@ (800a898 <__ieee754_pow+0xa88>)
 800a81c:	2000      	movs	r0, #0
 800a81e:	f7ff bb14 	b.w	8009e4a <__ieee754_pow+0x3a>
 800a822:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a826:	f7ff bb10 	b.w	8009e4a <__ieee754_pow+0x3a>
 800a82a:	4630      	mov	r0, r6
 800a82c:	4639      	mov	r1, r7
 800a82e:	f7ff bb0c 	b.w	8009e4a <__ieee754_pow+0x3a>
 800a832:	460c      	mov	r4, r1
 800a834:	f7ff bb69 	b.w	8009f0a <__ieee754_pow+0xfa>
 800a838:	2400      	movs	r4, #0
 800a83a:	f7ff bb4b 	b.w	8009ed4 <__ieee754_pow+0xc4>
 800a83e:	bf00      	nop
 800a840:	00000000 	.word	0x00000000
 800a844:	3fe62e43 	.word	0x3fe62e43
 800a848:	fefa39ef 	.word	0xfefa39ef
 800a84c:	3fe62e42 	.word	0x3fe62e42
 800a850:	0ca86c39 	.word	0x0ca86c39
 800a854:	be205c61 	.word	0xbe205c61
 800a858:	72bea4d0 	.word	0x72bea4d0
 800a85c:	3e663769 	.word	0x3e663769
 800a860:	c5d26bf1 	.word	0xc5d26bf1
 800a864:	3ebbbd41 	.word	0x3ebbbd41
 800a868:	af25de2c 	.word	0xaf25de2c
 800a86c:	3f11566a 	.word	0x3f11566a
 800a870:	16bebd93 	.word	0x16bebd93
 800a874:	3f66c16c 	.word	0x3f66c16c
 800a878:	5555553e 	.word	0x5555553e
 800a87c:	3fc55555 	.word	0x3fc55555
 800a880:	40900000 	.word	0x40900000
 800a884:	4090cbff 	.word	0x4090cbff
 800a888:	3f6f3400 	.word	0x3f6f3400
 800a88c:	4090cc00 	.word	0x4090cc00
 800a890:	3fe00000 	.word	0x3fe00000
 800a894:	fff00000 	.word	0xfff00000
 800a898:	3ff00000 	.word	0x3ff00000
 800a89c:	652b82fe 	.word	0x652b82fe
 800a8a0:	3c971547 	.word	0x3c971547

0800a8a4 <fabs>:
 800a8a4:	ec51 0b10 	vmov	r0, r1, d0
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a8ae:	ec43 2b10 	vmov	d0, r2, r3
 800a8b2:	4770      	bx	lr
 800a8b4:	0000      	movs	r0, r0
	...

0800a8b8 <scalbn>:
 800a8b8:	b570      	push	{r4, r5, r6, lr}
 800a8ba:	ec55 4b10 	vmov	r4, r5, d0
 800a8be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	462b      	mov	r3, r5
 800a8c6:	b991      	cbnz	r1, 800a8ee <scalbn+0x36>
 800a8c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a8cc:	4323      	orrs	r3, r4
 800a8ce:	d03b      	beq.n	800a948 <scalbn+0x90>
 800a8d0:	4b33      	ldr	r3, [pc, #204]	@ (800a9a0 <scalbn+0xe8>)
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	4629      	mov	r1, r5
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f7f5 fe86 	bl	80005e8 <__aeabi_dmul>
 800a8dc:	4b31      	ldr	r3, [pc, #196]	@ (800a9a4 <scalbn+0xec>)
 800a8de:	429e      	cmp	r6, r3
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	460d      	mov	r5, r1
 800a8e4:	da0f      	bge.n	800a906 <scalbn+0x4e>
 800a8e6:	a326      	add	r3, pc, #152	@ (adr r3, 800a980 <scalbn+0xc8>)
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	e01e      	b.n	800a92c <scalbn+0x74>
 800a8ee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a8f2:	4291      	cmp	r1, r2
 800a8f4:	d10b      	bne.n	800a90e <scalbn+0x56>
 800a8f6:	4622      	mov	r2, r4
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	f7f5 fcbe 	bl	800027c <__adddf3>
 800a900:	4604      	mov	r4, r0
 800a902:	460d      	mov	r5, r1
 800a904:	e020      	b.n	800a948 <scalbn+0x90>
 800a906:	460b      	mov	r3, r1
 800a908:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a90c:	3936      	subs	r1, #54	@ 0x36
 800a90e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a912:	4296      	cmp	r6, r2
 800a914:	dd0d      	ble.n	800a932 <scalbn+0x7a>
 800a916:	2d00      	cmp	r5, #0
 800a918:	a11b      	add	r1, pc, #108	@ (adr r1, 800a988 <scalbn+0xd0>)
 800a91a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a91e:	da02      	bge.n	800a926 <scalbn+0x6e>
 800a920:	a11b      	add	r1, pc, #108	@ (adr r1, 800a990 <scalbn+0xd8>)
 800a922:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a926:	a318      	add	r3, pc, #96	@ (adr r3, 800a988 <scalbn+0xd0>)
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	f7f5 fe5c 	bl	80005e8 <__aeabi_dmul>
 800a930:	e7e6      	b.n	800a900 <scalbn+0x48>
 800a932:	1872      	adds	r2, r6, r1
 800a934:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a938:	428a      	cmp	r2, r1
 800a93a:	dcec      	bgt.n	800a916 <scalbn+0x5e>
 800a93c:	2a00      	cmp	r2, #0
 800a93e:	dd06      	ble.n	800a94e <scalbn+0x96>
 800a940:	f36f 531e 	bfc	r3, #20, #11
 800a944:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a948:	ec45 4b10 	vmov	d0, r4, r5
 800a94c:	bd70      	pop	{r4, r5, r6, pc}
 800a94e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a952:	da08      	bge.n	800a966 <scalbn+0xae>
 800a954:	2d00      	cmp	r5, #0
 800a956:	a10a      	add	r1, pc, #40	@ (adr r1, 800a980 <scalbn+0xc8>)
 800a958:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a95c:	dac3      	bge.n	800a8e6 <scalbn+0x2e>
 800a95e:	a10e      	add	r1, pc, #56	@ (adr r1, 800a998 <scalbn+0xe0>)
 800a960:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a964:	e7bf      	b.n	800a8e6 <scalbn+0x2e>
 800a966:	3236      	adds	r2, #54	@ 0x36
 800a968:	f36f 531e 	bfc	r3, #20, #11
 800a96c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a970:	4620      	mov	r0, r4
 800a972:	4b0d      	ldr	r3, [pc, #52]	@ (800a9a8 <scalbn+0xf0>)
 800a974:	4629      	mov	r1, r5
 800a976:	2200      	movs	r2, #0
 800a978:	e7d8      	b.n	800a92c <scalbn+0x74>
 800a97a:	bf00      	nop
 800a97c:	f3af 8000 	nop.w
 800a980:	c2f8f359 	.word	0xc2f8f359
 800a984:	01a56e1f 	.word	0x01a56e1f
 800a988:	8800759c 	.word	0x8800759c
 800a98c:	7e37e43c 	.word	0x7e37e43c
 800a990:	8800759c 	.word	0x8800759c
 800a994:	fe37e43c 	.word	0xfe37e43c
 800a998:	c2f8f359 	.word	0xc2f8f359
 800a99c:	81a56e1f 	.word	0x81a56e1f
 800a9a0:	43500000 	.word	0x43500000
 800a9a4:	ffff3cb0 	.word	0xffff3cb0
 800a9a8:	3c900000 	.word	0x3c900000

0800a9ac <with_errno>:
 800a9ac:	b510      	push	{r4, lr}
 800a9ae:	ed2d 8b02 	vpush	{d8}
 800a9b2:	eeb0 8a40 	vmov.f32	s16, s0
 800a9b6:	eef0 8a60 	vmov.f32	s17, s1
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	f7fe fc78 	bl	80092b0 <__errno>
 800a9c0:	eeb0 0a48 	vmov.f32	s0, s16
 800a9c4:	eef0 0a68 	vmov.f32	s1, s17
 800a9c8:	ecbd 8b02 	vpop	{d8}
 800a9cc:	6004      	str	r4, [r0, #0]
 800a9ce:	bd10      	pop	{r4, pc}

0800a9d0 <xflow>:
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	b507      	push	{r0, r1, r2, lr}
 800a9d4:	ec51 0b10 	vmov	r0, r1, d0
 800a9d8:	b183      	cbz	r3, 800a9fc <xflow+0x2c>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a9e0:	e9cd 2300 	strd	r2, r3, [sp]
 800a9e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9e8:	f7f5 fdfe 	bl	80005e8 <__aeabi_dmul>
 800a9ec:	ec41 0b10 	vmov	d0, r0, r1
 800a9f0:	2022      	movs	r0, #34	@ 0x22
 800a9f2:	b003      	add	sp, #12
 800a9f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9f8:	f7ff bfd8 	b.w	800a9ac <with_errno>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	460b      	mov	r3, r1
 800aa00:	e7ee      	b.n	800a9e0 <xflow+0x10>
 800aa02:	0000      	movs	r0, r0
 800aa04:	0000      	movs	r0, r0
	...

0800aa08 <__math_uflow>:
 800aa08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aa10 <__math_uflow+0x8>
 800aa0c:	f7ff bfe0 	b.w	800a9d0 <xflow>
 800aa10:	00000000 	.word	0x00000000
 800aa14:	10000000 	.word	0x10000000

0800aa18 <__math_oflow>:
 800aa18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aa20 <__math_oflow+0x8>
 800aa1c:	f7ff bfd8 	b.w	800a9d0 <xflow>
 800aa20:	00000000 	.word	0x00000000
 800aa24:	70000000 	.word	0x70000000

0800aa28 <__ieee754_sqrt>:
 800aa28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	4a66      	ldr	r2, [pc, #408]	@ (800abc8 <__ieee754_sqrt+0x1a0>)
 800aa2e:	ec55 4b10 	vmov	r4, r5, d0
 800aa32:	43aa      	bics	r2, r5
 800aa34:	462b      	mov	r3, r5
 800aa36:	4621      	mov	r1, r4
 800aa38:	d110      	bne.n	800aa5c <__ieee754_sqrt+0x34>
 800aa3a:	4622      	mov	r2, r4
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	4629      	mov	r1, r5
 800aa40:	f7f5 fdd2 	bl	80005e8 <__aeabi_dmul>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4620      	mov	r0, r4
 800aa4a:	4629      	mov	r1, r5
 800aa4c:	f7f5 fc16 	bl	800027c <__adddf3>
 800aa50:	4604      	mov	r4, r0
 800aa52:	460d      	mov	r5, r1
 800aa54:	ec45 4b10 	vmov	d0, r4, r5
 800aa58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5c:	2d00      	cmp	r5, #0
 800aa5e:	dc0e      	bgt.n	800aa7e <__ieee754_sqrt+0x56>
 800aa60:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800aa64:	4322      	orrs	r2, r4
 800aa66:	d0f5      	beq.n	800aa54 <__ieee754_sqrt+0x2c>
 800aa68:	b19d      	cbz	r5, 800aa92 <__ieee754_sqrt+0x6a>
 800aa6a:	4622      	mov	r2, r4
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	4629      	mov	r1, r5
 800aa70:	f7f5 fc02 	bl	8000278 <__aeabi_dsub>
 800aa74:	4602      	mov	r2, r0
 800aa76:	460b      	mov	r3, r1
 800aa78:	f7f5 fee0 	bl	800083c <__aeabi_ddiv>
 800aa7c:	e7e8      	b.n	800aa50 <__ieee754_sqrt+0x28>
 800aa7e:	152a      	asrs	r2, r5, #20
 800aa80:	d115      	bne.n	800aaae <__ieee754_sqrt+0x86>
 800aa82:	2000      	movs	r0, #0
 800aa84:	e009      	b.n	800aa9a <__ieee754_sqrt+0x72>
 800aa86:	0acb      	lsrs	r3, r1, #11
 800aa88:	3a15      	subs	r2, #21
 800aa8a:	0549      	lsls	r1, r1, #21
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d0fa      	beq.n	800aa86 <__ieee754_sqrt+0x5e>
 800aa90:	e7f7      	b.n	800aa82 <__ieee754_sqrt+0x5a>
 800aa92:	462a      	mov	r2, r5
 800aa94:	e7fa      	b.n	800aa8c <__ieee754_sqrt+0x64>
 800aa96:	005b      	lsls	r3, r3, #1
 800aa98:	3001      	adds	r0, #1
 800aa9a:	02dc      	lsls	r4, r3, #11
 800aa9c:	d5fb      	bpl.n	800aa96 <__ieee754_sqrt+0x6e>
 800aa9e:	1e44      	subs	r4, r0, #1
 800aaa0:	1b12      	subs	r2, r2, r4
 800aaa2:	f1c0 0420 	rsb	r4, r0, #32
 800aaa6:	fa21 f404 	lsr.w	r4, r1, r4
 800aaaa:	4323      	orrs	r3, r4
 800aaac:	4081      	lsls	r1, r0
 800aaae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aab2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800aab6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aaba:	07d2      	lsls	r2, r2, #31
 800aabc:	bf5c      	itt	pl
 800aabe:	005b      	lslpl	r3, r3, #1
 800aac0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800aac4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aac8:	bf58      	it	pl
 800aaca:	0049      	lslpl	r1, r1, #1
 800aacc:	2600      	movs	r6, #0
 800aace:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800aad2:	107f      	asrs	r7, r7, #1
 800aad4:	0049      	lsls	r1, r1, #1
 800aad6:	2016      	movs	r0, #22
 800aad8:	4632      	mov	r2, r6
 800aada:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800aade:	1915      	adds	r5, r2, r4
 800aae0:	429d      	cmp	r5, r3
 800aae2:	bfde      	ittt	le
 800aae4:	192a      	addle	r2, r5, r4
 800aae6:	1b5b      	suble	r3, r3, r5
 800aae8:	1936      	addle	r6, r6, r4
 800aaea:	0fcd      	lsrs	r5, r1, #31
 800aaec:	3801      	subs	r0, #1
 800aaee:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800aaf2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aaf6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800aafa:	d1f0      	bne.n	800aade <__ieee754_sqrt+0xb6>
 800aafc:	4605      	mov	r5, r0
 800aafe:	2420      	movs	r4, #32
 800ab00:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ab04:	4293      	cmp	r3, r2
 800ab06:	eb0c 0e00 	add.w	lr, ip, r0
 800ab0a:	dc02      	bgt.n	800ab12 <__ieee754_sqrt+0xea>
 800ab0c:	d113      	bne.n	800ab36 <__ieee754_sqrt+0x10e>
 800ab0e:	458e      	cmp	lr, r1
 800ab10:	d811      	bhi.n	800ab36 <__ieee754_sqrt+0x10e>
 800ab12:	f1be 0f00 	cmp.w	lr, #0
 800ab16:	eb0e 000c 	add.w	r0, lr, ip
 800ab1a:	da3f      	bge.n	800ab9c <__ieee754_sqrt+0x174>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	db3d      	blt.n	800ab9c <__ieee754_sqrt+0x174>
 800ab20:	f102 0801 	add.w	r8, r2, #1
 800ab24:	1a9b      	subs	r3, r3, r2
 800ab26:	458e      	cmp	lr, r1
 800ab28:	bf88      	it	hi
 800ab2a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ab2e:	eba1 010e 	sub.w	r1, r1, lr
 800ab32:	4465      	add	r5, ip
 800ab34:	4642      	mov	r2, r8
 800ab36:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ab3a:	3c01      	subs	r4, #1
 800ab3c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ab40:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ab44:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ab48:	d1dc      	bne.n	800ab04 <__ieee754_sqrt+0xdc>
 800ab4a:	4319      	orrs	r1, r3
 800ab4c:	d01b      	beq.n	800ab86 <__ieee754_sqrt+0x15e>
 800ab4e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800abcc <__ieee754_sqrt+0x1a4>
 800ab52:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800abd0 <__ieee754_sqrt+0x1a8>
 800ab56:	e9da 0100 	ldrd	r0, r1, [sl]
 800ab5a:	e9db 2300 	ldrd	r2, r3, [fp]
 800ab5e:	f7f5 fb8b 	bl	8000278 <__aeabi_dsub>
 800ab62:	e9da 8900 	ldrd	r8, r9, [sl]
 800ab66:	4602      	mov	r2, r0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	4649      	mov	r1, r9
 800ab6e:	f7f5 ffb7 	bl	8000ae0 <__aeabi_dcmple>
 800ab72:	b140      	cbz	r0, 800ab86 <__ieee754_sqrt+0x15e>
 800ab74:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ab78:	e9da 0100 	ldrd	r0, r1, [sl]
 800ab7c:	e9db 2300 	ldrd	r2, r3, [fp]
 800ab80:	d10e      	bne.n	800aba0 <__ieee754_sqrt+0x178>
 800ab82:	3601      	adds	r6, #1
 800ab84:	4625      	mov	r5, r4
 800ab86:	1073      	asrs	r3, r6, #1
 800ab88:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800ab8c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800ab90:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800ab94:	086b      	lsrs	r3, r5, #1
 800ab96:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800ab9a:	e759      	b.n	800aa50 <__ieee754_sqrt+0x28>
 800ab9c:	4690      	mov	r8, r2
 800ab9e:	e7c1      	b.n	800ab24 <__ieee754_sqrt+0xfc>
 800aba0:	f7f5 fb6c 	bl	800027c <__adddf3>
 800aba4:	e9da 8900 	ldrd	r8, r9, [sl]
 800aba8:	4602      	mov	r2, r0
 800abaa:	460b      	mov	r3, r1
 800abac:	4640      	mov	r0, r8
 800abae:	4649      	mov	r1, r9
 800abb0:	f7f5 ff8c 	bl	8000acc <__aeabi_dcmplt>
 800abb4:	b120      	cbz	r0, 800abc0 <__ieee754_sqrt+0x198>
 800abb6:	1cab      	adds	r3, r5, #2
 800abb8:	bf08      	it	eq
 800abba:	3601      	addeq	r6, #1
 800abbc:	3502      	adds	r5, #2
 800abbe:	e7e2      	b.n	800ab86 <__ieee754_sqrt+0x15e>
 800abc0:	1c6b      	adds	r3, r5, #1
 800abc2:	f023 0501 	bic.w	r5, r3, #1
 800abc6:	e7de      	b.n	800ab86 <__ieee754_sqrt+0x15e>
 800abc8:	7ff00000 	.word	0x7ff00000
 800abcc:	0800ad28 	.word	0x0800ad28
 800abd0:	0800ad20 	.word	0x0800ad20

0800abd4 <_init>:
 800abd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd6:	bf00      	nop
 800abd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abda:	bc08      	pop	{r3}
 800abdc:	469e      	mov	lr, r3
 800abde:	4770      	bx	lr

0800abe0 <_fini>:
 800abe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abe2:	bf00      	nop
 800abe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abe6:	bc08      	pop	{r3}
 800abe8:	469e      	mov	lr, r3
 800abea:	4770      	bx	lr
